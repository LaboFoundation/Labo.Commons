<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MugenInjection.Core</name>
    </assembly>
    <members>
        <member name="T:MugenInjection.Activators.ExpressionActivator">
            <summary>
             Represents the activator that use <see cref="T:System.Linq.Expressions.Expression"/> to activate object.
            </summary>
        </member>
        <member name="T:MugenInjection.Activators.ActivatorBase">
            <summary>
                Represents the base class to create and inject values into the specified object.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.DisposableObject">
            <summary>
            An object that notifies when it is disposed.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IDisposableObject">
            <summary>
            An object that notifies when it is disposed.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IDisposableObject.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IDisposableObject.Disposed">
            <summary>
            Occured after disposed current <see cref="T:MugenInjection.Interface.IDisposableObject"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.DisposableObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Core.DisposableObject"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.DisposableObject.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Core.DisposableObject.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DisposableObject.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="E:MugenInjection.Core.DisposableObject.Disposed">
            <summary>
            Occured after disposed current <see cref="T:MugenInjection.Interface.IDisposableObject"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IActivator">
            <summary>
            Represents the interface that creates and injects values into the specified object.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IActivator.Activate(System.Reflection.ConstructorInfo,MugenInjection.Interface.IBindingContext)">
            <summary>
            Creates new instance of the specified service, and injects values into properties, fields, methods.
            </summary>
            <param name="constructorInfo">The specified <see cref="T:System.Reflection.ConstructorInfo"/>.</param>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IActivator.Activate``1(``0@,MugenInjection.Interface.IBindingContext)">
            <summary>
            Injects values into properties, fields, methods in the specified object.
            </summary>
            <param name="target">The specified target for inject.</param>
            <param name="context">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Activators.ActivatorBase"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.Activate(System.Reflection.ConstructorInfo,MugenInjection.Interface.IBindingContext)">
            <summary>
            Creates new instance of the specified service, and injects values into properties, fields, methods.
            </summary>
            <param name="constructorInfo">The specified <see cref="T:System.Reflection.ConstructorInfo"/>.</param>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.Activate``1(``0@,MugenInjection.Interface.IBindingContext)">
            <summary>
            Injects values into properties, fields, methods in the specified object.
            </summary>
            <param name="target">The specified target for inject.</param>
            <param name="context">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.Activate(System.Reflection.ConstructorInfo)">
            <summary>
                Creates a new instance of the specified service.
            </summary>
            <param name="constructorInfo">
                The specified <see cref="T:System.Reflection.ConstructorInfo"/>.
            </param>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.Inject``1(System.Type,``0@)">
            <summary>
                Injects values into properties, fields, methods in the specified object.
            </summary>
            <param name="targetType">
                The specified target <see cref="T:System.Type"/>.
            </param>
            <param name="target">The specified target for inject.</param>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.IsNeedInject(System.Type,System.Reflection.MemberInfo)">
            <summary>
                Checks the specified <see cref="T:System.Reflection.MemberInfo"/> to inject.
            </summary>
            <param name="attributeType">The specified attribute type that use for inject.</param>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>.
            </param>
            <returns>
                If <c>true</c> need inject;otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.IsHasValuesToInject(System.Type,System.Type)">
            <summary>
            Indicates that the service has values to inject.
            </summary>
            <param name="service">The specified service.</param>
            <param name="attributeType">The specified attribute type that use for inject.</param>
            <returns>If <c>true</c> service have values for inject; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.GetMethodsToInject(System.Type,System.Type)">
            <summary>
                Gets a series of methods to inject.
            </summary>
            <param name="service">The specified service type.</param>
            <param name="attributeType">The specified attribute to inject.</param>
            <returns>A series of methods to inject.</returns>
        </member>
        <member name="M:MugenInjection.Activators.ActivatorBase.GetPropertiesToInject(System.Type,System.Type)">
            <summary>
                Gets a series of properties to inject.
            </summary>
            <param name="service">The specified service type.</param>
            <param name="attributeType">The specified attribute to inject.</param>
            <returns>A series of properties tp inject.</returns>
        </member>
        <member name="P:MugenInjection.Activators.ActivatorBase.BindingFlags">
            <summary>
                Gets or sets the <see cref="P:MugenInjection.Activators.ActivatorBase.BindingFlags"/> to search.
            </summary>
        </member>
        <member name="P:MugenInjection.Activators.ActivatorBase.CurrentContext">
            <summary>
                Gets the current <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Activators.ExpressionActivator.Activate(System.Reflection.ConstructorInfo)">
            <summary>
                Creates a new instance of the specified service.
            </summary>
            <param name="constructorInfo">
                The specified <see cref="T:System.Reflection.ConstructorInfo"/>.
            </param>
        </member>
        <member name="M:MugenInjection.Activators.ExpressionActivator.Inject``1(System.Type,``0@)">
            <summary>
                Injects values into properties, fields, methods in the specified object.
            </summary>
            <param name="targetType">
                The specified target <see cref="T:System.Type"/>.
            </param>
            <param name="target">The specified target for inject.</param>
        </member>
        <member name="M:MugenInjection.Activators.ExpressionActivator.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.ResolveContext">
            <summary>
                Represents a context for resolve service.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ResolveContext.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.ResolveContext"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ResolveContext.Resolve``1">
            <summary>
                Resolves the specifeid service <see cref="!:T"/> use Ioc container.
            </summary>
            <typeparam name="T">
                The specified service <see cref="!:T"/>
            </typeparam>
            <returns>An instance of service.</returns>
        </member>
        <member name="T:MugenInjection.InjectorExtension">
            <summary>
            Represents the extension method for <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get(MugenInjection.Interface.IInjectorResolver,System.Type,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="key">The specified binding key.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get(MugenInjection.Interface.IInjectorResolver,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get(MugenInjection.Interface.IInjectorResolver,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Object,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="key">The specified binding key.</param>
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get``1(MugenInjection.Interface.IInjectorResolver,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <param name="key">The specified binding key.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Get``1(MugenInjection.Interface.IInjectorResolver,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto``1(MugenInjection.Interface.IInjectorResolver,System.Object,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="key">The specified binding key.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetInto``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet(MugenInjection.Interface.IInjectorResolver,System.Type,System.Object@,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="key">The specified binding name.</param>
            <param name="specialParameters">Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet(MugenInjection.Interface.IInjectorResolver,System.Type,System.Object@,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet(MugenInjection.Interface.IInjectorResolver,System.Type,System.Object@,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Object@,System.String,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="key">The specified binding key. </param>
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Object@,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">An instance of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <param name="result">An instance of the service.</param>
            <param name="key">The specified binding key. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <param name="result">An instance of the service.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Tries get an instance of the specified service.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="parameters">The specified parameters.</param>
            <param name="result">An instance of the service.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Object,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <param name="result">An instance of the service.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="key">The specified binding key. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetInto``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <param name="result">An instance of the service.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="key">The specified binding key. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrentInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Object,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="key">The specified binding key. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrentInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="key">The specified binding key. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrentInto``1(MugenInjection.Interface.IInjectorResolver,System.Object,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="key">The specified binding key. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInCurrentInto``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.Collections.Generic.IEnumerable{System.Object}@,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="key">The specified binding key. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.Collections.Generic.IEnumerable{System.Object}@,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.Collections.Generic.IEnumerable{System.Object}@,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrentInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Collections.Generic.IEnumerable{System.Object}@,System.Object,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="key">The specified binding key. </param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrentInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Collections.Generic.IEnumerable{System.Object}@,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="key">The specified binding key. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrentInto``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Object,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="key">The specified binding key. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInCurrentInto``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll(MugenInjection.Interface.IInjectorResolver,System.Type,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="key">The specified binding key. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll(MugenInjection.Interface.IInjectorResolver,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll(MugenInjection.Interface.IInjectorResolver,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Object,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="key">The specified binding key. </param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll``1(MugenInjection.Interface.IInjectorResolver,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="key">The specified binding key. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAll``1(MugenInjection.Interface.IInjectorResolver,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInto``1(MugenInjection.Interface.IInjectorResolver,System.Object,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="key">The specified binding key. </param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.GetAllInto``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll(MugenInjection.Interface.IInjectorResolver,System.Type,System.Collections.Generic.IEnumerable{System.Object}@,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="key">The specified binding key. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll(MugenInjection.Interface.IInjectorResolver,System.Type,System.Collections.Generic.IEnumerable{System.Object}@,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll(MugenInjection.Interface.IInjectorResolver,System.Type,System.Collections.Generic.IEnumerable{System.Object}@,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Collections.Generic.IEnumerable{System.Object}@,System.Object,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="key">The specified binding key. </param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Collections.Generic.IEnumerable{System.Object}@,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="service">The specified service type.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="key">The specified binding key. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAll``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInto``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Object,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="key">The specified binding key. </param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.TryGetAllInto``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">A series of instances of the service.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Bind(MugenInjection.Interface.IInjector,System.Type[])">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="services">The specified service <see cref="T:System.Type"/>(s).</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Bind``1(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Bind``2(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified services.
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Bind``3(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified services.
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <typeparam name="T3">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Bind``4(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified services.
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <typeparam name="T3">The specified service type.</typeparam>
            <typeparam name="T4">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.BindWithManualBuild(MugenInjection.Interface.IInjector,System.Type[])">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="services">The specified service <see cref="T:System.Type"/>(s).</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.BindWithManualBuild``1(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.BindWithManualBuild``2(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified services.
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.BindWithManualBuild``3(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified services.
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <typeparam name="T3">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.BindWithManualBuild``4(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified services.
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <typeparam name="T3">The specified service type.</typeparam>
            <typeparam name="T4">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.BindTo``2(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <typeparam name="TTypeTo">Type to bind specified service. </typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.BindToWithManualBuild``2(MugenInjection.Interface.IInjector)">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <typeparam name="TTypeTo">Type to bind specified service. </typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjector,System.Type,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="key">The specified binding key. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjector,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind(MugenInjection.Interface.IInjector,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.RebindInto(MugenInjection.Interface.IInjector,System.Type,System.Object,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="key">The specified binding key. </param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.RebindInto(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjector,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="key">The specified binding key. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjector,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Rebind``1(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.RebindInto``1(MugenInjection.Interface.IInjector,System.Object,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="key">The specified binding key. </param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.RebindInto``1(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="key">The specified binding key. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.UnbindInto(MugenInjection.Interface.IInjectorBinder,System.Type,System.Object,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="key">The specified binding key. </param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.UnbindInto(MugenInjection.Interface.IInjectorBinder,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="key">The specified binding key. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unbind``1(MugenInjection.Interface.IInjectorBinder,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.UnbindInto``1(MugenInjection.Interface.IInjectorBinder,System.Object,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="key">The specified binding key. </param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.UnbindInto``1(MugenInjection.Interface.IInjectorBinder,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Unregisters all bindings with specified conditions for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters"> The specified parameters.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Object,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service. </param>
            <param name="key">The specified binding key. </param>
            <param name="specialParameters">Special parameters for resolve current service.</param>
            <param name="searchInParent">If set to <c>true</c> search in parent bindings.</param>
            <param name="includeImplicitBindings">If set to <c>false</c> implicit bindings are ignored.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service. </param>
            <param name="specialParameters">Special parameters for resolve current service.</param>
            <param name="searchInParent">If set to <c>true</c> search in parent bindings.</param>
            <param name="includeImplicitBindings">If set to <c>false</c> implicit bindings are ignored.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolveInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Object,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service. </param>
            <param name="key">The specified binding key. </param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service.</param>
            <param name="searchInParent">If set to <c>true</c> search in parent bindings.</param>
            <param name="includeImplicitBindings">If set to <c>false</c> implicit bindings are ignored.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CanResolveInto(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjectorResolver"/> </param>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service. </param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for resolve current service.</param>
            <param name="searchInParent">If set to <c>true</c> search in parent bindings.</param>
            <param name="includeImplicitBindings">If set to <c>false</c> implicit bindings are ignored.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Release(MugenInjection.Interface.IInjector,System.Type,System.Object,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="key">The specified binding key.</param>
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Release(MugenInjection.Interface.IInjector,System.Type,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Releases specified service with specified condition in scope.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.ReleaseInto(MugenInjection.Interface.IInjector,System.Type,System.Object,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="key">The specified binding key.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.ReleaseInto(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Release specified service with specified condition in scope.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="service">Service for release.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> target that will receive the injection.</param>  
            <param name="parameter">The specifeid <see cref="T:System.Reflection.ParameterInfo"/> that will receive the injection.</param>
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="needDispose">Try dispose object.</param>
            <param name="parameters">The specified parameters. </param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CreateChild(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectorModule[])">
            <summary>
            Creates a child <see cref="T:MugenInjection.Interface.IInjector"/>, by default, components are cloned from the parent.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <returns>An instacne of child <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CreateChild(MugenInjection.Interface.IInjector,System.Collections.Generic.IList{MugenInjection.Interface.Components.IComponent},MugenInjection.Interface.IInjectorModule[])">
            <summary>
            Creates a child <see cref="T:MugenInjection.Interface.IInjector"/>, by default, components are cloned from the parent.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>(s).</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <returns>An instacne of child <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CreateChild(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IInjectorModule[])">
            <summary>
            Creates a child <see cref="T:MugenInjection.Interface.IInjector"/>, by default, components are cloned from the parent.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="settings">Settings for child <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <returns>An instacne of child <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CreateChild(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,MugenInjection.Interface.IInjectorModule[])">
            <summary>
            Creates a child <see cref="T:MugenInjection.Interface.IInjector"/>, by default, components are cloned from the parent.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="settings">Settings for child <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="componentContainer">The specified <see cref="T:MugenInjection.Interface.IComponentContainer"/>. </param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <returns>An instacne of child <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.CreateChild(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,System.Boolean,MugenInjection.Interface.IInjectorModule[])">
            <summary>
            Creates a child <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/> </param>
            <param name="settings">Settings for child <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="componentContainer">The specified <see cref="T:MugenInjection.Interface.IComponentContainer"/>. </param>
            <param name="cloneComponents">Specifies whether to clone the components from the parent.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <returns>An instacne of child <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Load``1(MugenInjection.Interface.IInjector)">
            <summary>
            Creates a new instance of the module and loads it into the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>  </param>
            <typeparam name="T">The type of the module.</typeparam>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Unload``1(MugenInjection.Interface.IInjector)">
            <summary>
            Unloads the module with the specified <see cref="!:T"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>  </param>
            <typeparam name="T">The type of the module.</typeparam>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Load(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectorModule})">
            <summary>
            Loads the module(s) into the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>  </param>
            <param name="modules">The specified modules.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.LoadModules(MugenInjection.Interface.IInjector,System.Reflection.Assembly[])">
            <summary>
            Loads modules defined in the specified assemblies.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="assemblies">The assemblies to search.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Inject``1(MugenInjection.Interface.IInjector,``0@,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Injects properties, methods, fields in specified object.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="target">The specified object for inject.</param>
            <param name="parameters"> The specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.Inject``1(MugenInjection.Interface.IInjector,``0,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Injects properties, methods, fields in specified object.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="target">The specified object for inject.</param>
            <param name="parameters"> The specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.BindAsDecoratorForAll``1(MugenInjection.Interface.IInjector,System.Func{MugenInjection.Interface.IBindingContext,``0,``0})">
            <summary>
            Decorate all components implementing service <typeparamref name="TService"/> using the provided <paramref name="decorator"/> function.
            </summary>
            <typeparam name="TService">Service type being decorated.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="decorator">Function decorating a component instance.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.BindAsDecoratorFor``1(MugenInjection.Interface.IInjector,System.Action{MugenInjection.Syntax.IConditionBuilder{``0}},System.Func{MugenInjection.Interface.IBindingContext,``0,``0})">
            <summary>
            Decorate components with specified condition implementing service <typeparamref name="TService"/> using the provided <paramref name="decorator"/> function.
            </summary>
            <typeparam name="TService">Service type being decorated.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="buildCondition">The specified delegate to build condition.</param>
            <param name="decorator">Function decorating a component instance.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.UnbindAllDecoratorsFor``1(MugenInjection.Interface.IInjector)">
            <summary>
            Unregisters all decorators for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.UnbindDecoratorsFor``1(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Unregisters decorators for the specified service, with specific condition.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="parameter"> </param>
            <param name="specialParameters"> </param>
            <param name="parameters">The specified binding parameters. </param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.BindAsAdapterForAll``2(MugenInjection.Interface.IInjector,System.Func{MugenInjection.Interface.IBindingContext,``0,``1})">
            <summary>
            Adapts all components implementing service <typeparamref name="TFrom"/> to provide <typeparamref name="TTo"/> using the provided <paramref name="adapter"/> function.
            </summary>
            <typeparam name="TFrom">Service type to adapt from.</typeparam>
            <typeparam name="TTo">Service type to adapt to. Must not be the same as <typeparamref name="TFrom"/>.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="adapter">Function adapting <typeparamref name="TFrom"/> to service <typeparamref name="TTo"/>.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.BindAsAdapterFor``2(MugenInjection.Interface.IInjector,System.Action{MugenInjection.Syntax.IConditionBuilder{``1}},System.Func{MugenInjection.Interface.IBindingContext,``0,``1})">
            <summary>
            Adapts components with specified condition implementing service <typeparamref name="TFrom"/> to provide <typeparamref name="TTo"/> using the provided <paramref name="adapter"/> function.
            </summary>
            <typeparam name="TFrom">Service type to adapt from.</typeparam>
            <typeparam name="TTo">Service type to adapt to. Must not be the same as <typeparamref name="TFrom"/>.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="buildCondition">The specified delegate to build condition.</param>
            <param name="adapter">Function adapting <typeparamref name="TFrom"/> to service <typeparamref name="TTo"/>.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.UnbindAllAdaptersFor``2(MugenInjection.Interface.IInjector)">
            <summary>
            Unregisters all adapters for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtension.UnbindAdaptersFor``2(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Unregisters adapters for the specified service, with specific condition.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="parameter"> </param>
            <param name="specialParameters">The special parameters.</param>
            <param name="parameters">The specified binding parameters. </param>
        </member>
        <member name="T:MugenInjection.Infrastructure.ExpressionReflectionAccessProvider">
            <summary>
                Represents the reflection access provider which use System.Linq.Expressions to members access.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IReflectionAccessProvider">
            <summary>
                Represents the reflection access provider to members access.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IReflectionAccessProvider.GetActivatorDelegate(System.Reflection.ConstructorInfo)">
            <summary>
                Gets a delegate to create an object.
            </summary>
            <param name="constructorInfo">
                The specified <see cref="T:System.Reflection.ConstructorInfo"/>.
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Delegates.ActivatorDelegate"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Interface.IReflectionAccessProvider.GetAssignMemberDelegate``1(System.Reflection.MemberInfo)">
            <summary>
                Gets a delegate to set a value in the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>.
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Delegates.SetterDelegate`1"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Interface.IReflectionAccessProvider.GetAssignValueMemberDelegate``1(System.Reflection.MemberInfo)">
            <summary>
                Gets a delegate to set specified value in the specified <see cref="T:System.Reflection.MemberInfo"/> in a value type target, can be used with reference type.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>.
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Delegates.SetterDelegate`1"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Interface.IReflectionAccessProvider.GetGetterMemberDelegate``2(System.Reflection.MemberInfo)">
            <summary>
                Gets a delegate to get a value in the specified <see cref="T:System.Reflection.MemberInfo"/>
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <typeparam name="T">Type of the target.</typeparam>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>.
            </param>
        </member>
        <member name="M:MugenInjection.Interface.IReflectionAccessProvider.GetInvokeMethodDelegate``1(System.Reflection.MethodInfo)">
            <summary>
                Gets a delegate to call specified <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="methodInfo">
                The specified <see cref="T:System.Reflection.MethodInfo"/>
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Delegates.InvokeMethodDelegate`1"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Interface.IReflectionAccessProvider.GetInvokeMethodValueTypeDelegate``1(System.Reflection.MethodInfo)">
            <summary>
                Gets a delegate to call specified <see cref="T:System.Reflection.MethodInfo"/> in a value type target, can be used with reference type.
            </summary>
            <param name="methodInfo">
                The specified <see cref="T:System.Reflection.MethodInfo"/>
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Delegates.InvokeMethodDelegate`1"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Interface.IReflectionAccessProvider.ConvertToProxyDelegate(System.Func{System.Object[],System.Object},System.Type)">
            <summary>
                Converts the Func{object[], object} to the specified delegate type.
            </summary>
            <param name="proxyDelegate">The specified proxy method.</param>
            <param name="delegateType">The specified delegate type.</param>
            <returns>An instance of delegate type.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IReflectionAccessProvider.ConvertToWeakDelegate(System.Delegate,System.Action{System.Delegate})">
            <summary>
                Returns a weak-reference version of a delegate.
            </summary>
            <param name="originalAction">The delegate to convert to weak referencing.</param>
            <param name="unsubcribeDelegate">The unregister action to invoke if the target is garbage collected.</param>
            <returns>A weak referencing delegate.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IReflectionAccessProvider.FindWeakDelegateByOriginalDelegate(System.Delegate,System.Collections.Generic.IList{System.Delegate})">
            <summary>
            Finds the weak-delegate use a original delegate in the specified array of delegate.
            </summary>
            <param name="originalAction">The original delegate to find weak delegate.</param>
            <param name="delegates">The specified array of delegate</param>
            <returns>An instance of delegate.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ExpressionReflectionAccessProvider.GetActivatorDelegate(System.Reflection.ConstructorInfo)">
            <summary>
                Gets a delegate to create an object.
            </summary>
            <param name="constructorInfo">
                The specified <see cref="T:System.Reflection.ConstructorInfo"/>.
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Delegates.ActivatorDelegate"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ExpressionReflectionAccessProvider.GetAssignMemberDelegate``1(System.Reflection.MemberInfo)">
            <summary>
                Gets a delegate to set a value in the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>.
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Delegates.SetterDelegate`1"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ExpressionReflectionAccessProvider.GetAssignValueMemberDelegate``1(System.Reflection.MemberInfo)">
            <summary>
                Gets a delegate to set specified value in the specified <see cref="T:System.Reflection.MemberInfo"/> in a value type target, can be used with reference type.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>.
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Delegates.SetterDelegate`1"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ExpressionReflectionAccessProvider.GetGetterMemberDelegate``2(System.Reflection.MemberInfo)">
            <summary>
                Gets a delegate to get a value in the specified <see cref="T:System.Reflection.MemberInfo"/>
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <typeparam name="T">Type of the target.</typeparam>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>.
            </param>
        </member>
        <member name="M:MugenInjection.Infrastructure.ExpressionReflectionAccessProvider.GetInvokeMethodDelegate``1(System.Reflection.MethodInfo)">
            <summary>
                Gets a delegate to call specified <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="methodInfo">
                The specified <see cref="T:System.Reflection.MethodInfo"/>
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Delegates.InvokeMethodDelegate`1"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ExpressionReflectionAccessProvider.GetInvokeMethodValueTypeDelegate``1(System.Reflection.MethodInfo)">
            <summary>
                Gets a delegate to call specified <see cref="T:System.Reflection.MethodInfo"/> in a value type target, can be used with reference type.
            </summary>
            <param name="methodInfo">
                The specified <see cref="T:System.Reflection.MethodInfo"/>
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Delegates.InvokeMethodDelegate`1"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ExpressionReflectionAccessProvider.ConvertToProxyDelegate(System.Func{System.Object[],System.Object},System.Type)">
            <summary>
                Converts the Func{object[], object} to the specified delegate type.
            </summary>
            <param name="proxyDelegate">The specified proxy method.</param>
            <param name="delegateType">The specified delegate type.</param>
            <returns>An instance of delegate type.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ExpressionReflectionAccessProvider.ConvertToWeakDelegate(System.Delegate,System.Action{System.Delegate})">
            <summary>
                Returns a weak-reference version of a delegate.
            </summary>
            <param name="originalAction">The delegate to convert to weak referencing.</param>
            <param name="unsubcribeDelegate">The unregister action to invoke if the target is garbage collected.</param>
            <returns>A weak referencing delegate.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ExpressionReflectionAccessProvider.FindWeakDelegateByOriginalDelegate(System.Delegate,System.Collections.Generic.IList{System.Delegate})">
            <summary>
            Finds the weak-delegate use a original delegate in the specified array of delegate.
            </summary>
            <param name="originalAction">The original delegate to find weak delegate.</param>
            <param name="delegates">The specified array of delegate</param>
            <returns>An instance of delegate.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ExpressionReflectionAccessProvider.GetActivatorDelegate(System.Reflection.ConstructorInfo,System.Boolean)">
            <summary>
                Gets a delegate to create an object.
            </summary>
            <param name="constructorInfo">
                The specified <see cref="T:System.Reflection.ConstructorInfo"/>.
            </param>
            <param name="useCache">
                If <c>true</c> using cache;otherwise <c>false</c>.
            </param>
            <returns>
                An instance of <see cref="T:System.Func`2"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ExpressionReflectionAccessProvider.GetAssignMemberDelegate``2(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>
                Gets a delegate to set a value in the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <typeparam name="TDelegate">Type of the delegate to create.</typeparam>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>.
            </param>
            <param name="isValueType">
                If <c>true</c> is value type; otherwise <c>false</c>.
            </param>
            <param name="useCache">
                If <c>true</c> using cache;otherwise <c>false</c>.
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Delegates.SetterDelegate`1"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ExpressionReflectionAccessProvider.GetInvokeMethodDelegate``2(System.Reflection.MethodInfo,System.Boolean,System.Boolean)">
            <summary>
                Gets a delegate to call specified <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <typeparam name="TDelegate">Type of the delegate to create.</typeparam>
            <param name="methodInfo">
                The specified <see cref="T:System.Reflection.MethodInfo"/>
            </param>
            <param name="isValueType">
                If <c>true</c> is value type; otherwise <c>false</c>.
            </param>
            <param name="useCache">
                If <c>true</c> using cache;otherwise <c>false</c>.
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Delegates.InvokeMethodDelegate`1"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ExpressionReflectionAccessProvider.ConvertToWeakDelegate(MugenInjection.Infrastructure.WeakEventInfo,System.Delegate)">
            <summary>
                Returns a weak-reference version of a delegate.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ExpressionReflectionAccessProvider.ConvertToProxyDelegate(System.Type,System.Func{System.Object[],System.Object})">
            <summary>
                Converts the Func{object[], object} to the specified delegate type.
            </summary>
            <param name="delegateType">The specified delegate type.</param>
            <param name="proxyDelegate">The specified proxy method.</param>
            <returns>An instance of delegate type.</returns>
        </member>
        <member name="P:MugenInjection.Infrastructure.ExpressionReflectionAccessProvider.UseEmitToConvertDelegate">
            <summary>
            Gets or sets value that indicates how provider will create ProxyDelegate, if <c>true</c> - use emit generation; otherwise <c>false</c>
            </summary>
        </member>
        <member name="T:MugenInjection.Activators.EmitActivator">
            <summary>
            Represents the activator that use emit to activate object.
            </summary>
        </member>
        <member name="M:MugenInjection.Activators.EmitActivator.Activate(System.Reflection.ConstructorInfo)">
            <summary>
                Creates a new instance of the specified service.
            </summary>
            <param name="constructorInfo">
                The specified <see cref="T:System.Reflection.ConstructorInfo"/>.
            </param>
        </member>
        <member name="M:MugenInjection.Activators.EmitActivator.Inject``1(System.Type,``0@)">
            <summary>
                Injects values into properties, fields, methods in the specified object.
            </summary>
            <param name="targetType">
                The specified target <see cref="T:System.Type"/>.
            </param>
            <param name="target">The specified target for inject.</param>
        </member>
        <member name="M:MugenInjection.Activators.EmitActivator.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="T:MugenInjection.Activators.ReflectionActivator">
            <summary>
            Represents the activator that use reflection to activate object.
            </summary>
        </member>
        <member name="M:MugenInjection.Activators.ReflectionActivator.Activate(System.Reflection.ConstructorInfo)">
            <summary>
                Creates a new instance of the specified service.
            </summary>
            <param name="constructorInfo">
                The specified <see cref="T:System.Reflection.ConstructorInfo"/>.
            </param>
        </member>
        <member name="M:MugenInjection.Activators.ReflectionActivator.Inject``1(System.Type,``0@)">
            <summary>
                Injects values into properties, fields, methods in the specified object.
            </summary>
            <param name="targetType">
                The specified target <see cref="T:System.Type"/>.
            </param>
            <param name="target">The specified target for inject.</param>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one of the parameters of the caller function.
            For example, <see cref="T:System.ArgumentNullException"/> has such parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:MugenInjection.Attributes.AutoLoadModuleAttribute">
            <summary>
            Represents the attribute which use to automatically load the <see cref="T:MugenInjection.Core.InjectorModule"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Attributes.AutoLoadModuleRequiredAttribute">
            <summary>
            Represents the attribute which use to required automatically load the <see cref="T:MugenInjection.Core.InjectorModule"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Attributes.InjectAttribute">
            <summary>
            Attribute that indicates where need inject specified service.
            </summary>
        </member>
        <member name="T:MugenInjection.Attributes.NamedParameterAttribute">
            <summary>
                Attribute that indicates where need inject specified service with specified binding name.
            </summary>
        </member>
        <member name="T:MugenInjection.Attributes.ResolverAttribute">
            <summary>
            Represents the base class for resolve attributes.
            </summary>
        </member>
        <member name="M:MugenInjection.Attributes.ResolverAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Attributes.ResolverAttribute"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Attributes.ResolverAttribute.CanResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Attributes.ResolverAttribute.Resolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Attributes.NamedParameterAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Attributes.NamedParameterAttribute"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Attributes.NamedParameterAttribute.CanResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
                Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext">
                The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </param>
            <returns>
                <c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MugenInjection.Attributes.NamedParameterAttribute.Resolve(MugenInjection.Interface.IBindingContext)">
            <summary>
                Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">
                The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="P:MugenInjection.Attributes.NamedParameterAttribute.Name">
            <summary>
                Gets or sets the binding name.
            </summary>
        </member>
        <member name="T:MugenInjection.Attributes.OptionalParameterAttribute">
            <summary>
            Attribute that indicates where need inject specified service if service can't resolve using default value.
            </summary>
        </member>
        <member name="M:MugenInjection.Attributes.OptionalParameterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Attributes.OptionalParameterAttribute"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Attributes.OptionalParameterAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Attributes.OptionalParameterAttribute"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Attributes.OptionalParameterAttribute.CanResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Attributes.OptionalParameterAttribute.Resolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="P:MugenInjection.Attributes.OptionalParameterAttribute.Value">
            <summary>
            Gets or sets the default value.
            </summary>
        </member>
        <member name="T:MugenInjection.Bindings.BindingBase">
            <summary>
            Represents the base class for binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IBinding">
            <summary>
            Represents the interface that contains information about a service registration.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IBinding.CanResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IBinding.Resolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.ActivatingActions">
            <summary>
            Gets the actions that should be called before instances are activated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.ActivatedActions">
            <summary>
            Gets the actions that should be called after instances are activated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.DeactivatedActions">
            <summary>
            Gets the actions that should be called before binding are deactivated.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.ScopeLifecycle">
            <summary>
            Gets the lifecycle scope.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.Priority">
            <summary>
            Gets the priority.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.Parameters">
            <summary>
            Gets the parameters.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.Services">
            <summary>
            Gets the service types.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBinding.Settings">
            <summary>
            Gets the settings.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.#ctor(System.Collections.Generic.IList{System.Type},MugenInjection.Interface.IScopeLifecycle,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Bindings.BindingBase"/> class.
            </summary>
            <param name="services">The specified services type.</param>
            <param name="scopeLifecycle">The specified <see cref="T:MugenInjection.Interface.IScopeLifecycle"/>.</param>
            <param name="parameters">The specified parameters.</param>
            <param name="canResolve">The specified condition for can resolve.</param>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.CanResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.Resolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.BeginDetectCycle(MugenInjection.Interface.IBindingContext,System.Object@)">
            <summary>
            Begins detect a cycle dependency.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.MergeParameter(MugenInjection.Interface.IBindingContext)">
            <summary>
            Merges parameters with the current bindings parameters.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/> to update parameters.</param>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.IsAssignableService(System.Type)">
            <summary>
            Determines whether the specified type is assignable for current binding.
            </summary>
            <param name="checkType">The specified <see cref="T:System.Type"/> to check.</param>
            <returns><c>True</c> if the specified type is assignable; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.ResolveServiceInternal(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.ResolveService(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.OnActivating(MugenInjection.Interface.IBindingContext)">
            <summary>
            On activating the <see cref="T:MugenInjection.Bindings.BindingBase"/>.
            </summary>
            <param name="bindingContext"></param>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.OnActivated(MugenInjection.Interface.IBindingContext,System.Object@)">
            <summary>
            On activated the <see cref="T:MugenInjection.Bindings.BindingBase"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.OnDisposed">
            <summary>
            On disposed the <see cref="T:MugenInjection.Bindings.BindingBase"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.Equals(MugenInjection.Bindings.BindingBase)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Bindings.BindingBase.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.Condition">
            <summary>
            Gets the condition for the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.TryDisposeObject">
            <summary>
            Gets the flag that indicates that binding will try to dispose object when dispose binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.ActivatingActions">
            <summary>
            Gets the actions that should be called before instances are activated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.ActivatedActions">
            <summary>
            Gets the actions that should be called after instances are activated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.DeactivatedActions">
            <summary>
            Gets the actions that should be called before instances are deactivated via the binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.ScopeLifecycle">
            <summary>
            Gets the lifecycle scope for binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.Priority">
            <summary>
            Gets the priority.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.Settings">
            <summary>
            Gets the settings.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.Parameters">
            <summary>
            Gets the parameters.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.BindingBase.Services">
            <summary>
            Gets the service types.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.IBindingSyntax">
            <summary>
            Specific fluent syntax for create binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.ICommonBindingSyntax">
            <summary>
            Specific fluent syntax for create binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IBindingBuilder">
            <summary>
              Represenst the interface that contains information about creating bindings.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IBindingBuilder.Build">
            <summary>
                Builds the current <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
            <returns>
                The builded <see cref="T:MugenInjection.Interface.IBinding"/>.
            </returns>
        </member>
        <member name="P:MugenInjection.Interface.IBindingBuilder.Injector">
            <summary>
                Gets the <see cref="T:MugenInjection.Interface.IInjector"/> that owns the <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingBuilder.Services">
            <summary>
                Gets the specified service types.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingBuilder.Settings">
            <summary>
                Gets the settings.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingBuilder.IsConfiguring">
            <summary>
                Indicates that the binding builder is configuring.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IBindingBuilder.Building">
            <summary>
                Occurs before build the current IBindingBuilder.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IBindingBuilder.Builded">
            <summary>
                Occurs after build current IBindingBuilder.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.ICommonBindingSyntax.To(System.Type)">
            <summary>
            Indicates that the service should be bound to the specified types.
            </summary>
            <param name="typeTo">The specified <see cref="T:System.Type"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Syntax.ICommonBindingSyntax.ToCustomBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Indicates that the service should be bound to the specified custom binding.
            </summary>
            <param name="customBinding">The specified <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IBindingSyntax.ToSelf">
            <summary>
            Indicates that the service should be self-bound.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IBindingSyntax.ToMethod(MugenInjection.Delegates.MethodBindingDelegate)">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IBindingSyntax.ToConstant(System.Object)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.IGenericBindingSyntax`1">
            <summary>
            Specific fluent syntax for create binding.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`1.ToSelf">
            <summary>
            Indicates that the service should be self-bound.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`1.To``1">
            <summary>
            Indicates that the service should be bound to the specified type <see cref="!:T"/>.
            </summary>
            <typeparam name="TTypeTo">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`1.ToMethod``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <typeparam name="TTypeTo">The specified <see cref="T:System.Type"/>.</typeparam>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`1.ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`1.To``1(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Adds a constructor argument for the specified argument expression.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.IGenericBindingSyntax`2">
            <summary>
            Specific fluent syntax for create binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`2.To``1">
            <summary>
            Indicates that the service should be bound to the specified types.
            </summary>
            <typeparam name="TTypeTo">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`2.ToMethod``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <typeparam name="TTypeTo"></typeparam>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`2.ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`2.To``1(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Adds a constructor argument for the specified argument expression.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.IGenericBindingSyntax`3">
            <summary>
            Specific fluent syntax for create binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`3.To``1">
            <summary>
            Indicates that the service should be bound to the specified types.
            </summary>
            <typeparam name="TTypeTo">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`3.ToMethod``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <typeparam name="TTypeTo"></typeparam>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`3.ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`3.To``1(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Adds a constructor argument for the specified argument expression.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.IGenericBindingSyntax`4">
            <summary>
            Specific fluent syntax for create binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`4.To``1">
            <summary>
            Indicates that the service should be bound to the specified types.
            </summary>
            <typeparam name="TTypeTo">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`4.ToMethod``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <typeparam name="TTypeTo"></typeparam>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`4.ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IGenericBindingSyntax`4.To``1(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Adds a constructor argument for the specified argument expression.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Constant.IConstantCallbackObjectPriorityWhenSyntax`1">
            <summary>
            Specific fluent syntax for constant binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Constant.IConstantObjectSyntax`1">
            <summary>
            Specific fluent syntax for constant binding.
            </summary>
            <typeparam name="T">The service type.</typeparam>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantObjectSyntax`1.TryDisposeObjects">
            <summary>
            Sets the value that indicates that binding will try to dispose the object on dispose binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantObjectSyntax`1.NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantObjectSyntax`1.KeyedBinding(System.Object)">
            <summary>
            Indicates that the binding should be registered with the specified key. Keys are not
            necessarily unique; multiple bindings for a given service may be registered with the same key.
            </summary>
            <param name="key">The key to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantObjectSyntax`1.WithSetting(System.String,System.Object)">
            <summary>
            Sets the specified setting for build binding.
            </summary>
            <param name="key">Setting name.</param>
            <param name="value">Setting value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Constant.IConstantPrioritySyntax`1">
            <summary>
            Specific fluent syntax for constant binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax`1.SetPriority(MugenInjection.Infrastructure.BindingPriority)">
            <summary>
            Sets the priority for binding.
            </summary>
            <param name="priority">The specified <see cref="T:MugenInjection.Infrastructure.BindingPriority"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax`1.SetStandardPriority">
            <summary>
            Set a standard priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax`1.SetLowPriority">
            <summary>
            Sets a low priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax`1.SetNormalPriority">
            <summary>
            Sets a normal priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax`1.SetHighPriority">
            <summary>
            Sets a high priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Constant.IConstantWhenSyntax`1">
            <summary>
            Specific fluent syntax for constant binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax`1.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.CanResolveBindingDelegate"/></param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax`1.WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax`1.WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax`1.WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax`1.WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax`1.WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name">The name of namespace.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax`1.WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax`1.WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Constant.IConstantCallbackObjectPrioritySyntax`1">
            <summary>
            Specific fluent syntax for constant binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Constant.IConstantObjectPriorityWhenSyntax">
            <summary>
            Specific fluent syntax for constant binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Constant.IConstantObjectSyntax">
            <summary>
            Specific fluent syntax for constant binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantObjectSyntax.TryDisposeObjects">
            <summary>
            Sets the value that indicates that binding will try to dispose the object on dispose binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantObjectSyntax.NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantObjectSyntax.KeyedBinding(System.Object)">
            <summary>
            Indicates that the binding should be registered with the specified key. Keys are not
            necessarily unique; multiple bindings for a given service may be registered with the same key.
            </summary>
            <param name="key">The key to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantObjectSyntax.WithSetting(System.String,System.Object)">
            <summary>
            Sets the specified setting for build binding.
            </summary>
            <param name="key">Setting name.</param>
            <param name="value">Setting value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Constant.IConstantPrioritySyntax">
            <summary>
            Specific fluent syntax for constant binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax.SetPriority(MugenInjection.Infrastructure.BindingPriority)">
            <summary>
            Sets the priority for binding.
            </summary>
            <param name="priority">The specified <see cref="T:MugenInjection.Infrastructure.BindingPriority"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax.SetStandardPriority">
            <summary>
            Sets a standard priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax.SetLowPriority">
            <summary>
            Sets a low priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax.SetNormalPriority">
            <summary>
            Sets a normal priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantPrioritySyntax.SetHighPriority">
            <summary>
            Sets a high priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Constant.IConstantWhenSyntax">
            <summary>
            Specific fluent syntax for constant binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.CanResolveBindingDelegate"/></param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name">The name of namespace.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Constant.IConstantWhenSyntax.WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="T">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Constant.IConstantObjectPrioritySyntax">
            <summary>
            Specific fluent syntax for constant binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodCallbackObjectUseWithSyntax`1">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodCallbackSyntax`1">
            <summary>
                Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodCallbackSyntax`1.OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
                Indicates that the binding should executes callback method before binding activated.
            </summary>
            <param name="onActivating">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodCallbackSyntax`1.OnActivated(System.Action{`0})">
            <summary>
                Indicates that the binding should executes callback method after binding activated.
            </summary>
            <param name="onActivated">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodCallbackSyntax`1.OnActivated(MugenInjection.Delegates.BindingActivatedDelegate{`0})">
            <summary>
                Indicates that the binding should executes callback method after binding activated.
            </summary>
            <param name="onActivated">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodCallbackSyntax`1.OnReleaseObject(System.Action{`0,System.Boolean})">
            <summary>
                Indicates that the binding should executes the callback that should be called before instances will be released.
            </summary>
            <param name="onReleaseObject">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodCallbackSyntax`1.OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
                Indicates that the binding should executes callback method after binding disposed.
            </summary>
            <param name="onDisposed">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodObjectSyntax`1">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
            <typeparam name="T">The service type.</typeparam>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodObjectSyntax`1.TryDisposeObjects">
            <summary>
            Sets the value that indicates that binding will try to dispose the object on dispose binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodObjectSyntax`1.NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodObjectSyntax`1.KeyedBinding(System.Object)">
            <summary>
            Indicates that the binding should be registered with the specified key. Keys are not
            necessarily unique; multiple bindings for a given service may be registered with the same key.
            </summary>
            <param name="key">The key to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodObjectSyntax`1.WithSetting(System.String,System.Object)">
            <summary>
            Sets the specified setting for build binding.
            </summary>
            <param name="key">Setting name.</param>
            <param name="value">Setting value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodWithSyntax`1">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax`1.WithConstructorArguments(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,`0}})">
            <summary>
            Indicates that the service should be use specified method arguments.
            </summary>
            <param name="constructorCall">The specified new instance expression.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax`1.WithPropertyValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Indicates that the service should be use specified property argument.
            </summary>
            <param name="property">The property access expression.</param>
            <param name="value">The specified property value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax`1.WithMethodArguments(System.Linq.Expressions.Expression{System.Action{MugenInjection.Infrastructure.ResolveContext,`0}})">
            <summary>
            Indicates that the service should be use specified method arguments.
            </summary>
            <param name="methodCall">The specified method call expression.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax`1.WithParameter(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Indicates that the service should be use specified custom argument.
            </summary>
            <param name="parameter">The specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodUseSyntax`1">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodUseSyntax`1.UseReflectionActivator">
            <summary>
            Indicates that the service should be use reflection activator for activate instance.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodUseSyntax`1.UseEmitActivator">
            <summary>
            Indicates that the service should be use emit activator for activate instance.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodUseSyntax`1.UseExpressionActivator">
            <summary>
            Indicates that the service should be use expression activator for activate instance.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodUseSyntax`1.UseCustomActivator(MugenInjection.Interface.IActivator)">
            <summary>
            Indicates that the service should be use custom activator for activate instance.
            </summary>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodUseSyntax`1.UseCustomActivator(System.Func{MugenInjection.Interface.IActivator})">
            <summary>
            Indicates that the service should be use custom activator for activate instance.
            </summary>
            <param name="methodActivator">The specified <see cref="T:System.Func`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodCallbackObjectUseWithSyntax">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodCallbackSyntax">
            <summary>
                Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodCallbackSyntax.OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
                Indicates that the binding should executes callback method before binding activated.
            </summary>
            <param name="onActivating">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodCallbackSyntax.OnActivated(System.Action{System.Object})">
            <summary>
                Indicates that the binding should executes callback method after binding activated.
            </summary>
            <param name="onActivated">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodCallbackSyntax.OnActivated(MugenInjection.Delegates.BindingActivatedDelegate{System.Object})">
            <summary>
                Indicates that the binding should executes callback method after binding activated.
            </summary>
            <param name="onActivated">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodCallbackSyntax.OnReleaseObject(System.Action{System.Object,System.Boolean})">
            <summary>
                Indicates that the binding should executes the callback that should be called before instances will be released.
            </summary>
            <param name="onReleaseObject">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodCallbackSyntax.OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
                Indicates that the binding should executes callback method after binding disposed.
            </summary>
            <param name="onDisposed">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodObjectSyntax">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodObjectSyntax.TryDisposeObjects">
            <summary>
            Sets the value that indicates that binding will try to dispose the object on dispose binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodObjectSyntax.NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodObjectSyntax.KeyedBinding(System.Object)">
            <summary>
            Indicates that the binding should be registered with the specified key. Keys are not
            necessarily unique; multiple bindings for a given service may be registered with the same key.
            </summary>
            <param name="key">The key to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodObjectSyntax.WithSetting(System.String,System.Object)">
            <summary>
            Sets the specified setting for build binding.
            </summary>
            <param name="key">Setting name.</param>
            <param name="value">Setting value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodWithSyntax">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithConstructorArgument(System.String,System.Object)">
            <summary>
            Indicates that the service should be use specified constructor argument.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithConstructorArgument(System.String,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Indicates that the service should be use specified constructor argument.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithMethodArgument(System.String,System.String,System.Object)">
            <summary>
            Indicates that the service should be use specified method argument.
            </summary>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithMethodArgument(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Indicates that the service should be use specified method argument.
            </summary>
            <param name="methodName"></param>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithPropertyValue(System.String,System.Object)">
            <summary>
            Indicates that the service should be use specified property argument.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="value">The specified property value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithPropertyValue(System.String,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Indicates that the service should be use specified property argument.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWithSyntax.WithParameter(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Indicates that the service should be use specified custom argument.
            </summary>
            <param name="parameter">The specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodUseSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodUseSyntax.UseReflectionActivator">
            <summary>
            Indicates that the service should be use reflection activator for activate instance.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodUseSyntax.UseEmitActivator">
            <summary>
            Indicates that the service should be use emit activator for activate instance.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodUseSyntax.UseExpressionActivator">
            <summary>
            Indicates that the service should be use expression activator for activate instance.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodUseSyntax.UseCustomActivator(MugenInjection.Interface.IActivator)">
            <summary>
            Indicates that the service should be use custom activator for activate instance.
            </summary>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodUseSyntax.UseCustomActivator(System.Func{MugenInjection.Interface.IActivator})">
            <summary>
            Indicates that the service should be use custom activator for activate instance.
            </summary>
            <param name="methodActivator">The specified <see cref="T:System.Func`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodCallbackObjectPriorityUseWithSyntax`1">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodPrioritySyntax`1">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax`1.SetPriority(MugenInjection.Infrastructure.BindingPriority)">
            <summary>
            Sets the priority for binding.
            </summary>
            <param name="priority">The specified <see cref="T:MugenInjection.Infrastructure.BindingPriority"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax`1.SetStandardPriority">
            <summary>
            Sets a standard priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax`1.SetLowPriority">
            <summary>
            Sets a low priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax`1.SetNormalPriority">
            <summary>
            Sets a normal priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax`1.SetHighPriority">
            <summary>
            Sets a high priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodCallbackObjectPriorityUseWithSyntax">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodPrioritySyntax">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax.SetPriority(MugenInjection.Infrastructure.BindingPriority)">
            <summary>
             Sets the priority for binding.
            </summary>
            <param name="priority">The specified <see cref="T:MugenInjection.Infrastructure.BindingPriority"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax.SetStandardPriority">
            <summary>
            Sets a standard priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax.SetLowPriority">
            <summary>
            Sets a low priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax.SetNormalPriority">
            <summary>
            Sets a normal priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodPrioritySyntax.SetHighPriority">
            <summary>
            Sets a high priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodCallbackObjectPriorityScopeUseWithSyntax`1">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodScopeSyntax`1">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax`1.InScope(MugenInjection.Delegates.CustomScopeDelegate)">
            <summary>
             Indicates that instances activated via the custom lifecycle managment.
            </summary>
            <param name="customScopeDelegate">The specified <see cref="T:MugenInjection.Delegates.CustomScopeDelegate"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax`1.InScope(MugenInjection.Interface.IScopeLifecycle)">
            <summary>
             Indicates that instances activated via the specified lifecycle
            </summary>
            <param name="scopeLifecycle">The specified <see cref="T:MugenInjection.Interface.IScopeLifecycle"/>. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax`1.InSingletonScope">
            <summary>
            Indicates that only a single instance of the binding should be created, and then
            should be re-used for all subsequent requests.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax`1.InThreadScope">
            <summary>
            Indicates that instances activated via the binding should be re-used within the same thread.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax`1.InTransientScope">
            <summary>
            Indicates that instances activated via the binding should not be re-used, nor have their lifecycle managed.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax`1.InUnitOfWorkScope">
             <summary>
            Indicates that only a single instance of the binding should be created in each <see cref="T:MugenInjection.Interface.IInjector"/>, and then
             should be re-used for all subsequent requests. 
             </summary>
             <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax`1.InManagedScope">
            <summary>
             Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax`1.InWeakReferenceScope">
            <summary>
            Indicates that instances activated via the binding should be re-used as weak reference.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodCallbackObjectPriorityScopeUseWithSyntax">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodScopeSyntax">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InScope(MugenInjection.Delegates.CustomScopeDelegate)">
            <summary>
             Indicates that instances activated via the custom lifecycle managment.
            </summary>
            <param name="customScopeDelegate">The specified <see cref="T:MugenInjection.Delegates.CustomScopeDelegate"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InScope(MugenInjection.Interface.IScopeLifecycle)">
            <summary>
             Indicates that instances activated via the specified lifecycle
            </summary>
            <param name="scopeLifecycle">The specified <see cref="T:MugenInjection.Interface.IScopeLifecycle"/>. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InSingletonScope">
            <summary>
            Indicates that only a single instance of the binding should be created, and then
            should be re-used for all subsequent requests.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InThreadScope">
            <summary>
            Indicates that instances activated via the binding should be re-used within the same thread.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InTransientScope">
            <summary>
            Indicates that instances activated via the binding should not be re-used, nor have their lifecycle managed.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InUnitOfWorkScope">
             <summary>
            Indicates that only a single instance of the binding should be created in each <see cref="T:MugenInjection.Interface.IInjector"/>, and then
             should be re-used for all subsequent requests. 
             </summary>
             <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InManagedScope">
            <summary>
             Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodScopeSyntax.InWeakReferenceScope">
            <summary>
            Indicates that instances activated via the binding should be re-used as weak reference.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodCallbackObjectPriorityScopeUseWhenWithSyntax`1">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodWhenSyntax`1">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax`1.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.CanResolveBindingDelegate"/></param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax`1.WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax`1.WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax`1.WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax`1.WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax`1.WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name">The name of namespace.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax`1.WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax`1.WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodCallbackObjectPriorityScopeUseWhenWithSyntax">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Method.IMethodWhenSyntax">
            <summary>
            Specific fluent syntax for method binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.CanResolveBindingDelegate"/></param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name">The name of namespace.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Method.IMethodWhenSyntax.WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="T">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeCallbackConstructorObjectPriorityScopeUseWhenWithSyntax`1">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeCallbackSyntax`1">
            <summary>
                Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeCallbackSyntax`1.OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
                Indicates that the binding should executes callback method before binding activated.
            </summary>
            <param name="onActivating">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeCallbackSyntax`1.OnActivated(System.Action{`0})">
            <summary>
                Indicates that the binding should executes callback method after binding activated.
            </summary>
            <param name="onActivated">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeCallbackSyntax`1.OnActivated(MugenInjection.Delegates.BindingActivatedDelegate{`0})">
            <summary>
                Indicates that the binding should executes callback method after binding activated.
            </summary>
            <param name="onActivated">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeCallbackSyntax`1.OnReleaseObject(System.Action{`0,System.Boolean})">
            <summary>
                Indicates that the binding should executes callback that should be called before instances will be released.
            </summary>
            <param name="onReleaseObject">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeCallbackSyntax`1.OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
                Indicates that the binding should executes callback method after binding disposed.
            </summary>
            <param name="onDisposed">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeConstructorSyntax`1">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax`1.TakeConstructor(System.Type[])">
            <summary>
            Indicates that the service should be bound to the specified constructor.
            </summary>
            <param name="types">The specified parameters for search constructor.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax`1.TakeConstructor(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,`0}})">
            <summary>
            Indicates that the service should be bound to the specified constructor
            </summary>
            <param name="constructor">The constructor expression.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeObjectSyntax`1">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeObjectSyntax`1.TryDisposeObjects">
            <summary>
            Sets the value that indicates that binding will try to dispose the object on dispose binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeObjectSyntax`1.NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeObjectSyntax`1.KeyedBinding(System.Object)">
            <summary>
            Indicates that the binding should be registered with the specified key. Keys are not
            necessarily unique; multiple bindings for a given service may be registered with the same key.
            </summary>
            <param name="key">The key to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeObjectSyntax`1.WithSetting(System.String,System.Object)">
            <summary>
            Sets the specified setting for build binding.
            </summary>
            <param name="key">Setting name.</param>
            <param name="value">Setting value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypePrioritySyntax`1">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax`1.SetPriority(MugenInjection.Infrastructure.BindingPriority)">
            <summary>
            Sets the priority for binding.
            </summary>
            <param name="priority">The specified <see cref="T:MugenInjection.Infrastructure.BindingPriority"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax`1.SetStandardPriority">
            <summary>
            Sets a standard priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax`1.SetLowPriority">
            <summary>
            Sets a low priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax`1.SetNormalPriority">
            <summary>
            Sets a normal priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax`1.SetHighPriority">
            <summary>
            Sets a high priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeScopeSyntax`1">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax`1.InScope(MugenInjection.Delegates.CustomScopeDelegate)">
            <summary>
             Indicates that instances activated via the custom lifecycle managment.
            </summary>
            <param name="customScopeDelegate">The specified <see cref="T:MugenInjection.Delegates.CustomScopeDelegate"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax`1.InScope(MugenInjection.Interface.IScopeLifecycle)">
            <summary>
             Indicates that instances activated via the specified lifecycle
            </summary>
            <param name="scopeLifecycle">The specified <see cref="T:MugenInjection.Interface.IScopeLifecycle"/>. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax`1.InSingletonScope">
            <summary>
            Indicates that only a single instance of the binding should be created, and then
            should be re-used for all subsequent requests.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax`1.InThreadScope">
            <summary>
            Indicates that instances activated via the binding should be re-used within the same thread.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax`1.InTransientScope">
            <summary>
            Indicates that instances activated via the binding should not be re-used, nor have their lifecycle managed.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax`1.InUnitOfWorkScope">
            <summary>
            Indicates that only a single instance of the binding should be created in each <see cref="T:MugenInjection.Interface.IInjector"/>, and then
            should be re-used for all subsequent requests. 
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax`1.InManagedScope">
            <summary>
             Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax`1.InWeakReferenceScope">
            <summary>
            Indicates that instances activated via the binding should be re-used as weak reference.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeUseSyntax`1">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax`1.UseReflectionActivator">
            <summary>
            Indicates that the service should be use reflection activator for create new instance of object.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax`1.UseEmitActivator">
            <summary>
            Indicates that the service should be use emit activator for create new instance of object.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax`1.UseExpressionActivator">
            <summary>
            Indicates that the service should be use expression activator for create new instance of object.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax`1.UseCustomActivator(MugenInjection.Interface.IActivator)">
            <summary>
            Indicates that the service should be use custom activator for create new instance of object.
            </summary>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax`1.UseCustomActivator(System.Func{MugenInjection.Interface.IActivator})">
            <summary>
            Indicates that the service should be use custom activator for create new instance of object.
            </summary>
            <param name="methodActivator">The specified <see cref="T:System.Func`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax`1.UseCustomConstructorResolver(MugenInjection.Interface.IConstructorResolver)">
            <summary>
            Indicates that the service should be use custom constructor resolver for select constructor for specified service.
            </summary>
            <param name="constructorResolver">The specified <see cref="T:MugenInjection.Interface.IConstructorResolver"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax`1.UseCustomConstructorResolver(System.Func{MugenInjection.Interface.IConstructorResolver})">
            <summary>
            Indicates that the service should be use custom constructor resolver for select constructor for specified service.
            </summary>
            <param name="constructorResolver">The specified <see cref="T:System.Func`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeWhenSyntax`1">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax`1.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.CanResolveBindingDelegate"/></param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax`1.WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax`1.WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax`1.WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax`1.WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax`1.WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name">The name of namespace.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax`1.WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax`1.WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeWithSyntax`1">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax`1.WithConstructorArguments(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,`0}})">
            <summary>
            Indicates that the service should be use specified method arguments.
            </summary>
            <param name="constructorCall">The specified new instance expression.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax`1.WithPropertyValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Indicates that the service should be use specified property argument.
            </summary>
            <param name="property">The property access expression.</param>
            <param name="value">The specified property value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax`1.WithMethodArguments(System.Linq.Expressions.Expression{System.Action{MugenInjection.Infrastructure.ResolveContext,`0}})">
            <summary>
            Indicates that the service should be use specified method arguments.
            </summary>
            <param name="methodCall">The specified method call expression.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax`1.WithParameter(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Indicates that the service should be use specified custom argument.
            </summary>
            <param name="parameter">The specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeCallbackConstructorObjectPriorityScopeUseWhenWithSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeCallbackSyntax">
            <summary>
                Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeCallbackSyntax.OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
              Indicates that the binding should executes callback method before binding activated.
            </summary>
            <param name="onActivating">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeCallbackSyntax.OnActivated(System.Action{System.Object})">
            <summary>
                Indicates that the binding should executes callback method after binding activated.
            </summary>
            <param name="onActivated">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeCallbackSyntax.OnActivated(MugenInjection.Delegates.BindingActivatedDelegate{System.Object})">
            <summary>
                Indicates that the binding should executes callback method after binding activated.
            </summary>
            <param name="onActivated">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeCallbackSyntax.OnReleaseObject(System.Action{System.Object,System.Boolean})">
            <summary>
                Indicates that the binding should executes callback that should be called before instances will be released.
            </summary>
            <param name="onReleaseObject">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeCallbackSyntax.OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
                Indicates that the binding should executes callback method after binding disposed.
            </summary>
            <param name="onDisposed">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeConstructorSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor(System.Type[])">
            <summary>
            Indicates that the service should be bound to the specified constructor.
            </summary>
            <param name="types">The specified parameters for search constructor.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor``1">
            <summary>
            Indicates that the service should be bound to the specified constructor.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor``2">
            <summary>
            Indicates that the service should be bound to the specified constructor.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor``3">
            <summary>
            Indicates that the service should be bound to the specified constructor.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor``4">
            <summary>
            Indicates that the service should be bound to the specified constructor.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeConstructorSyntax.TakeConstructor``5">
            <summary>
            Indicates that the service should be bound to the specified constructor.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeObjectSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeObjectSyntax.TryDisposeObjects">
            <summary>
            Sets the value that indicates that binding will try to dispose the object on dispose binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeObjectSyntax.NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeObjectSyntax.KeyedBinding(System.Object)">
            <summary>
            Indicates that the binding should be registered with the specified key. Keys are not
            necessarily unique; multiple bindings for a given service may be registered with the same key.
            </summary>
            <param name="key">The key to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeObjectSyntax.WithSetting(System.String,System.Object)">
            <summary>
            Sets the specified setting for build binding.
            </summary>
            <param name="key">Setting name.</param>
            <param name="value">Setting value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypePrioritySyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax.SetPriority(MugenInjection.Infrastructure.BindingPriority)">
            <summary>
            Sets the priority for binding.
            </summary>
            <param name="priority">The specified <see cref="T:MugenInjection.Infrastructure.BindingPriority"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax.SetStandardPriority">
            <summary>
            Sets standard priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax.SetLowPriority">
            <summary>
            Sets low priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax.SetNormalPriority">
            <summary>
            Sets normal priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypePrioritySyntax.SetHighPriority">
            <summary>
            Sets high priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeScopeSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InScope(MugenInjection.Delegates.CustomScopeDelegate)">
            <summary>
             Indicates that instances activated via the custom lifecycle managment.
            </summary>
            <param name="customScopeDelegate">The specified <see cref="T:MugenInjection.Delegates.CustomScopeDelegate"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InScope(MugenInjection.Interface.IScopeLifecycle)">
            <summary>
             Indicates that instances activated via the specified lifecycle
            </summary>
            <param name="scopeLifecycle">The specified <see cref="T:MugenInjection.Interface.IScopeLifecycle"/>. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InSingletonScope">
            <summary>
            Indicates that only a single instance of the binding should be created, and then
            should be re-used for all subsequent requests.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InThreadScope">
            <summary>
            Indicates that instances activated via the binding should be re-used within the same thread.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InTransientScope">
            <summary>
            Indicates that instances activated via the binding should not be re-used, nor have their lifecycle managed.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InUnitOfWorkScope">
            <summary>
            Indicates that only a single instance of the binding should be created in each <see cref="T:MugenInjection.Interface.IInjector"/>, and then
            should be re-used for all subsequent requests. 
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InManagedScope">
            <summary>
             Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeScopeSyntax.InWeakReferenceScope">
            <summary>
            Indicates that instances activated via the binding should be re-used as weak reference.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeUseSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseReflectionActivator">
            <summary>
            Indicates that the service should be use reflection activator for create new instance of object.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseEmitActivator">
            <summary>
            Indicates that the service should be use emit activator for create new instance of object.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseExpressionActivator">
            <summary>
            Indicates that the service should be use expression activator for create new instance of object.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseCustomActivator(MugenInjection.Interface.IActivator)">
            <summary>
            Indicates that the service should be use custom activator for create new instance of object.
            </summary>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseCustomActivator(System.Func{MugenInjection.Interface.IActivator})">
            <summary>
            Indicates that the service should be use custom activator for create new instance of object.
            </summary>
            <param name="methodActivator">The specified <see cref="T:System.Func`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseCustomConstructorResolver(MugenInjection.Interface.IConstructorResolver)">
            <summary>
            Indicates that the service should be use custom constructor resolver for select constructor for specified service.
            </summary>
            <param name="constructorResolver">The specified <see cref="T:MugenInjection.Interface.IConstructorResolver"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeUseSyntax.UseCustomConstructorResolver(System.Func{MugenInjection.Interface.IConstructorResolver})">
            <summary>
            Indicates that the service should be use custom constructor resolver for select constructor for specified service.
            </summary>
            <param name="constructorResolver">The specified <see cref="T:System.Func`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeWhenSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.CanResolveBindingDelegate"/></param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name">The name of namespace.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWhenSyntax.WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="T">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeWithSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithConstructorArgument(System.String,System.Object)">
            <summary>
            Indicates that the service should be use specified constructor argument.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithConstructorArgument(System.String,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Indicates that the service should be use specified constructor argument.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithMethodArgument(System.String,System.String,System.Object)">
            <summary>
            Indicates that the service should be use specified method argument.
            </summary>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithMethodArgument(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Indicates that the service should be use specified method argument.
            </summary>
            <param name="methodName"></param>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithPropertyValue(System.String,System.Object)">
            <summary>
            Indicates that the service should be use specified property argument.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="value">The specified property value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithPropertyValue(System.String,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Indicates that the service should be use specified property argument.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.Type.ITypeWithSyntax.WithParameter(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Indicates that the service should be use specified custom argument.
            </summary>
            <param name="parameter">The specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeCallbackConstructorObjectPriorityScopeUseWithSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeCallbackConstructorObjectPriorityScopeUseWithSyntax`1">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeCallbackConstructorObjectPriorityUseWithSyntax`1">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeCallbackConstructorObjectPriorityUseWithSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeCallbackObjectPriorityUseWithSyntax`1">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeCallbackObjectPriorityUseWithSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeCallbackObjectUseWithSyntax`1">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.Type.ITypeCallbackObjectUseWithSyntax">
            <summary>
            Specific fluent syntax for type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.BuildBinding">
            <summary>
            Builds the current <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
            <returns>The builded <see cref="T:MugenInjection.Bindings.BindingBase"/>.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.Build">
            <summary>
            Builds the current <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
            <returns>The builded <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.To(System.Type)">
            <summary>
            Indicates that the service should be bound to the specified type.
            </summary>
            <param name="typeTo">The specified <see cref="T:System.Type"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.ToCustomBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Indicates that the service should be bound to the specified custom binding.
            </summary>
            <param name="customBinding">The specified <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.ToSelf">
            <summary>
            Indicates that the service should be self-bound.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.ToMethod(MugenInjection.Delegates.MethodBindingDelegate)">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.ToConstant(System.Object)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1}#ToSelf">
            <summary>
            Indicates that the service should be self-bound.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1}#To``1">
            <summary>
            Indicates that the service should be bound to the specified type <see cref="!:T1"/>.
            </summary>
            <typeparam name="TTypeTo">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1}#ToMethod``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TTypeTo"> </typeparam>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1}#ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1}#To``1(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Adds a constructor argument for the specified argument expression.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2}#To``1">
            <summary>
            Indicates that the service should be bound to the specified types.
            </summary>
            <typeparam name="TTypeTo">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2}#ToMethod``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <typeparam name="TTypeTo"></typeparam>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2}#ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2}#To``1(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Adds a constructor argument for the specified argument expression.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2@T3}#To``1">
            <summary>
            Indicates that the service should be bound to the specified types.
            </summary>
            <typeparam name="TTypeTo">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2@T3}#ToMethod``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <typeparam name="TTypeTo"></typeparam>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2@T3}#ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2@T3}#To``1(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Adds a constructor argument for the specified argument expression.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2@T3@T4}#To``1">
            <summary>
            Indicates that the service should be bound to the specified types.
            </summary>
            <typeparam name="TTypeTo">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2@T3@T4}#ToMethod``1(MugenInjection.Delegates.MethodBindingDelegate{``0})">
            <summary>
            Indicates that the service should be bound to the specified method.
            </summary>
            <typeparam name="TTypeTo"></typeparam>
            <param name="methodBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.MethodBindingDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2@T3@T4}#ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <param name="constValue">The specified constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#IGenericBindingSyntax{T1@T2@T3@T4}#To``1(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Adds a constructor argument for the specified argument expression.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.TryDisposeObjects">
            <summary>
            Try to dispose the object after binding disposed.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.KeyedBinding(System.Object)">
            <summary>
            Indicates that the binding should be registered with the specified key. Keys are not
            necessarily unique; multiple bindings for a given service may be registered with the same key.
            </summary>
            <param name="key">The key to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.WithSetting(System.String,System.Object)">
            <summary>
            The specified setting for build binding.
            </summary>
            <param name="key">Setting name.</param>
            <param name="value">Setting value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Constant#IConstantObjectSyntax{T1}#NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Constant#IConstantObjectSyntax{T1}#KeyedBinding(System.Object)">
            <summary>
            Indicates that the binding should be registered with the specified key. Keys are not
            necessarily unique; multiple bindings for a given service may be registered with the same key.
            </summary>
            <param name="key">The key to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Constant#IConstantObjectSyntax{T1}#WithSetting(System.String,System.Object)">
            <summary>
            The specified setting for build binding.
            </summary>
            <param name="key">Setting name.</param>
            <param name="value">Setting value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Constant#IConstantObjectSyntax{T1}#TryDisposeObjects">
            <summary>
            Try to dispose the object after binding disposed.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.SetPriority(MugenInjection.Infrastructure.BindingPriority)">
            <summary>
            Manual set priority for binding.
            </summary>
            <param name="priority">The specified <see cref="T:MugenInjection.Infrastructure.BindingPriority"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.SetStandardPriority">
            <summary>
            Set standard priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.SetLowPriority">
            <summary>
            Set low priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.SetNormalPriority">
            <summary>
            Set normal priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.SetHighPriority">
            <summary>
            Set high priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Constant#IConstantPrioritySyntax{T1}#SetStandardPriority">
            <summary>
            Set standard priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Constant#IConstantPrioritySyntax{T1}#SetLowPriority">
            <summary>
            Set low priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Constant#IConstantPrioritySyntax{T1}#SetNormalPriority">
            <summary>
            Set normal priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Constant#IConstantPrioritySyntax{T1}#SetHighPriority">
            <summary>
            Set high priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Constant#IConstantPrioritySyntax{T1}#SetPriority(MugenInjection.Infrastructure.BindingPriority)">
            <summary>
            Manual set priority for binding.
            </summary>
            <param name="priority">The specified <see cref="T:MugenInjection.Infrastructure.BindingPriority"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.CanResolveBindingDelegate"/></param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name">The name of namespace.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="T">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Constant#IConstantWhenSyntax{T1}#WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Constant#IConstantWhenSyntax{T1}#WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Constant#IConstantWhenSyntax{T1}#WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Constant#IConstantWhenSyntax{T1}#WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Constant#IConstantWhenSyntax{T1}#WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name">The name of namespace.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Constant#IConstantWhenSyntax{T1}#WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Constant#IConstantWhenSyntax{T1}#WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Constant#IConstantWhenSyntax{T1}#When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.CanResolveBindingDelegate"/></param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
            Execute callback method before binding activated.
            </summary>
            <param name="onActivating">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.OnActivated(System.Action{System.Object})">
            <summary>
                Indicates that the binding should executes callback method after binding activated.
            </summary>
            <param name="onActivated">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.OnActivated(MugenInjection.Delegates.BindingActivatedDelegate{System.Object})">
            <summary>
            Execute callback method after binding activated.
            </summary>
            <param name="onActivated">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.OnReleaseObject(System.Action{System.Object,System.Boolean})">
            <summary>
                Executes the callback that should be called before instances are released.
            </summary>
            <param name="onReleaseObject">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
            Execute callback method after binding disposed.
            </summary>
            <param name="onDisposed">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.OnActivated(MugenInjection.Delegates.BindingActivatedDelegate{`0})">
            <summary>
            Execute callback method after binding activated.
            </summary>
            <param name="onActivated">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.OnActivated(System.Action{`0})">
            <summary>
                Indicates that the binding should executes callback method after binding activated.
            </summary>
            <param name="onActivated">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodCallbackSyntax{T1}#OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
            Execute callback method after binding disposed.
            </summary>
            <param name="onDisposed">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.OnReleaseObject(System.Action{`0,System.Boolean})">
            <summary>
                Executes the callback that should be called before instances are released.
            </summary>
            <param name="onReleaseObject">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodCallbackSyntax{T1}#OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
            Execute callback method before binding activated.
            </summary>
            <param name="onActivating">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodObjectSyntax#TryDisposeObjects">
            <summary>
            Try to dispose the object after binding disposed.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodObjectSyntax#NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodObjectSyntax#KeyedBinding(System.Object)">
            <summary>
            Indicates that the binding should be registered with the specified key. Keys are not
            necessarily unique; multiple bindings for a given service may be registered with the same key.
            </summary>
            <param name="key">The key to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodObjectSyntax#WithSetting(System.String,System.Object)">
            <summary>
            The specified setting for build binding.
            </summary>
            <param name="key">Setting name.</param>
            <param name="value">Setting value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodObjectSyntax{T1}#NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodObjectSyntax{T1}#KeyedBinding(System.Object)">
            <summary>
            Indicates that the binding should be registered with the specified key. Keys are not
            necessarily unique; multiple bindings for a given service may be registered with the same key.
            </summary>
            <param name="key">The key to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodObjectSyntax{T1}#WithSetting(System.String,System.Object)">
            <summary>
            The specified setting for build binding.
            </summary>
            <param name="key">Setting name.</param>
            <param name="value">Setting value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodObjectSyntax{T1}#TryDisposeObjects">
            <summary>
            Try to dispose the object after binding disposed.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodPrioritySyntax#SetPriority(MugenInjection.Infrastructure.BindingPriority)">
            <summary>
            Manual set priority for binding.
            </summary>
            <param name="priority">The specified <see cref="T:MugenInjection.Infrastructure.BindingPriority"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodPrioritySyntax#SetStandardPriority">
            <summary>
            Set standard priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodPrioritySyntax#SetLowPriority">
            <summary>
            Set low priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodPrioritySyntax#SetNormalPriority">
            <summary>
            Set normal priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodPrioritySyntax#SetHighPriority">
            <summary>
            Set hight priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodPrioritySyntax{T1}#SetStandardPriority">
            <summary>
            Set standard priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodPrioritySyntax{T1}#SetLowPriority">
            <summary>
            Set low priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodPrioritySyntax{T1}#SetNormalPriority">
            <summary>
            Set normal priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodPrioritySyntax{T1}#SetHighPriority">
            <summary>
            Set hight priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodPrioritySyntax{T1}#SetPriority(MugenInjection.Infrastructure.BindingPriority)">
            <summary>
            Manual set priority for binding.
            </summary>
            <param name="priority">The specified <see cref="T:MugenInjection.Infrastructure.BindingPriority"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.InScope(MugenInjection.Delegates.CustomScopeDelegate)">
            <summary>
             Indicates that instances activated via the custom lifecycle managment.
            </summary>
            <param name="customScopeDelegate">The specified <see cref="T:MugenInjection.Delegates.CustomScopeDelegate"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.InScope(MugenInjection.Interface.IScopeLifecycle)">
            <summary>
             Indicates that instances activated via the specified lifecycle
            </summary>
            <param name="scopeLifecycle">The specified <see cref="T:MugenInjection.Interface.IScopeLifecycle"/>. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.InSingletonScope">
            <summary>
            Indicates that only a single instance of the binding should be created, and then
            should be re-used for all subsequent requests.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.InThreadScope">
            <summary>
            Indicates that instances activated via the binding should be re-used within the same thread.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.InTransientScope">
            <summary>
            Indicates that instances activated via the binding should not be re-used, nor have their lifecycle managed.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.InUnitOfWorkScope">
             <summary>
            Indicates that only a single instance of the binding should be created in each <see cref="T:MugenInjection.Interface.IInjector"/>, and then
             should be re-used for all subsequent requests. 
             </summary>
             <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.InManagedScope">
            <summary>
             Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.InWeakReferenceScope">
            <summary>
            Indicates that instances activated via the binding should be re-used as weak reference.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodScopeSyntax{T1}#InScope(MugenInjection.Interface.IScopeLifecycle)">
            <summary>
             Indicates that instances activated via the specified lifecycle
            </summary>
            <param name="scopeLifecycle">The specified <see cref="T:MugenInjection.Interface.IScopeLifecycle"/>. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodScopeSyntax{T1}#InSingletonScope">
            <summary>
            Indicates that only a single instance of the binding should be created, and then
            should be re-used for all subsequent requests.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodScopeSyntax{T1}#InThreadScope">
            <summary>
            Indicates that instances activated via the binding should be re-used within the same thread.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodScopeSyntax{T1}#InTransientScope">
            <summary>
            Indicates that instances activated via the binding should not be re-used, nor have their lifecycle managed.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodScopeSyntax{T1}#InUnitOfWorkScope">
             <summary>
            Indicates that only a single instance of the binding should be created in each <see cref="T:MugenInjection.Interface.IInjector"/>, and then
             should be re-used for all subsequent requests. 
             </summary>
             <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodScopeSyntax{T1}#InManagedScope">
            <summary>
             Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodScopeSyntax{T1}#InScope(MugenInjection.Delegates.CustomScopeDelegate)">
            <summary>
             Indicates that instances activated via the custom lifecycle managment.
            </summary>
            <param name="customScopeDelegate">The specified <see cref="T:MugenInjection.Delegates.CustomScopeDelegate"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodScopeSyntax{T1}#InWeakReferenceScope">
            <summary>
            Indicates that instances activated via the binding should be re-used as weak reference.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodWhenSyntax#When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.CanResolveBindingDelegate"/></param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodWhenSyntax#WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodWhenSyntax#WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodWhenSyntax#WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodWhenSyntax#WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodWhenSyntax#WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name">The name of namespace.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodWhenSyntax#WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodWhenSyntax#WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="T">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodWhenSyntax{T1}#WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodWhenSyntax{T1}#WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodWhenSyntax{T1}#WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodWhenSyntax{T1}#WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodWhenSyntax{T1}#WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name">The name of namespace.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodWhenSyntax{T1}#WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodWhenSyntax{T1}#WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodWhenSyntax{T1}#When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.CanResolveBindingDelegate"/></param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.WithConstructorArgument(System.String,System.Object)">
            <summary>
            Use specified constructor argument.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.WithConstructorArgument(System.String,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Use specified constructor argument.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.WithMethodArgument(System.String,System.String,System.Object)">
            <summary>
            Use specified method argument.
            </summary>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.WithMethodArgument(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Use specified method argument.
            </summary>
            <param name="methodName"></param>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.WithPropertyValue(System.String,System.Object)">
            <summary>
            Use specified propety argument.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="value">The specified property value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.WithPropertyValue(System.String,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Use specified propety argument.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.WithParameter(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Use specified custom argument.
            </summary>
            <param name="parameter">The specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.UseReflectionActivator">
            <summary>
            Use reflection activator for activate instance.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.UseEmitActivator">
            <summary>
            Use emit activator for activate instance.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.UseExpressionActivator">
            <summary>
            Use expression activator for activate instance.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.UseCustomActivator(MugenInjection.Interface.IActivator)">
            <summary>
            Use custom activator for activate instance.
            </summary>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.UseCustomActivator(System.Func{MugenInjection.Interface.IActivator})">
            <summary>
            Use custom activator for activate instance.
            </summary>
            <param name="methodActivator">The specified <see cref="T:System.Func`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodUseSyntax{T1}#UseEmitActivator">
            <summary>
            Use emit activator for activate instance.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodUseSyntax{T1}#UseExpressionActivator">
            <summary>
            Use expression activator for activate instance.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodUseSyntax{T1}#UseCustomActivator(MugenInjection.Interface.IActivator)">
            <summary>
            Use custom activator for activate instance.
            </summary>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodUseSyntax{T1}#UseCustomActivator(System.Func{MugenInjection.Interface.IActivator})">
            <summary>
            Use custom activator for activate instance.
            </summary>
            <param name="methodActivator">The specified <see cref="T:System.Func`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodUseSyntax{T1}#UseReflectionActivator">
            <summary>
            Use reflection activator for activate instance.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeCallbackSyntax#OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
            Execute callback method before binding activated.
            </summary>
            <param name="onActivating">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeCallbackSyntax#OnActivated(System.Action{System.Object})">
            <summary>
                Indicates that the binding should executes callback method after binding activated.
            </summary>
            <param name="onActivated">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeCallbackSyntax#OnActivated(MugenInjection.Delegates.BindingActivatedDelegate{System.Object})">
            <summary>
            Execute callback method after binding activated.
            </summary>
            <param name="onActivated">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeCallbackSyntax#OnReleaseObject(System.Action{System.Object,System.Boolean})">
            <summary>
                Executes the callback that should be called before instances are released.
            </summary>
            <param name="onReleaseObject">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeCallbackSyntax#OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
            Execute callback method after binding disposed.
            </summary>
            <param name="onDisposed">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeCallbackSyntax{T1}#OnActivated(System.Action{`0})">
            <summary>
                Indicates that the binding should executes callback method after binding activated.
            </summary>
            <param name="onActivated">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeCallbackSyntax{T1}#OnActivated(MugenInjection.Delegates.BindingActivatedDelegate{`0})">
            <summary>
            Execute callback method after binding activated.
            </summary>
            <param name="onActivated">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeCallbackSyntax{T1}#OnDisposed(System.Action{MugenInjection.Interface.IBinding})">
            <summary>
            Execute callback method after binding disposed.
            </summary>
            <param name="onDisposed">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeCallbackSyntax{T1}#OnReleaseObject(System.Action{`0,System.Boolean})">
            <summary>
                Executes the callback that should be called before instances are released.
            </summary>
            <param name="onReleaseObject">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeCallbackSyntax{T1}#OnActivating(System.Action{MugenInjection.Interface.IBindingContext})">
            <summary>
            Execute callback method before binding activated.
            </summary>
            <param name="onActivating">The specified callback method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.TakeConstructor(System.Type[])">
            <summary>
            Indicates that the service should be bound to the specified constructor.
            </summary>
            <param name="types">The specified parameters for search constructor.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.TakeConstructor``1">
            <summary>
            Indicates that the service should be bound to the specified constructor.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.TakeConstructor``2">
            <summary>
            Indicates that the service should be bound to the specified constructor.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.TakeConstructor``3">
            <summary>
            Indicates that the service should be bound to the specified constructor.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.TakeConstructor``4">
            <summary>
            Indicates that the service should be bound to the specified constructor.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.TakeConstructor``5">
            <summary>
            Indicates that the service should be bound to the specified constructor.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeConstructorSyntax{T1}#TakeConstructor(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,`0}})">
            <summary>
            Use specified property argument.
            </summary>
            <param name="constructor">The constructor expression.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeConstructorSyntax{T1}#TakeConstructor(System.Type[])">
            <summary>
            Indicates that the service should be bound to the specified constructor.
            </summary>
            <param name="types">The specified parameters for search constructor.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeObjectSyntax#TryDisposeObjects">
            <summary>
            Try to dispose the object after binding disposed.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeObjectSyntax#NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeObjectSyntax#KeyedBinding(System.Object)">
            <summary>
            Indicates that the binding should be registered with the specified key. Keys are not
            necessarily unique; multiple bindings for a given service may be registered with the same key.
            </summary>
            <param name="key">The key to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeObjectSyntax#WithSetting(System.String,System.Object)">
            <summary>
            The specified setting for build binding.
            </summary>
            <param name="key">Setting name.</param>
            <param name="value">Setting value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeObjectSyntax{T1}#NamedBinding(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeObjectSyntax{T1}#KeyedBinding(System.Object)">
            <summary>
            Indicates that the binding should be registered with the specified key. Keys are not
            necessarily unique; multiple bindings for a given service may be registered with the same key.
            </summary>
            <param name="key">The key to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeObjectSyntax{T1}#WithSetting(System.String,System.Object)">
            <summary>
            The specified setting for build binding.
            </summary>
            <param name="key">Setting name.</param>
            <param name="value">Setting value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeObjectSyntax{T1}#TryDisposeObjects">
            <summary>
            Try to dispose the object after binding disposed.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypePrioritySyntax#SetPriority(MugenInjection.Infrastructure.BindingPriority)">
            <summary>
            Manual set priority for binding.
            </summary>
            <param name="priority">The specified <see cref="T:MugenInjection.Infrastructure.BindingPriority"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypePrioritySyntax#SetStandardPriority">
            <summary>
            Set standard priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypePrioritySyntax#SetLowPriority">
            <summary>
            Set low priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypePrioritySyntax#SetNormalPriority">
            <summary>
            Set normal priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypePrioritySyntax#SetHighPriority">
            <summary>
            Set high priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypePrioritySyntax{T1}#SetStandardPriority">
            <summary>
            Set standard priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypePrioritySyntax{T1}#SetLowPriority">
            <summary>
            Set low priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypePrioritySyntax{T1}#SetNormalPriority">
            <summary>
            Set normal priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypePrioritySyntax{T1}#SetHighPriority">
            <summary>
            Set high priority for binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypePrioritySyntax{T1}#SetPriority(MugenInjection.Infrastructure.BindingPriority)">
            <summary>
            Manual set priority for binding.
            </summary>
            <param name="priority">The specified <see cref="T:MugenInjection.Infrastructure.BindingPriority"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeScopeSyntax#InScope(MugenInjection.Delegates.CustomScopeDelegate)">
            <summary>
             Indicates that instances activated via the custom lifecycle managment.
            </summary>
            <param name="customScopeDelegate">The specified <see cref="T:MugenInjection.Delegates.CustomScopeDelegate"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeScopeSyntax#InScope(MugenInjection.Interface.IScopeLifecycle)">
            <summary>
             Indicates that instances activated via the specified lifecycle
            </summary>
            <param name="scopeLifecycle">The specified <see cref="T:MugenInjection.Interface.IScopeLifecycle"/>. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeScopeSyntax#InSingletonScope">
            <summary>
            Indicates that only a single instance of the binding should be created, and then
            should be re-used for all subsequent requests.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeScopeSyntax#InThreadScope">
            <summary>
            Indicates that instances activated via the binding should be re-used within the same thread.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeScopeSyntax#InTransientScope">
            <summary>
            Indicates that instances activated via the binding should not be re-used, nor have their lifecycle managed.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeScopeSyntax#InUnitOfWorkScope">
            <summary>
            Indicates that only a single instance of the binding should be created in each <see cref="T:MugenInjection.Interface.IInjector"/>, and then
            should be re-used for all subsequent requests. 
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeScopeSyntax#InManagedScope">
            <summary>
             Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeScopeSyntax#InWeakReferenceScope">
            <summary>
            Indicates that instances activated via the binding should be re-used as weak reference.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeScopeSyntax{T1}#InScope(MugenInjection.Interface.IScopeLifecycle)">
            <summary>
             Indicates that instances activated via the specified lifecycle
            </summary>
            <param name="scopeLifecycle">The specified <see cref="T:MugenInjection.Interface.IScopeLifecycle"/>. </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeScopeSyntax{T1}#InSingletonScope">
            <summary>
            Indicates that only a single instance of the binding should be created, and then
            should be re-used for all subsequent requests.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeScopeSyntax{T1}#InThreadScope">
            <summary>
            Indicates that instances activated via the binding should be re-used within the same thread.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeScopeSyntax{T1}#InTransientScope">
            <summary>
            Indicates that instances activated via the binding should not be re-used, nor have their lifecycle managed.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeScopeSyntax{T1}#InUnitOfWorkScope">
            <summary>
            Indicates that only a single instance of the binding should be created in each <see cref="T:MugenInjection.Interface.IInjector"/>, and then
            should be re-used for all subsequent requests. 
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeScopeSyntax{T1}#InManagedScope">
            <summary>
             Indicates that instances activated via the <see cref="T:MugenInjection.Interface.IManagedScope"/> lifecycle managment.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeScopeSyntax{T1}#InScope(MugenInjection.Delegates.CustomScopeDelegate)">
            <summary>
             Indicates that instances activated via the custom lifecycle managment.
            </summary>
            <param name="customScopeDelegate">The specified <see cref="T:MugenInjection.Delegates.CustomScopeDelegate"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeScopeSyntax{T1}#InWeakReferenceScope">
            <summary>
            Indicates that instances activated via the binding should be re-used as weak reference.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeUseSyntax#UseReflectionActivator">
            <summary>
            Use reflection activator for create new instance of object.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeUseSyntax#UseEmitActivator">
            <summary>
            Use emit activator for create new instance of object.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeUseSyntax#UseExpressionActivator">
            <summary>
            Use expression activator for create new instance of object.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeUseSyntax#UseCustomActivator(MugenInjection.Interface.IActivator)">
            <summary>
            Use custom activator for create new instance of object.
            </summary>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeUseSyntax#UseCustomActivator(System.Func{MugenInjection.Interface.IActivator})">
            <summary>
            Use custom activator for create new instance of object.
            </summary>
            <param name="methodActivator">The specified <see cref="T:System.Func`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.UseCustomConstructorResolver(MugenInjection.Interface.IConstructorResolver)">
            <summary>
            Use custom constructor resolver for select constructor for specified service.
            </summary>
            <param name="constructorResolver">The specified <see cref="T:MugenInjection.Interface.IConstructorResolver"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.UseCustomConstructorResolver(System.Func{MugenInjection.Interface.IConstructorResolver})">
            <summary>
            Use custom constructor resolver for select constructor for specified service.
            </summary>
            <param name="constructorResolver">The specified <see cref="T:System.Func`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeUseSyntax{T1}#UseEmitActivator">
            <summary>
            Use emit activator for create new instance of object.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeUseSyntax{T1}#UseExpressionActivator">
            <summary>
            Use expression activator for create new instance of object.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeUseSyntax{T1}#UseCustomActivator(MugenInjection.Interface.IActivator)">
            <summary>
            Use custom activator for create new instance of object.
            </summary>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeUseSyntax{T1}#UseCustomActivator(System.Func{MugenInjection.Interface.IActivator})">
            <summary>
            Use custom activator for create new instance of object.
            </summary>
            <param name="methodActivator">The specified <see cref="T:System.Func`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeUseSyntax{T1}#UseCustomConstructorResolver(MugenInjection.Interface.IConstructorResolver)">
            <summary>
            Use custom constructor resolver for select constructor for specified service.
            </summary>
            <param name="constructorResolver">The specified <see cref="T:MugenInjection.Interface.IConstructorResolver"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeUseSyntax{T1}#UseCustomConstructorResolver(System.Func{MugenInjection.Interface.IConstructorResolver})">
            <summary>
            Use custom constructor resolver for select constructor for specified service.
            </summary>
            <param name="constructorResolver">The specified <see cref="T:System.Func`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeUseSyntax{T1}#UseReflectionActivator">
            <summary>
            Use reflection activator for create new instance of object.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWhenSyntax#When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.CanResolveBindingDelegate"/></param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWhenSyntax#WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWhenSyntax#WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWhenSyntax#WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWhenSyntax#WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWhenSyntax#WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name">The name of namespace.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWhenSyntax#WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWhenSyntax#WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="T">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWhenSyntax{T1}#WhenInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWhenSyntax{T1}#WhenInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWhenSyntax{T1}#WhenIntoIsAssignable(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWhenSyntax{T1}#WhenIntoIsAssignable``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWhenSyntax{T1}#WhenNamespaceEqual(System.String)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name">The name of namespace.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWhenSyntax{T1}#WhenClassHasAttribute(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWhenSyntax{T1}#When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate">The specified <see cref="T:MugenInjection.Delegates.CanResolveBindingDelegate"/></param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWhenSyntax{T1}#WhenClassHasAttribute``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWithSyntax#WithConstructorArgument(System.String,System.Object)">
            <summary>
            Use specified constructor argument.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWithSyntax#WithConstructorArgument(System.String,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Use specified constructor argument.
            </summary>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWithSyntax#WithMethodArgument(System.String,System.String,System.Object)">
            <summary>
            Use specified method argument.
            </summary>
            <param name="methodName">The specified method name.</param>
            <param name="name">The specified parameter name.</param>
            <param name="value">The specified parameter value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWithSyntax#WithMethodArgument(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Use specified method argument.
            </summary>
            <param name="methodName"></param>
            <param name="name">The specified parameter name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWithSyntax#WithPropertyValue(System.String,System.Object)">
            <summary>
            Use specified propety argument.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="value">The specified property value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWithSyntax#WithPropertyValue(System.String,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Use specified propety argument.
            </summary>
            <param name="name">The specified property name.</param>
            <param name="parameterDelegate">The specified <see cref="T:MugenInjection.Delegates.ParameterDelegate`1"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWithSyntax#WithParameter(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Use specified custom argument.
            </summary>
            <param name="parameter">The specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.WithConstructorArguments(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,`0}})">
            <summary>
            Use specified method arguments.
            </summary>
            <param name="constructorCall">The specified new instance expression.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.WithPropertyValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Use specified propety argument.
            </summary>
            <param name="property">The property accesss expression.</param>
            <param name="value">The specified property value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.WithMethodArguments(System.Linq.Expressions.Expression{System.Action{MugenInjection.Infrastructure.ResolveContext,`0}})">
            <summary>
            Use specified method arguments.
            </summary>
            <param name="methodCall">The specified method call expression.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Method#IMethodWithSyntax{T1}#WithParameter(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Use specified custom argument.
            </summary>
            <param name="parameter">The specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWithSyntax{T1}#WithConstructorArguments(System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,`0}})">
            <summary>
            Use specified method arguments.
            </summary>
            <param name="constructorCall">The specified new instance expression.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWithSyntax{T1}#WithPropertyValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Use specified propety argument.
            </summary>
            <param name="property">The property accesss expression.</param>
            <param name="value">The specified property value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWithSyntax{T1}#WithMethodArguments(System.Linq.Expressions.Expression{System.Action{MugenInjection.Infrastructure.ResolveContext,`0}})">
            <summary>
            Use specified method arguments.
            </summary>
            <param name="methodCall">The specified method call expression.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilder`4.MugenInjection#Syntax#Type#ITypeWithSyntax{T1}#WithParameter(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Use specified custom argument.
            </summary>
            <param name="parameter">The specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilder`4.Injector">
            <summary>
            Gets the <see cref="T:MugenInjection.Interface.IInjector"/> that owns the <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilder`4.Services">
            <summary>
            Gets the specified service types. 
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilder`4.Settings">
            <summary>
            Gets the settings for the current <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.Builders.BindingBuilder`4.IsConfiguring">
            <summary>
                Indicates that the binding builder is configuring.
            </summary>
        </member>
        <member name="E:MugenInjection.Bindings.Builders.BindingBuilder`4.Building">
            <summary>
                Occurs before build the current IBindingBuilder.
            </summary>
        </member>
        <member name="E:MugenInjection.Bindings.Builders.BindingBuilder`4.Builded">
            <summary>
                Occurs after build current IBindingBuilder.
            </summary>
        </member>
        <member name="T:MugenInjection.Bindings.Builders.BindingBuilderConfigurator">
            <summary>
            Represent the binding builder setting keys.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilderConfigurator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Bindings.Builders.BindingBuilderConfigurator"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilderConfigurator.#ctor(MugenInjection.Interface.IBindingBuilder,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Bindings.Builders.BindingBuilderConfigurator"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilderConfigurator.Configure.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Bindings.Builders.BindingBuilderConfigurator.Configure"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.BindingBuilderConfigurator.Configure.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MugenInjection.Syntax.IConditionBuilder`1">
            <summary>
                Specific fluent syntax to create condition.
            </summary>
        </member>
        <member name="M:MugenInjection.Syntax.IConditionBuilder`1.Named(System.String)">
            <summary>
                Indicates that the condition should be registered with the specified name.
            </summary>
            <param name="name">The name to give the condition.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IConditionBuilder`1.Keyed(System.Object)">
            <summary>
            Indicates that the condition should be registered with the specified key.
            </summary>
            <param name="key">The key to give the condition.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IConditionBuilder`1.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
                Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate">
                The specified <see cref="T:MugenInjection.Delegates.CanResolveBindingDelegate"/>
            </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IConditionBuilder`1.WhenInto(System.Type)">
            <summary>
                Indicates that the binding should be used only for injections on the specified type.
                Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IConditionBuilder`1.WhenInto``1">
            <summary>
                Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
                Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IConditionBuilder`1.WhenIntoIsAssignable(System.Type)">
            <summary>
                Indicates that the binding should be used only for injections on the specified type.
                Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IConditionBuilder`1.WhenIntoIsAssignable``1">
            <summary>
                Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
                Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IConditionBuilder`1.WhenNamespaceEqual(System.String)">
            <summary>
                Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name">The name of namespace.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IConditionBuilder`1.WhenClassHasAttribute(System.Type)">
            <summary>
                Indicates that the binding should be used only when the class being injected has
                an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Syntax.IConditionBuilder`1.WhenClassHasAttribute``1">
            <summary>
                Indicates that the binding should be used only when the class being injected has
                an attribute of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConditionBuilder`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Bindings.Builders.ConditionBuilder`1"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConditionBuilder`1.Named(System.String)">
            <summary>
                Indicates that the condition should be registered with the specified name.
            </summary>
            <param name="name">The name to give the condition.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConditionBuilder`1.Keyed(System.Object)">
            <summary>
            Indicates that the condition should be registered with the specified key.
            </summary>
            <param name="key">The key to give the condition.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConditionBuilder`1.When(MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
                Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="canResolveBindingDelegate">
                The specified <see cref="T:MugenInjection.Delegates.CanResolveBindingDelegate"/>
            </param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConditionBuilder`1.WhenInto(System.Type)">
            <summary>
                Indicates that the binding should be used only for injections on the specified type.
                Types that derive from the specified type will not be considered as valid target.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConditionBuilder`1.WhenInto``1">
            <summary>
                Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
                Types that derive from the specified type will not be considered as valid target.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConditionBuilder`1.WhenIntoIsAssignable(System.Type)">
            <summary>
                Indicates that the binding should be used only for injections on the specified type.
                Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="type">The type of target.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConditionBuilder`1.WhenIntoIsAssignable``1">
            <summary>
                Indicates that the binding should be used only for injections on the specified type <see cref="!:TType"/>.
                Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TType">The type of target.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConditionBuilder`1.WhenNamespaceEqual(System.String)">
            <summary>
                Indicates that the binding should be used only for injections on the specified type when namespace equals.
            </summary>
            <param name="name">The name of namespace.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConditionBuilder`1.WhenClassHasAttribute(System.Type)">
            <summary>
                Indicates that the binding should be used only when the class being injected has
                an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.Builders.ConditionBuilder`1.WhenClassHasAttribute``1">
            <summary>
                Indicates that the binding should be used only when the class being injected has
                an attribute of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Bindings.ConstantBinding">
            <summary>
            Represents the constant binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.ConstantBinding.#ctor(System.Object,System.Collections.Generic.IList{System.Type},System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Bindings.ConstantBinding"/> class.
            </summary>
            <param name="value">Constant value.</param>
            <param name="services">The specified services types.</param>
            <param name="parameters">The specified parameters.</param>
            <param name="canResolve">The specified condition for can resolve method.</param>
        </member>
        <member name="M:MugenInjection.Bindings.ConstantBinding.ResolveService(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="T:MugenInjection.Scope.ScopeLifecycleBase">
            <summary>
                Represents a base class for scope lifecycle all operation is thread-safety.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IScopeLifecycle">
            <summary>
                Represents a base interface for scope lifecycle.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IScopeLifecycle.GetObjectFromScope">
            <summary>
                Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> from scope.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IScopeLifecycle.ReleaseObjects(System.Boolean)">
            <summary>
                Releases all objects in current scope.
            </summary>
            <param name="isNeedDisposeObject">Indicating that need trying dispose objects.</param>
        </member>
        <member name="P:MugenInjection.Interface.IScopeLifecycle.Context">
            <summary>
                Gets or sets the <see cref="T:MugenInjection.Interface.IScopeLifecycleContext"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IScopeLifecycle.ReleaseObjectActions">
            <summary>
                Gets the actions that should be called before instances are released.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Scope.ScopeLifecycleBase"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.TryReleaseObjectWithNotification(System.Object)">
            <summary>
                Trying to release the specified object with notification.
            </summary>
            <param name="obj">The specified object.</param>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.TryReleaseObjectWithNotification(System.Object,System.Boolean)">
            <summary>
                Trying to release the specified object with notification.
            </summary>
            <param name="obj">The specified object.</param>
            <param name="isNeedDispose">Indicating that need trying dispose objects.</param>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.ResolveCurrentService">
            <summary>
                Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.IsNeedDispose">
            <summary>
                Indicating that need dispose object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.GetObjectFromScope">
            <summary>
                Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> from scope.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.GetObjectsFromScope">
            <summary>
                Gets all created objects in the current scope.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.ClearScope">
            <summary>
                Clears the current scope.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.Dispose(System.Boolean)">
            <summary>
                Releases resources held by the object.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.MugenInjection#Interface#IScopeLifecycle#GetObjectFromScope">
            <summary>
                Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> from scope.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Scope.ScopeLifecycleBase.ReleaseObjects(System.Boolean)">
            <summary>
                Releases all objects in current scope.
            </summary>
            <param name="isNeedDisposeObject">Indicating that need trying dispose objects.</param>
        </member>
        <member name="P:MugenInjection.Scope.ScopeLifecycleBase.Context">
            <summary>
                Gets or sets the <see cref="T:MugenInjection.Interface.IScopeLifecycleContext"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Scope.ScopeLifecycleBase.ReleaseObjectActions">
            <summary>
                Gets the actions that should be called before instances are deactivated via the binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.ConstantBinding.ConstantScope.#ctor(System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Bindings.ConstantBinding.ConstantScope"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.ConstantBinding.ConstantScope.GetObjectFromScope">
            <summary>
                Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> from scope.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.ConstantBinding.ConstantScope.GetObjectsFromScope">
            <summary>
                Gets all created objects in the current scope.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.ConstantBinding.ConstantScope.ClearScope">
            <summary>
                Clears the current scope.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.ConstantBinding.ConstantScope.Dispose(System.Boolean)">
            <summary>
                Releases resources held by the object.
            </summary>
        </member>
        <member name="T:MugenInjection.Bindings.CustomBinding">
            <summary>
            Represents the custom binding.
            </summary>
        </member>
        <member name="F:MugenInjection.Bindings.CustomBinding._activator">
            <summary>
            Gets the <see cref="T:MugenInjection.Interface.IActivator"/> for activate object.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.CustomBinding.#ctor(MugenInjection.Interface.IBinding,MugenInjection.Interface.IActivator,System.Collections.Generic.IList{System.Type},MugenInjection.Interface.IScopeLifecycle,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Bindings.CustomBinding"/> class.
            </summary>
            <param name="customBinding">The specified custom binding.</param>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/> for activate object. </param>
            <param name="services">The specified services types.</param>
            <param name="scopeLifecycle">The specified <see cref="T:MugenInjection.Interface.IScopeLifecycle"/></param>
            <param name="parameters">The specified parameters.</param>
            <param name="canResolve">The specified condition for can resolve method.</param>
        </member>
        <member name="M:MugenInjection.Bindings.CustomBinding.CanResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.CustomBinding.ResolveService(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.CustomBinding.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.CustomBinding.Activator">
            <summary>
            Gets <see cref="T:MugenInjection.Interface.IActivator"/> for the current binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.CustomBinding.Binding">
            <summary>
            Gets <see cref="T:MugenInjection.Interface.IBinding"/> to activate object.
            </summary>
        </member>
        <member name="T:MugenInjection.Bindings.MethodBinding">
            <summary>
            Represents the method binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.MethodBinding.#ctor(MugenInjection.Delegates.MethodBindingDelegate,MugenInjection.Interface.IActivator,System.Collections.Generic.IList{System.Type},MugenInjection.Interface.IScopeLifecycle,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Bindings.MethodBinding"/> class.
            </summary>
            <param name="method">The specified method for activate object.</param>
            <param name="activator">The specified <see cref="T:MugenInjection.Interface.IActivator"/> for activate object.</param>
            <param name="services">The specified services types.</param>
            <param name="scopeLifecycle">The specified <see cref="T:MugenInjection.Interface.IScopeLifecycle"/></param>
            <param name="parameters">The specified parameters.</param>
            <param name="canResolve">The specified condition for can resolve method.</param>
        </member>
        <member name="M:MugenInjection.Bindings.MethodBinding.ResolveService(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.MethodBinding.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.MethodBinding.Activator">
            <summary>
            Gets <see cref="T:MugenInjection.Interface.IActivator"/> for the current binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Bindings.TypeBinding">
            <summary>
                Represents the type binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.TypeBinding.#ctor(System.Type,MugenInjection.Interface.IActivator,MugenInjection.Interface.IConstructorResolver,System.Collections.Generic.IList{System.Type},MugenInjection.Interface.IScopeLifecycle,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},MugenInjection.Delegates.CanResolveBindingDelegate,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Bindings.TypeBinding"/> class.
            </summary>
            <param name="typeTo">The specified type for activate.</param>
            <param name="constructorResolver">
                The specified <see cref="T:MugenInjection.Interface.IConstructorResolver"/>.
            </param>
            <param name="services">The specified services types.</param>
            <param name="scopeLifecycle">
                The specified <see cref="T:MugenInjection.Interface.IScopeLifecycle"/>.
            </param>
            <param name="parameters">The specified parameters.</param>
            <param name="canResolve">The specified condition for can resolve method.</param>
            <param name="activator">
                The specified <see cref="T:MugenInjection.Interface.IActivator"/>.
            </param>
            <param name="isSelfBindable">Indicates that binding was build as self bindable.</param>
        </member>
        <member name="M:MugenInjection.Bindings.TypeBinding.ResolveService(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Bindings.TypeBinding.Dispose(System.Boolean)">
            <summary>
                Releases resources held by the object.
            </summary>
        </member>
        <member name="M:MugenInjection.Bindings.TypeBinding.CreateSelfBinding(System.Type,MugenInjection.Interface.IActivator,MugenInjection.Interface.IConstructorResolver)">
            <summary>
                Creates self bindable <see cref="T:MugenInjection.Bindings.TypeBinding"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.TypeBinding.Activator">
            <summary>
                Gets <see cref="T:MugenInjection.Interface.IActivator"/> for the current binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.TypeBinding.ConstructorResolver">
            <summary>
                Gets <see cref="T:MugenInjection.Interface.IConstructorResolver"/> for current binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.TypeBinding.TypeTo">
            <summary>
                Gets a type to activate.
            </summary>
        </member>
        <member name="P:MugenInjection.Bindings.TypeBinding.IsSelfBindable">
            <summary>
            Indicates that binding was build as self bindable.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.BehaviorManagerComponent">
            <summary>
            The base class for components that manages behaviors.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.Component">
            <summary>
            Represents the base class for components of the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.Components.IComponent">
            <summary>
            Represent components of the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Components.IComponent.Load(MugenInjection.Interface.IInjector)">
            <summary>
            Loads the current component to specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/></param>
        </member>
        <member name="M:MugenInjection.Interface.Components.IComponent.Load(MugenInjection.Interface.IInjector,System.Boolean)">
            <summary>
            Loads the current component to specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <param name="addToContainer">Indicates whether the component is automatically added to the <see cref="T:MugenInjection.Interface.IComponentContainer"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.Components.IComponent.Unload">
            <summary>
            Unloads the current component from <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Components.IComponent.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:MugenInjection.Interface.Components.IComponent.Injector">
            <summary>
            Gets the <see cref="T:MugenInjection.Interface.IInjector"/> that owns the <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.Components.IComponent.IsSingle">
            <summary>
            Indicates whether the component is unique.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.Components.IComponent.ComponentType">
            <summary>
            Gets the component type. Need to find a component in the container.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.Components.IComponent.IsLoaded">
            <summary>
            Indicates that the component is loaded.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.Components.IComponent.IsLoading">
            <summary>
            Indicates that the component is now loading.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.Components.IComponent.IsUnloading">
            <summary>
            Indicates that the component is now unloading.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.Components.IComponent.Loading">
            <summary>
            Occured after loading current <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.Components.IComponent.Loaded">
            <summary>
            Occured after loaded current <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.Components.IComponent.Unloading">
            <summary>
            Occured after unloading current <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.Components.IComponent.Unloaded">
            <summary>
            Occured after unloaded current <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.Component.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.Component"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.Component.Load(MugenInjection.Interface.IInjector)">
            <summary>
            Loads the current component to specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/></param>
        </member>
        <member name="M:MugenInjection.Core.Components.Component.Load(MugenInjection.Interface.IInjector,System.Boolean)">
            <summary>
            Loads the current component to specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <param name="addToContainer">Indicates whether the component is automatically added to the <see cref="T:MugenInjection.Interface.IComponentContainer"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.Components.Component.Unload">
            <summary>
            Unloads the current component from <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.Component.OnLoad">
            <summary>
            Occurs on load component.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.Component.OnUnload">
            <summary>
            Occurs on unload component.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.Component.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:MugenInjection.Core.Components.Component.Injector">
            <summary>
            Gets the <see cref="T:MugenInjection.Interface.IInjector"/> that owns the <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.Component.IsSingle">
            <summary>
            Indicates whether the component is unique.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.Component.ComponentType">
            <summary>
            Gets the component type. Need to find a component in the container.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.Component.IsLoaded">
            <summary>
            Indicates that the component is loaded.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.Component.IsLoading">
            <summary>
            Indicates that the component is now loading.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.Component.IsUnloading">
            <summary>
            Indicates that the component is now unloading.
            </summary>
        </member>
        <member name="E:MugenInjection.Core.Components.Component.Loading">
            <summary>
            Occured after loading current <see cref="T:MugenInjection.Core.Components.Component"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Core.Components.Component.Loaded">
            <summary>
            Occured after loaded current <see cref="T:MugenInjection.Core.Components.Component"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Core.Components.Component.Unloading">
            <summary>
            Occured after unloading current <see cref="T:MugenInjection.Core.Components.Component"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Core.Components.Component.Unloaded">
            <summary>
            Occured after unloaded current <see cref="T:MugenInjection.Core.Components.Component"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.Components.IBehaviorManagerComponent">
            <summary>
            The base interface for components of the manage behaviors.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBehaviorManagerComponent.TryGet``1(``0@)">
            <summary>
            Tries get the behavior with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="TType">The specified <see cref="T:System.Type"/>.</typeparam>
            <param name="behavior">An instance of behavior.</param>
            <returns><c>True</c> if the behavior found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBehaviorManagerComponent.Get``1">
            <summary>
            Gets the behavior with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="TType">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>An instance of behavior.</returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBehaviorManagerComponent.GetAll``1">
            <summary>
            Gets all behaviors with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="TType">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>An instances of behavior.</returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBehaviorManagerComponent.IsExist``1">
            <summary>
            Indicates that the specified <see cref="T:System.Type"/> of behavior exists in the collection.
            </summary>
            <typeparam name="TType">The specified behavior <see cref="T:System.Type"/>.</typeparam>
            <returns><c>True</c> if the specified behavior exist; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBehaviorManagerComponent.Add``2">
            <summary>
            Adds the specified behavior.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBehaviorManagerComponent.Add``1(``0)">
            <summary>
            Adds the specified behavior.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBehaviorManagerComponent.Remove``1">
            <summary>
            Removes the specified behavior.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.Components.IBehaviorManagerComponent.CopyBehavior">
            <summary>
            Indicates that the behaviors will be copy after call method clone.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BehaviorManagerComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.BehaviorManagerComponent"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BehaviorManagerComponent.#ctor(MugenInjection.Infrastructure.CacheCollection{System.Type,System.Collections.Generic.List{System.Func{MugenInjection.Interface.IInjector,System.Object}}})">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.BehaviorManagerComponent"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BehaviorManagerComponent.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BehaviorManagerComponent.TryGet``1(``0@)">
            <summary>
            Tries get the behavior with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="TType">The specified <see cref="T:System.Type"/>.</typeparam>
            <param name="behavior">An instance of behavior.</param>
            <returns><c>True</c> if the behavior found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BehaviorManagerComponent.Get``1">
            <summary>
            Gets the behavior with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="TType">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>An instance of behavior.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BehaviorManagerComponent.GetAll``1">
            <summary>
            Gets all behaviors with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="TType">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>An instances of behavior.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BehaviorManagerComponent.IsExist``1">
            <summary>
            Indicates that the specified <see cref="T:System.Type"/> of behavior exists in the collection.
            </summary>
            <typeparam name="TType">The specified behavior <see cref="T:System.Type"/>.</typeparam>
            <returns><c>True</c> if the specified behavior exist; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BehaviorManagerComponent.Add``2">
            <summary>
            Adds the specified behavior.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BehaviorManagerComponent.Add``1(``0)">
            <summary>
            Adds the specified behavior.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BehaviorManagerComponent.Remove``1">
            <summary>
            Removes the specified behavior.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.BehaviorManagerComponent.IsSingle">
            <summary>
            Indicates whether the component is unique.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.BehaviorManagerComponent.ComponentType">
            <summary>
            Gets the component type. Need to find a component in the container.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.BehaviorManagerComponent.CopyBehavior">
            <summary>
            Indicates that the behaviors will be copy after call method clone.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.BindingActivatorComponent">
            <summary>
                Represents the base component that activates bindings.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.Components.IBindingActivatorComponent">
            <summary>
                Represents the interface that activate bindings.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingActivatorComponent.AddConverter(MugenInjection.Interface.IConverter)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.IConverter"/>.
            </summary>
            <param name="converter">The specified <see cref="T:MugenInjection.Interface.IConverter"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingActivatorComponent.RemoveConverter(MugenInjection.Interface.IConverter)">
            <summary>
            Removes the specified <see cref="T:MugenInjection.Interface.IConverter"/>.
            </summary>
            <param name="converter">The specified <see cref="T:MugenInjection.Interface.IConverter"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingActivatorComponent.GetConverter``1">
            <summary>
            Gets a converter use the specified type.
            </summary>
            <typeparam name="T">The specified type.</typeparam>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IConverter"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingActivatorComponent.Activate(MugenInjection.Interface.IBinding,MugenInjection.Interface.IBindingContext)">
            <summary>
                Activates the specified <see cref="T:MugenInjection.Interface.IBinding"/> with specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="binding">
                The specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </param>
            <param name="bindingContext">
                The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </param>
            <returns>An instance of service.</returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingActivatorComponent.GetServiceType(MugenInjection.Interface.IBindingContext,System.Type@,System.Func{System.Object,System.Object}@)">
            <summary>
                Identifies the object type and create a converter for result object.
            </summary>
            <param name="context">The <see cref="T:MugenInjection.Interface.IBindingContext"/> to identify.</param>
            <param name="originalType">The original type of service. </param>
            <param name="converterAction">A method to convert object(s).</param>
            <returns>A service type value.</returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingActivatorComponent.Inject``1(``0@,MugenInjection.Interface.IBindingContext)">
            <summary>
            Injects values into properties, fields, methods in the specified object.
            </summary>
            <param name="target">The specified target for inject.</param>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingActivatorComponent.GetParameters(System.Reflection.MethodBase,MugenInjection.Interface.IBindingContext)">
            <summary>
                Gets parameters for the specified <see cref="T:System.Reflection.MethodBase"/>.
            </summary>
            <param name="methodBase">
                The specified <see cref="T:System.Reflection.MethodBase"/>.
            </param>
            <param name="bindingContext">
                The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </param>
            <returns>An instances of services.</returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingActivatorComponent.GetParameter(System.Reflection.MemberInfo,MugenInjection.Interface.IBindingContext)">
            <summary>
                Gets parameter for the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>.
            </param>
            <param name="bindingContext">
                The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </param>
            <returns>An instance of service.</returns>
        </member>
        <member name="P:MugenInjection.Interface.Components.IBindingActivatorComponent.ActivatorToInject">
            <summary>
                Gets or sets a <see cref="T:MugenInjection.Interface.IActivator"/> to inject values into properties, fields, methods in the specified object.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.Components.IBindingActivatorComponent.Converters">
            <summary>
            Gets the converters.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.BindingActivatorComponent"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.#ctor(System.Collections.Generic.IEnumerable{MugenInjection.Interface.IConverter})">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.BindingActivatorComponent"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.OnLoad">
            <summary>
            Occurs on load component.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.OnUnload">
            <summary>
            Occurs on unload component.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.Clone">
            <summary>
                Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
                A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.ConverterOnSupportedTypeChanged(MugenInjection.Interface.IConverter,MugenInjection.Infrastructure.TypeChangedAction,System.Type)">
            <summary>
                Occurs when the <c>SupportedTypes</c> changed.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.AddConverter(MugenInjection.Interface.IConverter)">
            <summary>
                Adds the specified <see cref="T:MugenInjection.Interface.IConverter"/>.
            </summary>
            <param name="converter">
                The specified <see cref="T:MugenInjection.Interface.IConverter"/>.
            </param>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.RemoveConverter(MugenInjection.Interface.IConverter)">
            <summary>
                Removes the specified <see cref="T:MugenInjection.Interface.IConverter"/>.
            </summary>
            <param name="converter">
                The specified <see cref="T:MugenInjection.Interface.IConverter"/>.
            </param>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.GetConverter``1">
            <summary>
            Gets a converter use the specified type.
            </summary>
            <typeparam name="T">The specified type.</typeparam>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IConverter"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.Activate(MugenInjection.Interface.IBinding,MugenInjection.Interface.IBindingContext)">
            <summary>
                Activates the specified <see cref="T:MugenInjection.Interface.IBinding"/> with specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="binding">
                The specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </param>
            <param name="bindingContext">
                The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </param>
            <returns>An instance of service.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.GetServiceType(MugenInjection.Interface.IBindingContext,System.Type@,System.Func{System.Object,System.Object}@)">
            <summary>
                Identifies the object type and create a converter for result object.
            </summary>
            <param name="context">The <see cref="T:MugenInjection.Interface.IBindingContext"/> to identify.</param>
            <param name="originalType">The original type of service. </param>
            <param name="converterAction">A method to convert object(s).</param>
            <returns>A service type value.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.Inject``1(``0@,MugenInjection.Interface.IBindingContext)">
            <summary>
                Injects values into properties, fields, methods in the specified object.
            </summary>
            <param name="target">The specified target for inject.</param>
            <param name="bindingContext">
                The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </param>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.GetParameters(System.Reflection.MethodBase,MugenInjection.Interface.IBindingContext)">
            <summary>
                Gets parameters for the specified <see cref="T:System.Reflection.MethodBase"/>.
            </summary>
            <param name="methodBase">
                The specified <see cref="T:System.Reflection.MethodBase"/>.
            </param>
            <param name="bindingContext">
                The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </param>
            <returns>An instances of services.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.GetParameter(System.Reflection.MemberInfo,MugenInjection.Interface.IBindingContext)">
            <summary>
                Gets parameter for the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>.
            </param>
            <param name="bindingContext">
                The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </param>
            <returns>An instance of service.</returns>
        </member>
        <member name="P:MugenInjection.Core.Components.BindingActivatorComponent.IsSingle">
            <summary>
                Indicates whether the component is unique.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.BindingActivatorComponent.ComponentType">
            <summary>
                Gets the component type. Need to find a component in the container.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.BindingActivatorComponent.ActivatorToInject">
            <summary>
                Gets or sets a <see cref="T:MugenInjection.Interface.IActivator"/> to inject values into properties, fields, methods in the specified object.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.BindingActivatorComponent.Converters">
            <summary>
                Gets the converters.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingActivatorComponent.ServiceTypeCache.#ctor(MugenInjection.Interface.IConverter,System.Func{System.Object,System.Object},System.Type,MugenInjection.Infrastructure.ServiceType)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.BindingActivatorComponent.ServiceTypeCache"/> class.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.BindingManagerComponent">
            <summary>
            Represents the base class for components that manages the <see cref="T:MugenInjection.Interface.IBinding"/>s.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.Components.IBindingManagerComponent">
            <summary>
             Represents the base interface for components that manages the <see cref="T:MugenInjection.Interface.IBinding"/>s.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingManagerComponent.FindBinding(MugenInjection.Interface.IBindingContext)">
            <summary>
            Searches for a <see cref="T:MugenInjection.Interface.IBinding"/> satisfying the specified a <see cref="T:MugenInjection.Interface.IBindingContext"/>
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/> for search.</param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingManagerComponent.FindAllBinding(System.Type)">
            <summary>
            Searches all <see cref="T:MugenInjection.Interface.IBinding"/>s satisfying the specified a <see cref="T:System.Type"/>
            </summary>
            <param name="service">The specified <see cref="T:System.Type"/> for search.</param>
            <returns>A series instances of <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingManagerComponent.FindAllBinding(MugenInjection.Interface.IBindingContext)">
            <summary>
            Searches all <see cref="T:MugenInjection.Interface.IBinding"/>s satisfying the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/> for search.</param>
            <returns>A series instances of <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingManagerComponent.GetPriorityBinding(MugenInjection.Interface.IBindingContext,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IBinding})">
            <summary>
            Selects binding with high priority (check duplicate bindings).
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="bindings">Specifid <see cref="T:System.Collections.Generic.IEnumerator`1"/> for select <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.Components.IBindingManagerComponent.CreateSelfBindable(System.Type,System.Func{MugenInjection.Interface.IActivator},System.Func{MugenInjection.Interface.IConstructorResolver},System.Boolean)">
            <summary>
            Creates a self bindable <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="service">The specified <see cref="T:System.Type"/> to create a self bindable binding.</param>
            <param name="activator">The specified factory to create <see cref="T:MugenInjection.Interface.IActivator"/>. </param>
            <param name="constructorResolver">The specified factory to create <see cref="T:MugenInjection.Interface.IConstructorResolver"/>. </param>
            <param name="useCache"><c>True</c> - use cache to create an <see cref="T:MugenInjection.Interface.IBinding"/>; otherwise <c>false</c>.</param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="P:MugenInjection.Interface.Components.IBindingManagerComponent.IsCacheBinding">
            <summary>
            Gets or sets the value, if <c>true</c> cache bindings, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingManagerComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.BindingManagerComponent"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingManagerComponent.FindBinding(MugenInjection.Interface.IBindingContext)">
            <summary>
            Searches for a <see cref="T:MugenInjection.Interface.IBinding"/> satisfying the specified a <see cref="T:MugenInjection.Interface.IBindingContext"/>
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/> for search.</param>
            <returns>Found a <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingManagerComponent.FindAllBinding(System.Type)">
            <summary>
            Searches all <see cref="T:MugenInjection.Interface.IBinding"/>s satisfying the specified a <see cref="T:System.Type"/>
            </summary>
            <param name="service">The specified <see cref="T:System.Type"/> for search.</param>
            <returns>Found a <see cref="T:MugenInjection.Interface.IBinding"/>s.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingManagerComponent.FindAllBinding(MugenInjection.Interface.IBindingContext)">
            <summary>
            Searches all <see cref="T:MugenInjection.Interface.IBinding"/>s satisfying the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/> for search.</param>
            <returns>Found a <see cref="T:MugenInjection.Interface.IBinding"/>s.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingManagerComponent.GetPriorityBinding(MugenInjection.Interface.IBindingContext,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IBinding})">
            <summary>
            Selects binding with high priority (check duplicate bindings).
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="bindings">Specifid <see cref="T:System.Collections.Generic.IEnumerator`1"/> for select <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
            <returns>Selected a <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingManagerComponent.CreateSelfBindable(System.Type,System.Func{MugenInjection.Interface.IActivator},System.Func{MugenInjection.Interface.IConstructorResolver},System.Boolean)">
            <summary>
            Creates a self bindable <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="service">The specified <see cref="T:System.Type"/> for self bindable.</param>
            <param name="activator">The specified factory to create <see cref="T:MugenInjection.Interface.IActivator"/>. </param>
            <param name="constructorResolver">The specified factory to create <see cref="T:MugenInjection.Interface.IConstructorResolver"/>. </param>
            <param name="useCache"><c>True</c> - use cache for create a <see cref="T:MugenInjection.Interface.IBinding"/>; otherwise <c>false</c>.</param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingManagerComponent.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingManagerComponent.OnLoad">
            <summary>
            Occurs on load component.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingManagerComponent.OnUnload">
            <summary>
            Occurs on unload component.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.BindingManagerComponent.IsCacheBinding">
            <summary>
            Gets or sets the value, if <c>true</c> cache bindings, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.BindingManagerComponent.IsSingle">
            <summary>
            Indicates whether the component is unique.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.BindingManagerComponent.ComponentType">
            <summary>
            Returns the component type. Need to find a component in the container.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.AdapterDynamicConverter">
            <summary>
                Represents the dynamic converter to adapt a specific service.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IDynamicConverter">
            <summary>
                Represents the interface that can convert types when binding activating.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IDynamicConverter.CanResolve(MugenInjection.Interface.IBindingContext,System.Type@)">
            <summary>
                Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext">
                The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </param>
            <param name="convertType">The type to convert.</param>
            <returns>
                <c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MugenInjection.Interface.IDynamicConverter.Resolve(MugenInjection.Infrastructure.ConverterContext)">
            <summary>
                Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="context">
                The specified <see cref="T:MugenInjection.Infrastructure.ConverterContext"/>.
            </param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="P:MugenInjection.Interface.IDynamicConverter.Services">
            <summary>
                Gets the service types.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.AdapterDynamicConverter.#ctor(System.Type,System.Type,System.Func{MugenInjection.Interface.IBindingContext,System.Object,System.Object},MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.AdapterDynamicConverter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.AdapterDynamicConverter.CanResolve(MugenInjection.Interface.IBindingContext,System.Type@)">
            <summary>
                Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext">
                The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </param>
            <param name="convertType">The type to convert.</param>
            <returns>
                <c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MugenInjection.Core.Components.AdapterDynamicConverter.Resolve(MugenInjection.Infrastructure.ConverterContext)">
            <summary>
                Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="context">
                The specified <see cref="T:MugenInjection.Infrastructure.ConverterContext"/>.
            </param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="P:MugenInjection.Core.Components.AdapterDynamicConverter.TypeFrom">
            <summary>
                Gets the type from.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.AdapterDynamicConverter.TypeTo">
            <summary>
                Gets the type to.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.AdapterDynamicConverter.Services">
            <summary>
                Gets the service types.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.SettingsWrapperConverter">
            <summary>
                Represents the class that can convert binding settings.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.ConverterBase">
            <summary>
                Represents the base class that implements <see cref="T:MugenInjection.Interface.IConverter"/> interface.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IConverter">
            <summary>
                Represents the interface that can convert types when binding activating.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IConverter.TryConvert(MugenInjection.Interface.IBindingContext,System.Type@,System.Func{System.Object,System.Object}@)">
            <summary>
                Tries to convert instance.
            </summary>
            <param name="bindingContext">The specified type to convert.</param>
            <param name="originalType">The result of convert.</param>
            <param name="convertAction">An delegate to convert instance.</param>
            <returns>
                If <c>true</c> can be converted; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MugenInjection.Interface.IConverter.ClearCache">
            <summary>
            Clears cache, if any.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IConverter.ServiceType">
            <summary>
                Gets the service type of converter.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IConverter.Priority">
            <summary>
                Gets the priority.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IConverter.SupportedTypes">
            <summary>
                Gets the supported types.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IConverter.SupportedTypeChanged">
            <summary>
                Occurs when the <c>SupportedTypes</c> changed.
            </summary>
        </member>
        <member name="F:MugenInjection.Core.Components.ConverterBase.NoCacheConverterKey">
            <summary>
                 Represents the key key for no cache binding.
            </summary>
        </member>
        <member name="F:MugenInjection.Core.Components.ConverterBase.DefaultPriority">
            <summary>
            Gets the default priority of converter.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.ConverterBase.#ctor(System.Int32,MugenInjection.Infrastructure.ServiceType)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.ConverterBase"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.ConverterBase.TryConvert(MugenInjection.Interface.IBindingContext,System.Type@,System.Func{System.Object,System.Object}@)">
            <summary>
                Tries to convert instance.
            </summary>
            <param name="bindingContext">The specified type to convert.</param>
            <param name="originalType">The result of convert.</param>
            <param name="convertAction">An delegate to convert instance.</param>
            <returns>
                If <c>true</c> can be converted; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MugenInjection.Core.Components.ConverterBase.ClearCache">
            <summary>
            Clears cache, if any.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.ConverterBase.TryConvertInternal(MugenInjection.Interface.IBindingContext,System.Type@,System.Func{System.Object,System.Object}@)">
            <summary>
                Tries to convert instance.
            </summary>
            <param name="bindingContext">The specified type to convert.</param>
            <param name="originalType">The result of convert.</param>
            <param name="convertAction">A delegate to convert instance.</param>
            <returns>
                If <c>true</c> can be converted; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MugenInjection.Core.Components.ConverterBase.ClearCacheInternal">
            <summary>
            Clears cache, if any.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.ConverterBase.SetNoCacheKey(MugenInjection.Interface.IBindingContext)">
            <summary>
            Sets the no cache key to <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="context">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.Components.ConverterBase.GetCacheResult(MugenInjection.Interface.IBindingContext)">
            <summary>
            Gets the supported result using <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="context">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of <see cref="T:MugenInjection.Infrastructure.ConverterResult"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.ConverterBase.OnSupportedTypeChanged(MugenInjection.Infrastructure.TypeChangedAction,System.Type)">
            <summary>
                Raises the <c>SupportedTypeChanged</c> event.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.ConverterBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:MugenInjection.Core.Components.ConverterBase.IsUseBindingContextToGetSetResult">
            <summary>
            Gets or sets the value that indicates that the converter use an <see cref="T:MugenInjection.Interface.IBindingContext"/> to get or set result.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.ConverterBase.ServiceType">
            <summary>
                Gets the service type of converter.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.ConverterBase.Priority">
            <summary>
                Gets the priority.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.ConverterBase.SupportedTypes">
            <summary>
                Gets the supported types.
            </summary>
        </member>
        <member name="E:MugenInjection.Core.Components.ConverterBase.SupportedTypeChanged">
            <summary>
                Occurs when the <c>SupportedTypes</c> changed.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.SettingsWrapperConverter.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.BindingSettingsConverter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.SettingsWrapperConverter.SettingWrapperTypesOnAdded(System.Type)">
            <summary>
                Occurs when settings type was added.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.SettingsWrapperConverter.SettingWrapperTypesOnChanged(System.Type,System.Type)">
            <summary>
                Occurs when settings type was changed.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.SettingsWrapperConverter.SettingWrapperTypesOnRemoved(System.Type)">
            <summary>
                Occurs when settings type was removed.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.SettingsWrapperConverter.ConvertToSettingWrapper(System.Object,System.Type,MugenInjection.Delegates.ActivatorDelegate)">
            <summary>
                Converts the specified object to setting wrapper.
            </summary>
            <param name="inputValue">
                The specified object to convert, by default is always <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </param>
            <param name="originalType">The specified type of object.</param>
            <param name="createWithSettingsWrapper">The specified delegate to create managed-wrapper.</param>
            <returns>An instance of managed-wrapper.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.SettingsWrapperConverter.TryConvertInternal(MugenInjection.Interface.IBindingContext,System.Type@,System.Func{System.Object,System.Object}@)">
            <summary>
                Tries to convert instance.
            </summary>
            <param name="bindingContext">The specified type to convert.</param>
            <param name="originalType">The result of convert.</param>
            <param name="convertAction">A delegate to convert instance.</param>
            <returns>
                If <c>true</c> can be converted; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:MugenInjection.Core.Components.SettingsWrapperConverter.SettingWrapperTypes">
            <summary>
                Gets the collection of supported settings types.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.SettingsWrapperConverter.SupportedTypes">
            <summary>
                Gets the supported types.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.BindingSettingsConverter">
            <summary>
                Represents the class that can convert binding settings.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingSettingsConverter.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.BindingSettingsConverter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingSettingsConverter.ConvertToSettings(System.Object)">
            <summary>
                Converts an object to an <see cref="T:MugenInjection.Interface.ISettings"/>.
            </summary>
            <param name="inputValue">
                The specified object to convert, by default is always <see cref="T:MugenInjection.Infrastructure.ConverterContext"/>.
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Interface.ISettings"/>.
            </returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingSettingsConverter.ConvertToDictionary(System.Object)">
            <summary>
                Converts an object to an <see cref="T:MugenInjection.Interface.ISettings"/>.
            </summary>
            <param name="inputValue">
                The specified object to convert, by default is always <see cref="T:MugenInjection.Infrastructure.ConverterContext"/>.
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Interface.ISettings"/>.
            </returns>
        </member>
        <member name="M:MugenInjection.Core.Components.BindingSettingsConverter.TryConvertInternal(MugenInjection.Interface.IBindingContext,System.Type@,System.Func{System.Object,System.Object}@)">
            <summary>
                Tries to convert instance.
            </summary>
            <param name="bindingContext">The specified type to convert.</param>
            <param name="originalType">The result of convert.</param>
            <param name="convertAction">A delegate to convert instance.</param>
            <returns>
                If <c>true</c> can be converted; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:MugenInjection.Core.Components.BindingSettingsConverter.SupportedTypes">
            <summary>
                Gets the supported types.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.CollectionConverter">
            <summary>
                Represents the class that can convert collection types.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.CollectionConverter.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.CollectionConverter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.CollectionConverter.ConvertToArray(System.Type,System.Type,System.Object)">
            <summary>
                Converts an object(s) to a array.
            </summary>
            <param name="arrayType">The specified type of array.</param>
            <param name="elementType">The specified type of element.</param>
            <param name="value">The specified object to convert.</param>
            <returns>An instance of collection.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.CollectionConverter.ConvertToCollection(System.Type,System.Type,MugenInjection.Delegates.ActivatorDelegate,MugenInjection.Delegates.InvokeMethodDelegate{System.Object},System.Object)">
            <summary>
                Converts an object(s) to a collection
            </summary>
            <param name="collectionType">The specified type of collection.</param>
            <param name="elementType">The specified type of element.</param>
            <param name="createCollection">The specified delegate to create collection.</param>
            <param name="addMethod">The specified delegate to add element to collection.</param>
            <param name="value">The specified object to convert.</param>
            <returns>An instance of collection.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.CollectionConverter.TryConvertInternal(MugenInjection.Interface.IBindingContext,System.Type@,System.Func{System.Object,System.Object}@)">
            <summary>
                Tries to convert instance.
            </summary>
            <param name="bindingContext">The specified type to convert from.</param>
            <param name="originalType">The type to converted to.</param>
            <param name="convertAction">An delegate to convert instance.</param>
            <returns>
                If <c>true</c> can be converted; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:MugenInjection.Core.Components.CollectionConverter.UseParentToResolveCollection">
            <summary>
                Gets or sets value, if <c>true</c> use parent to resolve collection type values; otherwise <c>false</c>.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.CollectionConverter.SupportedTypes">
            <summary>
                Gets the supported types.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.DecoratorDynamicConverter">
            <summary>
                Represents the dynamic converter to decorate a specific service.
            </summary>
        </member>
        <member name="F:MugenInjection.Core.Components.DecoratorDynamicConverter.DecoratedKey">
            <summary>
            Gets the key that indicates that context was decorated.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.DecoratorDynamicConverter.#ctor(System.Type,System.Func{MugenInjection.Interface.IBindingContext,System.Object,System.Object},MugenInjection.Delegates.CanResolveBindingDelegate)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.DecoratorDynamicConverter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.DecoratorDynamicConverter.CanResolve(MugenInjection.Interface.IBindingContext,System.Type@)">
            <summary>
                Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext">
                The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </param>
            <param name="convertType">The type to convert.</param>
            <returns>
                <c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MugenInjection.Core.Components.DecoratorDynamicConverter.Resolve(MugenInjection.Infrastructure.ConverterContext)">
            <summary>
                Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="context">
                The specified <see cref="T:MugenInjection.Infrastructure.ConverterContext"/>.
            </param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="P:MugenInjection.Core.Components.DecoratorDynamicConverter.ServiceToDecorate">
            <summary>
                Gets the service to decorate.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.DecoratorDynamicConverter.Services">
            <summary>
                Gets the service types.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.DynamicConverterProvider">
            <summary>
                Represents the interface that can convert types when binding activating, this converter not support cache it used for dynamic converters, like adapters or decorators.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.DynamicConverterProvider.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.DynamicConverterProvider"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.DynamicConverterProvider.AddConverter(MugenInjection.Interface.IDynamicConverter)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.IDynamicConverter"/>.
            </summary>
            <param name="converter">The specified <see cref="T:MugenInjection.Interface.IDynamicConverter"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.Components.DynamicConverterProvider.RemoveConverter(MugenInjection.Interface.IDynamicConverter)">
            <summary>
            Removes the specified <see cref="T:MugenInjection.Interface.IDynamicConverter"/>.
            </summary>
            <param name="converter">The specified <see cref="T:MugenInjection.Interface.IDynamicConverter"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.Components.DynamicConverterProvider.GetAll``1(System.Predicate{``0})">
            <summary>
            Gets all converters with the specified type.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.DynamicConverterProvider.FindConverter(MugenInjection.Interface.IBindingContext,System.Type@)">
            <summary>
            Searches for a <see cref="T:MugenInjection.Interface.IDynamicConverter"/> satisfying the specified a <see cref="T:MugenInjection.Interface.IBindingContext"/>
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/> for search.</param>
            <param name="convertType">The type to convert.</param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IDynamicConverter"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.DynamicConverterProvider.TryConvertInternal(MugenInjection.Interface.IBindingContext,System.Type@,System.Func{System.Object,System.Object}@)">
            <summary>
                Tries to convert instance.
            </summary>
            <param name="bindingContext">The specified type to convert from.</param>
            <param name="originalType">The type to converted to.</param>
            <param name="convertAction">An delegate to convert instance.</param>
            <returns>
                If <c>true</c> can be converted; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:MugenInjection.Core.Components.DynamicConverterProvider.DynamicConverters">
            <summary>
                Gets the list of dynamic converters.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.DynamicConverterProvider.SupportedTypes">
            <summary>
                Gets the supported types.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.FactoryAndLazyConverter">
            <summary>
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.FactoryAndLazyConverter.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.FactoryAndLazyConverter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.FactoryAndLazyConverter.FactoryTypesOnAdded(System.Type)">
            <summary>
                Occurs when factory type was added.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.FactoryAndLazyConverter.FactoryTypesOnChanged(System.Type,System.Type)">
            <summary>
                Occurs when factory type was changed.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.FactoryAndLazyConverter.FactoryTypesOnRemoved(System.Type)">
            <summary>
                Occurs when factory type was removed.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.FactoryAndLazyConverter.LazyTypesOnAdded(System.Type)">
            <summary>
                Occurs when lazy type was added.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.FactoryAndLazyConverter.LazyTypesOnChanged(System.Type,System.Type)">
            <summary>
                Occurs when lazy type was changed.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.FactoryAndLazyConverter.LazyTypesOnRemoved(System.Type)">
            <summary>
                Occurs when lazy type was removed.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.FactoryAndLazyConverter.IsFactory(System.Type,System.Type@)">
            <summary>
                Determines whether the specified type is a factory.
            </summary>
            <param name="serviceType">The specified type.</param>
            <param name="originalServiceType">The original service type, if is a lfactory.</param>
            <returns>
                If <c>true</c> is a factory; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MugenInjection.Core.Components.FactoryAndLazyConverter.IsLazyProxy(System.Type,System.Type@,System.Reflection.ConstructorInfo@)">
            <summary>
                Determines whether the specified type is a lazy-proxy.
            </summary>
            <param name="serviceType">The specified type.</param>
            <param name="originalServiceType">The original service type, if is a lazy-proxy.</param>
            <param name="constructor">The constructor to activate lazy-proxy, if is a lazy-proxy.</param>
            <returns>
                If <c>true</c> is a lazy-proxy; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MugenInjection.Core.Components.FactoryAndLazyConverter.ConvertToFunc(System.Object,System.Type,System.Type)">
            <summary>
                Converts the specified object to factory-proxy.
            </summary>
            <param name="inputValue">
                The specified object to convert, by default is always <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </param>
            <param name="factoryType">The specified type of factory.</param>
            <param name="originalType">The specified type of object.</param>
            <returns>An instance of managed-wrapper.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.FactoryAndLazyConverter.ConvertToLazy(System.Object,System.Type,System.Type,MugenInjection.Delegates.ActivatorDelegate,System.Type)">
            <summary>
                Converts the specified object to lazy-proxy.
            </summary>
            <param name="inputValue">
                The specified object to convert, by default is always <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </param>
            <param name="lazyType">The specified type of lazy.</param>
            <param name="originalType">The specified type of object.</param>
            <param name="createLazyProxy">The specified delegate to create lazy-proxy.</param>
            <param name="delegateType">The specified delegate type.</param>
            <returns>An instance of lazy-proxy.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.FactoryAndLazyConverter.TryConvertInternal(MugenInjection.Interface.IBindingContext,System.Type@,System.Func{System.Object,System.Object}@)">
            <summary>
                Tries to convert instance.
            </summary>
            <param name="bindingContext">The specified type to convert from.</param>
            <param name="originalType">The type to converted to.</param>
            <param name="convertAction">An delegate to convert instance.</param>
            <returns>
                If <c>true</c> can be converted; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MugenInjection.Core.Components.FactoryAndLazyConverter.ClearCacheInternal">
            <summary>
            Clears cache, if any.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.FactoryAndLazyConverter.IsCacheContextWithBinding">
            <summary>
            Gets or sets value that responsible to cache context with binding.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.FactoryAndLazyConverter.FactoryDelegateTypes">
            <summary>
                Gets types of factory delegates.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.FactoryAndLazyConverter.LazyDelegateTypes">
            <summary>
              Gets types of lazy delegates.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.FactoryAndLazyConverter.SupportedTypes">
            <summary>
                Gets the supported types.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.FactoryAndLazyConverter.FactoryDelegateCache.Equals(MugenInjection.Core.Components.FactoryAndLazyConverter.FactoryDelegateCache)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.
                            </param>
        </member>
        <member name="M:MugenInjection.Core.Components.FactoryAndLazyConverter.FactoryDelegateCache.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. 
                            </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.
                            </exception>
        </member>
        <member name="M:MugenInjection.Core.Components.FactoryAndLazyConverter.FactoryDelegateCache.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:MugenInjection.Core.Components.FactoryAndLazyConverter.FactoryDelegateCache.#ctor(System.Type,MugenInjection.Interface.IBindingContext,MugenInjection.Interface.IBinding)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.FactoryAndLazyConverter.FactoryDelegateCache"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.FactoryAndLazyConverter.FactoryResolve.#ctor(MugenInjection.Infrastructure.ConverterContext)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.FactoryAndLazyConverter.FactoryResolve"/> class.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.InjectorWrapperConverter">
            <summary>
                Represents the class that can convert to injector wrapper.
            </summary>
        </member>
        <member name="F:MugenInjection.Core.Components.InjectorWrapperConverter.ManagedWrapperConstructorTypes">
            <summary>
                Gets the default constructor types for a managed wrappers.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.InjectorWrapperConverter.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.InjectorWrapperConverter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.InjectorWrapperConverter.InjectorWrapperTypesOnAdded(System.Type)">
            <summary>
                Occurs when managed type was added.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.InjectorWrapperConverter.InjectorWrapperTypesOnChanged(System.Type,System.Type)">
            <summary>
                Occurs when managed type was changed.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.InjectorWrapperConverter.InjectorWrapperTypesOnRemoved(System.Type)">
            <summary>
                Occurs when managed type was removed.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.InjectorWrapperConverter.ConvertToInjectorWrapper(System.Object,System.Type,MugenInjection.Delegates.ActivatorDelegate)">
            <summary>
                Converts the specified object to injector wrapper.
            </summary>
            <param name="inputValue">
                The specified object to convert, by default is always <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </param>
            <param name="originalType">The specified type of object.</param>
            <param name="createManagedWrapper">The specified delegate to create managed-wrapper.</param>
            <returns>An instance of managed-wrapper.</returns>
        </member>
        <member name="M:MugenInjection.Core.Components.InjectorWrapperConverter.TryConvertInternal(MugenInjection.Interface.IBindingContext,System.Type@,System.Func{System.Object,System.Object}@)">
            <summary>
                Tries to convert instance.
            </summary>
            <param name="bindingContext">The specified type to convert from.</param>
            <param name="originalType">The type to converted to.</param>
            <param name="convertAction">An delegate to convert instance.</param>
            <returns>
                If <c>true</c> can be converted; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:MugenInjection.Core.Components.InjectorWrapperConverter.InjectorWrapperTypes">
            <summary>
                Gets the collection of supported managed types.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.InjectorWrapperConverter.SupportedTypes">
            <summary>
                Gets the supported types.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.SimpleConverter">
            <summary>
                Represents the converter to convert all types in direct injector call.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.SimpleConverter.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.SimpleConverter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.SimpleConverter.TryConvertInternal(MugenInjection.Interface.IBindingContext,System.Type@,System.Func{System.Object,System.Object}@)">
            <summary>
                Tries to convert instance.
            </summary>
            <param name="bindingContext">The specified type to convert from.</param>
            <param name="originalType">The type to convert to.</param>
            <param name="convertAction">An delegate to convert instance.</param>
            <returns>
                If <c>true</c> can be converted; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:MugenInjection.Core.Components.SimpleConverter.SupportedTypes">
            <summary>
                Gets the supported types.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.Components.ModuleManagerComponent">
            <summary>
            The base class for components for the automatically finds and loads modules from assemblies.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.Components.IModuleManagerComponent">
            <summary>
            The base interface for components for the automatically finds and loads modules from assemblies.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Components.IModuleManagerComponent.LoadModules(System.Reflection.Assembly[])">
            <summary>
            Loads modules defined in the specified assemblies.
            </summary>
            <param name="assemblies">The assemblies to search.</param>
        </member>
        <member name="M:MugenInjection.Interface.Components.IModuleManagerComponent.UpdateAutoLoadModuleIfNeed">
            <summary>
            Loads "auto modules" defined in the loaded assemblies.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Core.Components.ModuleManagerComponent"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.LoadModules(System.Reflection.Assembly[])">
            <summary>
            Loads modules defined in the specified assemblies.
            </summary>
            <param name="assemblies">The assemblies to search.</param>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.UpdateAutoLoadModuleIfNeed">
            <summary>
            Loads "auto modules" defined in the loaded assemblies.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.GetAssemblies">
            <summary>
            Gets all the <see cref="T:System.Reflection.Assembly"/> for loads.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.LoadRequiredModule">
            <summary>
            Loads required "auto modules" defined in the loaded assemblies.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.LoadModules(System.Collections.Generic.IList{System.Collections.Generic.IList{System.Type}},System.Type)">
            <summary>
            Loads modules Loads modules into an <see cref="T:MugenInjection.Interface.IInjector"/>. If the modules are loaded skips them.
            </summary>
            <param name="types"></param>
            <param name="attributeType"></param>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.OnLoad">
            <summary>
            Occurs on load component.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.Components.ModuleManagerComponent.OnUnload">
            <summary>
            Occurs on unload component.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.ModuleManagerComponent.IsSingle">
            <summary>
            Indicates whether the component is unique.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.Components.ModuleManagerComponent.ComponentType">
            <summary>
            Returns the component type. Need to find a component in the container.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.DefaultInjectorSetting">
            <summary>
            The default implementation of <see cref="T:MugenInjection.Interface.IInjectorSettings"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IInjectorSettings">
            <summary>
            Contains configuration options for specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorSettings.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.ThrowErrorForNullableBinding">
            <summary>
            Gets or sets value, if <c>true</c>Throw error if binding provider return null result; otherwise, <c>false</c>. (Default is <c>true</c>).
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.UseParentToResolve">
            <summary>
            Gets or sets value, if <c>false</c> and the binding is not found in the current container, but it found in the parent, activate the binding in the current container; otherwise <c>true</c>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.IsAutoLoadModuleEnabled">
            <summary>
            Gets or sets value that indicates whether the automatic loading of the module. (Default is <c>true</c>).
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.AttributeForAutoLoadModule">
            <summary>
            Gets or sets an attribute that used to automatically load the <see cref="T:MugenInjection.Core.InjectorModule"/>. (Default <see cref="T:MugenInjection.Attributes.AutoLoadModuleAttribute"/>)
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.AttributeForInject">
            <summary>
            Gets or sets an attribute specifies where to use injection. (Default <see cref="T:MugenInjection.Attributes.InjectAttribute"/>)
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.DefaultActivatorFactory">
            <summary>
            Gets or sets a factory to create <see cref="T:MugenInjection.Interface.IActivator"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.DefaultConstructorResolverFactory">
            <summary>
            Gets or sets a factory to create <see cref="T:MugenInjection.Interface.IConstructorResolver"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorSettings.DefaultScopeLifecycleFactory">
            <summary>
            Gets or sets a factory to create <see cref="T:MugenInjection.Scope.ScopeLifecycleBase"/>. Default is <see cref="T:MugenInjection.Scope.TransientScopeLifecycle"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IInjectorSettings.SettingChanged">
            <summary>
            Occurs when a setting value changes.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.DefaultInjectorSetting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Core.DefaultInjectorSetting"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.DefaultInjectorSetting.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.ThrowErrorForNullableBinding">
            <summary>
            Gets or sets value, if <c>true</c>Throw error if binding provider return null result; otherwise, <c>false</c>. (Default is <c>true</c>).
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.UseParentToResolve">
            <summary>
            Gets or sets value, if <c>false</c> if the binding is not found in the current container, but is found in the parent, activate the binding in the current container; otherwise <c>true</c>. (Default is <c>true</c>).
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.IsAutoLoadModuleEnabled">
            <summary>
            Gets or sets value that indicates whether the automatic loading of the module. (Default is <c>true</c>).
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.AttributeForAutoLoadModule">
            <summary>
            Gets or sets an attribute that used to automatically load the <see cref="T:MugenInjection.Core.InjectorModule"/>. (Default <see cref="T:MugenInjection.Attributes.AutoLoadModuleAttribute"/>)
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.AttributeForInject">
            <summary>
            Gets or sets an attribute specifies where to use injection. (Default <see cref="T:MugenInjection.Attributes.InjectAttribute"/>)
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.DefaultActivatorFactory">
            <summary>
            Gets or sets a factory to create <see cref="T:MugenInjection.Interface.IActivator"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.DefaultConstructorResolverFactory">
            <summary>
            Gets or sets a factory to create <see cref="T:MugenInjection.Interface.IConstructorResolver"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.DefaultInjectorSetting.DefaultScopeLifecycleFactory">
            <summary>
            Gets or sets a factory to create <see cref="T:MugenInjection.Scope.ScopeLifecycleBase"/>. Default is <see cref="T:MugenInjection.Scope.TransientScopeLifecycle"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Core.DefaultInjectorSetting.SettingChanged">
            <summary>
            Occurs when a setting value changes.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.InjectorBase">
            <summary>
            The base implementation of an <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IInjector">
            <summary>
            Represents the ioc container, that can create objects of all kinds.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IInjectorResolver">
            <summary>
            Provides a path to resolve instances.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorResolver.CreateContext(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates the <see cref="T:MugenInjection.Interface.IBindingContext"/> for the current <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="service">The specifed service <see cref="T:System.Type"/>.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo">The specified <see cref="T:System.Reflection.ParameterInfo"/> when injected specified service.</param>
            <param name="parameters">The specified parameters for service.</param>
            <param name="specialParameters">The special parameters for resolve specified service.</param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IBindingContext"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorResolver.Inject``1(``0@,MugenInjection.Interface.IBindingContext)">
            <summary>
            Injects values into properties, fields, methods in the specified object.
            </summary>
            <param name="target">The specified target for inject.</param>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorResolver.CanResolve(MugenInjection.Interface.IBindingContext,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext"> The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="searchInParent">If set to <c>true</c> search in parent bindings.</param>
            <param name="includeImplicitBindings">If set to <c>false</c> implicit bindings are ignored.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorResolver.Resolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolves an instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorResolver.ResolveAll(MugenInjection.Interface.IBindingContext,System.Boolean)">
            <summary>
            Resolves all instances for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="useParentToResolve">If <c>true</c> also use parent bindings to resolve.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorResolver.ResolveAll(System.Type,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Resolves all instances for the specified service <see cref="T:System.Type"/>.
            </summary>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service.</param>
            <param name="specialParameters">Special parameters for resolve specified service.</param>
            <param name="useParentToResolve">If <c>true</c> also use parent bindings to resolve.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="T:MugenInjection.Interface.IInjectorBinder">
            <summary>
            Provides a path to register bindings.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorBinder.CreateBinderContext(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates the <see cref="T:MugenInjection.Interface.IBindingContext"/> for the current <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.
            </summary>
            <param name="service">The specifed service <see cref="T:System.Type"/>.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo">The specified <see cref="T:System.Reflection.ParameterInfo"/> when injected specified service.</param>
            <param name="parameters">The specified parameters for service.</param>
            <param name="specialParameters">The special parameters for resolve specified service.</param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IBindingContext"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorBinder.AddBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="binding">The specified <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorBinder.RemoveBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Removes the specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="binding">The specified <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorBinder.GetBindings(System.Type)">
            <summary>
            Gets all binding for tne specified service <see cref="T:System.Type"/>.
            </summary>
            <param name="service">The specified service <see cref="T:System.Type"/>.</param>
            <returns>A series of bindings that are registered for the service.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorBinder.GetBindings(MugenInjection.Interface.IBindingContext)">
            <summary>
            Gets all binding for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>A series of bindings that are registered for the <see cref="T:MugenInjection.Interface.IBindingContext"/>.</returns>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorBinder.Bindings">
            <summary>
            Gets the collection of all bindings for the current <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.GetRoot">
            <summary>
            Gets the root <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.GetParent">
            <summary>
            Gets the parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.SetParent(MugenInjection.Interface.IInjector)">
            <summary>
            Sets the specified <see cref="T:MugenInjection.Interface.IInjector"/> as a parent, if the <see cref="T:MugenInjection.Interface.IInjector"/> already has a parent will be thrown an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.CreateManagedScope">
            <summary>
            Creates a managed scope.
            </summary>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IManagedScope"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.CreateChild(MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,System.Boolean,System.Collections.Generic.IList{MugenInjection.Interface.Components.IComponent},MugenInjection.Interface.IInjectorModule[])">
            <summary>
            Creates a child <see cref="T:MugenInjection.Interface.IInjector"/> for the current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="settings">The specified settings for the child <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="componentContainer">The specified <see cref="T:MugenInjection.Interface.IComponentContainer"/>. </param>
            <param name="cloneComponents">The specifies whether to clone the components from the parent.</param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.AddChild(MugenInjection.Interface.IInjector)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.IInjector"/> in the collection of <c>ChildInjectors</c>, if the <see cref="T:MugenInjection.Interface.IInjector"/> already has a parent will be thrown an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.RemoveChild(MugenInjection.Interface.IInjector)">
            <summary>
            Removes the child <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.ModuleIsLoaded(System.String)">
            <summary>
            Determines whether a module with the specified name has been loaded in the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="name">The specified module name.</param>
            <returns><c>True</c> if the specified module has been loaded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.ModuleIsLoaded(System.Type)">
            <summary>
            Determines whether a module with the specified <see cref="T:System.Type"/> has been loaded in the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="moduleType">Module <see cref="T:System.Type"/>.</param>
            <returns><c>True</c> if the specified module has been loaded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.Load(System.Type)">
            <summary>
            Creates a new instance of the module and loads it into the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="moduleType">The type of the module.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.Load(MugenInjection.Interface.IInjectorModule)">
            <summary>
            Loads the module into the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="module">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.Unload(System.String)">
            <summary>
            Unloads the module with the specified name.
            </summary>
            <param name="name">The specified module name.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.Unload(System.Type)">
            <summary>
            Unloads the module with the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="moduleType">The specified module <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.Release(MugenInjection.Interface.IBindingContext,System.Boolean)">
            <summary>
            Releases specified service with specified condition in scope.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="needDispose">Try dispose object.</param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjector.ReleaseAll(System.Type,System.Boolean)">
            <summary>
            Releases all specified service in scope.
            </summary>
            <param name="service">The specified service <see cref="T:System.Type"/> for release.</param>
            <param name="needDispose">Try dispose object.</param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:MugenInjection.Interface.IInjector.Id">
            <summary>
            Gets the id of <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjector.Modules">
            <summary>
            Gets the collection of all modules for current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjector.ChildInjectors">
            <summary>
            Gets the collection of children.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjector.Settings">
            <summary>
            Gets the configuration options for current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjector.Components">
            <summary>
            Gets the collection of all components for current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.#ctor(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,System.Collections.Generic.IEnumerable{MugenInjection.Interface.Components.IComponent})">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Core.InjectorBase"/> class.
            </summary>
            <param name="parent">The specified parent <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="settings">The specified <see cref="T:MugenInjection.Interface.IInjectorSettings"/> for current <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="componentContainerContainer">The specified <see cref="T:MugenInjection.Interface.IComponentContainer"/>. </param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>(s). </param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.LoadComponents(System.Collections.Generic.IEnumerable{MugenInjection.Interface.Components.IComponent})">
            <summary>
            Loads the specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>s in the current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="components">The specifeid <see cref="T:MugenInjection.Interface.Components.IComponent"/>s.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.TryResolve(MugenInjection.Interface.IBindingContext,System.Func{System.Object,System.Object})">
            <summary>
            Tries to resolve the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> using custom behavior.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.TryFindBinding(MugenInjection.Interface.IBindingContext,System.Boolean)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext"> The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="findInParent">Find in parent bindings.</param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IBinding"/> not null if the specified service has been resolved</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.FindModule(System.String)">
            <summary>
            Finds the specified module.
            </summary>
            <param name="name">The specified module name.</param>
            <returns>An instance of <see cref="T:MugenInjection.Core.InjectorModule"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.FindModule(System.Type)">
            <summary>
            Finds the specified module.
            </summary>
            <param name="type">The specified module <see cref="T:System.Type"/>.</param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IInjectorModule"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.UnloadModuleInternal(MugenInjection.Interface.IInjectorModule)">
            <summary>
            Unloads the specified <see cref="T:MugenInjection.Core.InjectorModule"/>.
            </summary>
            <param name="injectorModule">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CanResolveInternal(MugenInjection.Interface.IBindingContext,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext"> The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="searchInParent">If set to <c>true</c> search in parent bindings.</param>
            <param name="includeImplicitBindings">If set to <c>false</c> implicit bindings are ignored.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CreateChildInjector(MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,System.Collections.Generic.IList{MugenInjection.Interface.Components.IComponent},MugenInjection.Interface.IInjectorModule[])">
            <summary>
            Creates a child <see cref="T:MugenInjection.Interface.IInjector"/> for the current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="settings">The specified settings for the child <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="componentContainer">The specified <see cref="T:MugenInjection.Interface.IComponentContainer"/>. </param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <returns>An instacne of child <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CreateContext(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates the <see cref="T:MugenInjection.Interface.IBindingContext"/> for the current <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="service">The specifed service <see cref="T:System.Type"/>.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo">The specified <see cref="T:System.Reflection.ParameterInfo"/> when injected specified service.</param>
            <param name="parameters">The specified parameters for service.</param>
            <param name="specialParameters">The special parameters for resolve specified service.</param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IBindingContext"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Inject``1(``0@,MugenInjection.Interface.IBindingContext)">
            <summary>
            Injects values into properties, fields, methods in the specified object.
            </summary>
            <param name="target">The specified target for inject.</param>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CanResolve(MugenInjection.Interface.IBindingContext,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext"> The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="searchInParent">If set to <c>true</c> search in parent bindings.</param>
            <param name="includeImplicitBindings">If set to <c>false</c> implicit bindings are ignored.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Resolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Resolves an instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.ResolveAll(System.Type,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Resolves all instances for the specified service <see cref="T:System.Type"/>.
            </summary>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service.</param>
            <param name="specialParameters">Special parameters for resolve specified service.</param>
            <param name="useParentToResolve">If <c>true</c> also use parent bindings to resolve.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.ResolveAll(MugenInjection.Interface.IBindingContext,System.Boolean)">
            <summary>
            Resolves all instances for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="useParentToResolve">If <c>true</c> also use parent bindings to resolve.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CreateBinderContext(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates the <see cref="T:MugenInjection.Interface.IBindingContext"/> for the current <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.
            </summary>
            <param name="service">The specifed service <see cref="T:System.Type"/>.</param>
            <param name="member">The specified <see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo">The specified <see cref="T:System.Reflection.ParameterInfo"/> when injected specified service.</param>
            <param name="parameters">The specified parameters for service.</param>
            <param name="specialParameters">The special parameters for resolve specified service.</param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IBindingContext"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.AddBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="binding">The specified <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.RemoveBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Removes the specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="binding">The specified <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.GetBindings(System.Type)">
            <summary>
            Gets all binding for tne specified service <see cref="T:System.Type"/>.
            </summary>
            <param name="service">The specified service <see cref="T:System.Type"/>.</param>
            <returns>A series of bindings that are registered for the service.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.GetBindings(MugenInjection.Interface.IBindingContext)">
            <summary>
            Gets all binding for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>A series of bindings that are registered for the <see cref="T:MugenInjection.Interface.IBindingContext"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.GetRoot">
            <summary>
            Gets the root <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.GetParent">
            <summary>
            Gets the parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.SetParent(MugenInjection.Interface.IInjector)">
            <summary>
            Sets the specified <see cref="T:MugenInjection.Interface.IInjector"/> as a parent, if the <see cref="T:MugenInjection.Interface.IInjector"/> already has a parent will be thrown an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CreateManagedScope">
            <summary>
            Creates a managed scope.
            </summary>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IManagedScope"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.CreateChild(MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,System.Boolean,System.Collections.Generic.IList{MugenInjection.Interface.Components.IComponent},MugenInjection.Interface.IInjectorModule[])">
            <summary>
            Creates a child <see cref="T:MugenInjection.Interface.IInjector"/> for the current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="settings">The specified settings for the child <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="componentContainer">The specified <see cref="T:MugenInjection.Interface.IComponentContainer"/>. </param>
            <param name="cloneComponents">The specifies whether to clone the components from the parent.</param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.AddChild(MugenInjection.Interface.IInjector)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.IInjector"/> in the collection of <c>ChildInjectors</c>, if the <see cref="T:MugenInjection.Interface.IInjector"/> already has a parent will be thrown an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.RemoveChild(MugenInjection.Interface.IInjector)">
            <summary>
            Removes the child <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.ModuleIsLoaded(System.String)">
            <summary>
            Determines whether a module with the specified name has been loaded in the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="name">The specified module name.</param>
            <returns><c>True</c> if the specified module has been loaded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.ModuleIsLoaded(System.Type)">
            <summary>
            Determines whether a module with the specified <see cref="T:System.Type"/> has been loaded in the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="moduleType">Module <see cref="T:System.Type"/>.</param>
            <returns><c>True</c> if the specified module has been loaded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Load(System.Type)">
            <summary>
            Creates a new instance of the module and loads it into the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="moduleType">The type of the module.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Load(MugenInjection.Interface.IInjectorModule)">
            <summary>
            Loads the module into the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="module">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Unload(System.String)">
            <summary>
            Unloads the module with the specified name.
            </summary>
            <param name="name">The specified module name.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Unload(System.Type)">
            <summary>
            Unloads the module with the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="moduleType">The specified module <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Release(MugenInjection.Interface.IBindingContext,System.Boolean)">
            <summary>
            Releases specified service with specified condition in scope.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="needDispose">Try dispose object.</param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.ReleaseAll(System.Type,System.Boolean)">
            <summary>
            Releases all specified service in scope.
            </summary>
            <param name="service">The specified service <see cref="T:System.Type"/> for release.</param>
            <param name="needDispose">Try dispose object.</param>
            <returns><c>True</c> if the specified service has been release; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <returns>
            A service object of type <paramref name="serviceType"/>.
                                -or- 
                            null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
            <param name="serviceType">An object that specifies the type of service object to get. 
                            </param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Equals(MugenInjection.Core.InjectorBase)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.
                            </param>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. 
                            </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.
                            </exception>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorBase.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.InjectorBase.Bindings">
            <summary>
            Gets the collection of all bindings for the current <see cref="T:MugenInjection.Interface.IInjectorBinder"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.InjectorBase.Id">
            <summary>
            Gets the id of <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.InjectorBase.Modules">
            <summary>
            Gets the collection of all modules for current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.InjectorBase.ChildInjectors">
            <summary>
            Gets the collection of children <see cref="T:MugenInjection.Interface.IInjector"/>s.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.InjectorBase.Settings">
            <summary>
            Gets the configuration options for current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.InjectorBase.Components">
            <summary>
            Gets the collection of all components for current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Core.InjectorModule">
            <summary>
                Represents a base class for module which can load in <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IInjectorModule">
            <summary>
                Represents a interface for module which can load in <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorModule.Load(MugenInjection.Interface.IInjector)">
            <summary>
                Loads bindings and components in current module.
            </summary>
            <param name="injector">
                The specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </param>
        </member>
        <member name="M:MugenInjection.Interface.IInjectorModule.Unload(MugenInjection.Interface.IInjector)">
            <summary>
                Unloads bindings and components in current module.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectorModule.Name">
            <summary>
                Gets the module name.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Core.InjectorModule"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Bind(System.Type[])">
            <summary>
                Declares a binding for the specified service.
            </summary>
            <param name="services">The specified service types.</param>
            <returns>Fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Bind``1">
            <summary>
                Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <returns>Fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Bind``2">
            <summary>
                Declares a binding for the specified services.
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <returns>Fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Bind``3">
            <summary>
                Declares a binding for the specified services.
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <typeparam name="T3">The specified service type.</typeparam>
            <returns>Fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Bind``4">
            <summary>
                Declares a binding for the specified services.
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <typeparam name="T3">The specified service type.</typeparam>
            <typeparam name="T4">The specified service type.</typeparam>
            <returns>Fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.BindTo``2">
            <summary>
                Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <typeparam name="TTypeTo">Type to bind specified service. </typeparam>
            <returns>Fluent syntax.</returns>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.AddComponent(MugenInjection.Interface.Components.IComponent)">
            <summary>
                Adds the specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
            <param name="component">
                The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/> for adding.
            </param>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Load">
            <summary>
                Loads bindings and components in current module.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Unload(System.Collections.Generic.IList{MugenInjection.Interface.IBinding},System.Collections.Generic.IList{MugenInjection.Interface.Components.IComponent})">
            <summary>
                Unloads bindings and components in current module.
            </summary>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Load(MugenInjection.Interface.IInjector)">
            <summary>
                Loads bindings and components in current module.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.Core.InjectorModule.Unload(MugenInjection.Interface.IInjector)">
            <summary>
                Unloads bindings and components in current module.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.InjectorModule.Injector">
            <summary>
             Gets the current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Core.InjectorModule.Name">
            <summary>
            Gets the module name.
            </summary>
        </member>
        <member name="T:MugenInjection.Delegates.CanResolveBindingDelegate">
            <summary>
                Represents the delegate to check the conditions in the <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="bindingContext">
                The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>
            </param>
            <returns>The result of check.</returns>
        </member>
        <member name="T:MugenInjection.Delegates.CustomScopeDelegate">
            <summary>
                Represents the delegate to resolve instance for the specified <see cref="T:MugenInjection.Interface.IScopeLifecycleContext"/>.
            </summary>
            <param name="scopeLifecycleContext">
                The specified <see cref="T:MugenInjection.Interface.IScopeLifecycleContext"/>.
            </param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="T:MugenInjection.Delegates.MethodBindingDelegate">
            <summary>
            Represents the delegate to resolve instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="T:MugenInjection.Delegates.MethodBindingDelegate`1">
            <summary>
            Represents the delegate to resolve instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <typeparam name="T">The specified object type.</typeparam>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="T:MugenInjection.Delegates.BindingBuildingDelegate">
            <summary>
            Represents the delegate to build binding.
            </summary>
            <param name="bindingBuilder">The specified <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.</param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.</returns>
        </member>
        <member name="T:MugenInjection.Delegates.BindingBuildedDelegate">
            <summary>
            Represents the delegate that invoked after build binding.
            </summary>
            <param name="bindingBuilder">The specified <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.</param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="T:MugenInjection.Delegates.BindingActivatedDelegate`1">
            <summary>
            Represents the delegate that invoked after binding activated.
            </summary>
            <typeparam name="T">The type of service.</typeparam>
            <param name="binding">The specified <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="instance">The specified instance.</param>
        </member>
        <member name="T:MugenInjection.Delegates.ActivatorDelegate">
            <summary>
                Represents the delegate to create an object.
            </summary>
            <param name="parameters">The specified parameters.</param>
            <returns>An instance of object.</returns>
        </member>
        <member name="T:MugenInjection.Delegates.SetterValueTypeDelegate`1">
            <summary>
               Represents the delegate to assign an object value for the value <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <param name="target">The object whose value will be set.</param>
            <param name="value">The value to assign to the field.</param>
        </member>
        <member name="T:MugenInjection.Delegates.SetterDelegate`1">
            <summary>
                Represents the delegate to assign an object value.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <param name="target">The object whose value will be set.</param>
            <param name="value">The value to assign to the field.</param>
        </member>
        <member name="T:MugenInjection.Delegates.GetterDelegate`2">
            <summary>
                Represents the delegate to get an object value.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <typeparam name="T">Type of result object.</typeparam>
            <param name="target">The object whose field value will be returned.</param>
            <returns>An object containing the value of the member reflected by this instance.</returns>
        </member>
        <member name="T:MugenInjection.Delegates.InvokeMethodDelegate`1">
            <summary>
                Represents the delegate to invokes the method using the specified parameters.
            </summary>
            <param name="target">The object on which to invoke the method. If a method is static, this argument is ignored.</param>
            <param name="parameters">An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method to be invoked.</param>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Delegates.InvokeMethodValueTypeDelegate`1">
            <summary>
                Represents the delegate to invokes the method using the specified parameters for the value <see cref="T:System.Type"/>.
            </summary>
            <param name="target">The object on which to invoke the method. If a method is static, this argument is ignored.</param>
            <param name="parameters">An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method to be invoked.</param>
            <returns></returns>
        </member>
        <member name="T:MugenInjection.Delegates.ParameterDelegate`1">
            <summary>
            Represents the delegate to resolve parameter for specified <see cref="T:MugenInjection.Interface.IParameterContext"/>.
            </summary>
            <typeparam name="T">The specified parameter type.</typeparam>
            <param name="parameterContext">The specified <see cref="T:MugenInjection.Interface.IParameterContext"/>.</param>
            <returns>An instance of the parameter.</returns>
        </member>
        <member name="T:MugenInjection.Exceptions.ActivatorException">
            <summary>
            The exception that is thrown when you activate the object.
            </summary>
        </member>
        <member name="M:MugenInjection.Exceptions.ActivatorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.ActivatorException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
        </member>
        <member name="M:MugenInjection.Exceptions.ActivatorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.ActivatorException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param><param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="T:MugenInjection.Exceptions.BindingException">
            <summary>
            The base class for errors associated with the <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Exceptions.BindingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.BindingException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:MugenInjection.Exceptions.BindingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.BindingException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param><param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="T:MugenInjection.Exceptions.BindingNotFoundException">
            <summary>
            The exception that is thrown when the corresponding <see cref="T:MugenInjection.Interface.IBinding"/> is not found.
            </summary>
        </member>
        <member name="M:MugenInjection.Exceptions.BindingNotFoundException.#ctor(MugenInjection.Interface.IBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.BindingNotFoundException"/> class with a specified error message.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
        </member>
        <member name="T:MugenInjection.Exceptions.ConflictBindingException">
            <summary>
            The exception that is thrown when found duplicate bindings.
            </summary>
        </member>
        <member name="M:MugenInjection.Exceptions.ConflictBindingException.#ctor(MugenInjection.Interface.IBindingContext,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.ConflictBindingException"/> class with a specified error message.
            </summary>
            <param name="bindingContext">Specifed <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="isConverter"></param>
        </member>
        <member name="T:MugenInjection.Exceptions.CyclicDependencyException">
            <summary>
            The exception that is thrown when found cyclic bindings dependency.
            </summary>
        </member>
        <member name="M:MugenInjection.Exceptions.CyclicDependencyException.#ctor(MugenInjection.Interface.IBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.CyclicDependencyException"/> class with a specified error message.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
        </member>
        <member name="M:MugenInjection.Exceptions.CyclicDependencyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.CyclicDependencyException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="T:MugenInjection.Exceptions.InvalidBindingException">
            <summary>
            The exception that is thrown when found invalid binding configuration.
            </summary>
        </member>
        <member name="M:MugenInjection.Exceptions.InvalidBindingException.#ctor(MugenInjection.Interface.IBinding,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.InvalidBindingException"/> class with a specified error message.
            </summary>
            <param name="binding">The specified <see cref="T:MugenInjection.Interface.IBinding"/>.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MugenInjection.Exceptions.InvalidBindingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.InvalidBindingException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:MugenInjection.Exceptions.InvalidBindingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.InvalidBindingException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param><param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="T:MugenInjection.Exceptions.InvalidSettingException">
            <summary>
            The exception that is thrown when found invalid settings.
            </summary>
        </member>
        <member name="M:MugenInjection.Exceptions.InvalidSettingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.InvalidSettingException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:MugenInjection.Exceptions.InvalidSettingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.InvalidSettingException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param><param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="T:MugenInjection.Exceptions.NullableBindingException">
            <summary>
            The exception that is thrown when the binding return null result.
            </summary>
        </member>
        <member name="M:MugenInjection.Exceptions.NullableBindingException.#ctor(MugenInjection.Interface.IBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Exceptions.NullableBindingException"/> class with a specified error message.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
        </member>
        <member name="T:MugenInjection.Infrastructure.BindingCollection">
            <summary>
            An internal container that manages and resolves <see cref="T:MugenInjection.Interface.IBinding"/>s.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IBindingCollection">
            <summary>
            Specific collection for <see cref="T:MugenInjection.Interface.IBinding"/>s.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IBindingCollection.WhereCanResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Searches all the <see cref="T:MugenInjection.Interface.IBinding"/> satisfying the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="context">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instances of <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IBindingCollection.WhereServiceEqual(System.Type)">
            <summary>
            Searches all the <see cref="T:MugenInjection.Interface.IBinding"/> satisfying the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="service">The specified <see cref="T:System.Type"/>.</param>
            <returns>An instances of <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IBindingCollection.AddBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="binding">The specified binding.</param>
        </member>
        <member name="M:MugenInjection.Interface.IBindingCollection.RemoveBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Removes the specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="binding">The specified binding.</param>
        </member>
        <member name="M:MugenInjection.Interface.IBindingCollection.AddBindingBuilder(MugenInjection.Interface.IBindingBuilder)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
            <param name="bindingBuilder">The specified binding builder.</param>
        </member>
        <member name="M:MugenInjection.Interface.IBindingCollection.RemoveBindingBindingBuilder(MugenInjection.Interface.IBindingBuilder)">
            <summary>
            Removes the specified <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
            <param name="bindingBuilder">The specified binding builder.</param>
        </member>
        <member name="P:MugenInjection.Interface.IBindingCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </returns>
        </member>
        <member name="P:MugenInjection.Interface.IBindingCollection.BindingBuilders">
            <summary>
            Gets a collection of all <see cref="T:MugenInjection.Interface.IBindingBuilder"/> in current <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IBindingCollection.AddedBinding">
            <summary>
            Occurs after add specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IBindingCollection.RemovedBinding">
            <summary>
            Occurs after remove specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IBindingCollection.AddedBindingBuilder">
            <summary>
            Occurs after add specified <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IBindingCollection.RemovedBindingBuilder">
            <summary>
            Occurs after remove specified <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.BindingCollection"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.WhereCanResolve(MugenInjection.Interface.IBindingContext)">
            <summary>
            Searches all the <see cref="T:MugenInjection.Interface.IBinding"/> satisfying the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="context">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <returns>An instances of <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.WhereServiceEqual(System.Type)">
            <summary>
            Searches all the <see cref="T:MugenInjection.Interface.IBinding"/> satisfying the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="service">The specified <see cref="T:System.Type"/>.</param>
            <returns>An instances of <see cref="T:MugenInjection.Interface.IBinding"/>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.AddBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="binding">The specified binding.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.RemoveBinding(MugenInjection.Interface.IBinding)">
            <summary>
            Removes the specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
            <param name="binding">The specified binding.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.AddBindingBuilder(MugenInjection.Interface.IBindingBuilder)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
            <param name="bindingBuilder">The specified binding builder.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.RemoveBindingBindingBuilder(MugenInjection.Interface.IBindingBuilder)">
            <summary>
            Removes the specified <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
            <param name="bindingBuilder">The specified binding builder.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingCollection.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </returns>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingCollection.BindingBuilders">
            <summary>
            Gets a collection of all <see cref="T:MugenInjection.Interface.IBindingBuilder"/> in current <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Infrastructure.BindingCollection.AddedBinding">
            <summary>
            Occurs after add specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Infrastructure.BindingCollection.RemovedBinding">
            <summary>
            Occurs after remove specified <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Infrastructure.BindingCollection.AddedBindingBuilder">
            <summary>
            Occurs after add specified <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Infrastructure.BindingCollection.RemovedBindingBuilder">
            <summary>
            Occurs after remove specified <see cref="T:MugenInjection.Interface.IBindingBuilder"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.BindingContext">
            <summary>
                The default context for resolve binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IBindingContext">
            <summary>
                The context for resolve binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IBindingContext.Update(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjector,System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Updates the current <c>IBindingContext</c>.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IBindingContext.Update(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjector)">
            <summary>
                Updates the current <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="callInjector">The specified call injector.</param>
            <param name="injector">The specified injector.</param>
        </member>
        <member name="M:MugenInjection.Interface.IBindingContext.GetSnapshot">
            <summary>
                Gets the hash-code of values in the binding-context.
            </summary>
            <returns>The hash code of values.</returns>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.Service">
            <summary>
                Gets or sets the service type.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.TypeInto">
            <summary>
                Gets the type into injected specified service <see cref="P:MugenInjection.Interface.IBindingContext.Service"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.Member">
            <summary>
                Gets the <see cref="T:System.Reflection.MemberInfo"/> that will receive the injection, if any.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.ParameterInfo">
            <summary>
                Gets the <see cref="P:MugenInjection.Interface.IBindingContext.ParameterInfo"/> that will receive the injection, if any.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.Binding">
            <summary>
                Gets the binding to activate, if any.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.Injector">
            <summary>
                Gets the <see cref="T:MugenInjection.Interface.IInjector"/> to activate current context.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.CallInjector">
            <summary>
                Gets the <see cref="P:MugenInjection.Interface.IBindingContext.Injector"/> who called service activation.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.Parameters">
            <summary>
                Gets the parameters.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.SpecialParameters">
            <summary>
                Gets the special parameters.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IBindingContext.ParentBindingContext">
            <summary>
                Gets or sets the parent binding context.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingContext.Equals(MugenInjection.Interface.IBindingContext)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.
                            </param>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingContext.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. 
                            </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.
                            </exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingContext.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingContext.#ctor(MugenInjection.Interface.IBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.BindingContext"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingContext.#ctor(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Type,MugenInjection.Interface.IInjector,MugenInjection.Interface.IBindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.BindingContext"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingContext.#ctor(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjector,System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.BindingContext"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingContext.Update(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjector,System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Updates the current <c>IBindingContext</c>.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingContext.Update(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjector)">
            <summary>
            Updates the current <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="callInjector">The specified call injector.</param>
            <param name="injector">The specified injector.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingContext.MugenInjection#Interface#IBindingContext#GetSnapshot">
            <summary>
                Gets the hash-code of values in the binding-context.
            </summary>
            <returns>The hash code of values.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.BindingContext.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.Service">
            <summary>
                Gets or sets the service type.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.TypeInto">
            <summary>
                Gets the type into injected specified service <see cref="P:MugenInjection.Interface.IBindingContext.Service"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.Member">
            <summary>
                Gets the <see cref="T:System.Reflection.MemberInfo"/> that will receive the injection, if any.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.ParameterInfo">
            <summary>
                Gets the <see cref="P:MugenInjection.Interface.IBindingContext.ParameterInfo"/> that will receive the injection, if any.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.Binding">
            <summary>
                Gets the binding for activate, if any.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.Injector">
            <summary>
                Gets the <see cref="T:MugenInjection.Interface.IInjector"/> to activate current context.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.CallInjector">
            <summary>
                Gets the <see cref="P:MugenInjection.Interface.IBindingContext.Injector"/> who called service activation.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.Parameters">
            <summary>
                Gets the parameters.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.SpecialParameters">
            <summary>
                Gets the special parameters.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.BindingContext.ParentBindingContext">
            <summary>
                Gets or sets the parent binding context.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.CacheCollection`2.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.CacheCollection`2"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.CacheCollection`2.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.CacheCollection`2"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.CacheCollection`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.CacheCollection`2"/> class.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.ComponentContainer">
            <summary>
            An internal container that manages and resolves components.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IComponentContainer">
            <summary>
            An internal container that manages and resolves components.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.Initialize(MugenInjection.Interface.IInjector)">
            <summary>
            Binds a collection to the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.Add(MugenInjection.Interface.Components.IComponent)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
            <param name="component">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.Remove(MugenInjection.Interface.Components.IComponent)">
            <summary>
            Removes the specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
            <param name="component">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</param>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.RemoveAll``1">
            <summary>
            Removes all components with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The specified <see cref="T:System.Type"/>.</typeparam>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.Get``1">
            <summary>
            Gets the component with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>An instance of <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.TryGet``1(``0@)">
            <summary>
            Tries get the component with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The specified <see cref="T:System.Type"/>.</typeparam>
            <param name="component">An instance of <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</param>
            <returns><c>True</c> if the component finds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.IsExist``1">
            <summary>
            Indicates that the specified <see cref="T:System.Type"/> of component exists in the collection.
            </summary>
            <typeparam name="T">The specified component <see cref="T:System.Type"/>.</typeparam>
            <returns><c>True</c> if the specified component exist; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.IsExist(System.Type)">
            <summary>
            Indicates that the specified <see cref="T:System.Type"/> of component exists in the collection.
            </summary>
            <param name="componentType">The specified component <see cref="T:System.Type"/>.</param>
            <returns><c>True</c> if the specified component exist; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.IsContain(MugenInjection.Interface.Components.IComponent)">
            <summary>
            Indicates that the <see cref="T:MugenInjection.Interface.Components.IComponent"/> component exists in the collection.
            </summary>
            <param name="component">The specified component <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</param>
            <returns><c>True</c> if the specified component exist; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.GetAll``1">
            <summary>
            Gets all components with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>An instances of <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IComponentContainer.CloneAll">
            <summary>
            Creates a new object that is a copy of the current components.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:MugenInjection.Interface.IComponentContainer.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </returns>
        </member>
        <member name="P:MugenInjection.Interface.IComponentContainer.DisposeComponentAfterUnload">
            <summary>
            Indicates that the component will be disposed after unload (Default is <value>true</value>).
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IComponentContainer.BindingManagerComponent">
            <summary>
            Gets or sets the specified <see cref="T:MugenInjection.Interface.Components.IBindingManagerComponent"/> for manage bindings.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IComponentContainer.BindingActivatorComponent">
            <summary>
            Gets or sets the specified <see cref="T:MugenInjection.Interface.Components.IBindingActivatorComponent"/> for activate binding.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IComponentContainer.AddedComponent">
            <summary>
            Occurs after add specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Interface.IComponentContainer.RemovedComponent">
            <summary>
            Occurs after remove specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.ComponentContainer"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.#ctor(MugenInjection.Interface.Components.IBindingActivatorComponent,MugenInjection.Interface.Components.IBindingManagerComponent,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.ComponentContainer"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.Initialize(MugenInjection.Interface.IInjector)">
            <summary>
            Binds a collection to the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.Add(MugenInjection.Interface.Components.IComponent)">
            <summary>
            Adds the specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
            <param name="component">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.Remove(MugenInjection.Interface.Components.IComponent)">
            <summary>
            Removes the specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
            <param name="component">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.RemoveAll``1">
            <summary>
            Removes all components with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The specified <see cref="T:System.Type"/>.</typeparam>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.Get``1">
            <summary>
            Gets the component with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>An instance of <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.TryGet``1(``0@)">
            <summary>
            Tries get the component with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The specified <see cref="T:System.Type"/>.</typeparam>
            <param name="component">An instance of <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</param>
            <returns><c>True</c> if the component finds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.IsExist``1">
            <summary>
            Indicates that the specified <see cref="T:System.Type"/> of component exists in the collection.
            </summary>
            <typeparam name="T">The specified component <see cref="T:System.Type"/>.</typeparam>
            <returns><c>True</c> if the specified component exist; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.IsExist(System.Type)">
            <summary>
            Indicates that the specified <see cref="T:System.Type"/> of component exists in the collection.
            </summary>
            <param name="componentType">The specified component <see cref="T:System.Type"/>.</param>
            <returns><c>True</c> if the specified component exist; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.IsContain(MugenInjection.Interface.Components.IComponent)">
            <summary>
            Indicates that the <see cref="T:MugenInjection.Interface.Components.IComponent"/> component exists in the collection.
            </summary>
            <param name="component">The specified component <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</param>
            <returns><c>True</c> if the specified component exist; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.GetAll``1">
            <summary>
            Gets all components with the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>An instances of <see cref="T:MugenInjection.Interface.Components.IComponent"/>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.CloneAll">
            <summary>
            Creates a new object that is a copy of the current components.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ComponentContainer.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.ComponentContainer.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:MugenInjection.Interface.IBindingCollection"/>.
            </returns>
        </member>
        <member name="P:MugenInjection.Infrastructure.ComponentContainer.DisposeComponentAfterUnload">
            <summary>
            Indicates that the component will be disposed after unload (Default is <value>true</value>).
            </summary>
        </member>
        <member name="E:MugenInjection.Infrastructure.ComponentContainer.AddedComponent">
            <summary>
            Occurs after add specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="E:MugenInjection.Infrastructure.ComponentContainer.RemovedComponent">
            <summary>
            Occurs after remove specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.ComponentContainer.BindingManagerComponent">
            <summary>
            Gets or sets the specified <see cref="T:MugenInjection.Interface.Components.IBindingManagerComponent"/> for manage bindings.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.ComponentContainer.BindingActivatorComponent">
            <summary>
            Gets or sets the specified <see cref="T:MugenInjection.Interface.Components.IBindingActivatorComponent"/> for activate binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.ConverterContext">
            <summary>
                Represents the context that converter uses to create convert an instance.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ConverterContext.#ctor(MugenInjection.Interface.IBindingContext,System.Func{MugenInjection.Interface.IBindingContext,System.Object},MugenInjection.Interface.IBinding,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.ConverterContext"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ConverterContext.#ctor(MugenInjection.Infrastructure.ConverterContext)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.ConverterContext"/> class.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.ConverterContext.Activator">
            <summary>
                Gets or sets a delegate to create service.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.ConverterContext.BindingContext">
            <summary>
                Gets or sets a binding context to create service.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.ConverterContext.Binding">
            <summary>
                Gets or sets the binding to create service.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.ConverterContext.IsFixed">
            <summary>
                Gets or sets value that indicates that context contains fixed value.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.DefaultConstructorResolver">
            <summary>
            Select constructor for specified service.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IConstructorResolver">
            <summary>
            Represents the interface that selects constructor for the specified service.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IConstructorResolver.Resolve(System.Type,MugenInjection.Interface.IBindingContext)">
            <summary>
            Selects constructor for the specified service type.
            </summary>
            <param name="service">The specified service <see cref="T:System.Type"/>.</param>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>s.</param>
            <returns>An instance of the <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IConstructorResolver.SetConstructor(System.Reflection.ConstructorInfo)">
            <summary>
            Sets the <see cref="T:System.Reflection.ConstructorInfo"/> to the current <see cref="T:MugenInjection.Interface.IConstructorResolver"/>.
            </summary>
            <param name="constructorInfo">The specified <see cref="T:System.Reflection.ConstructorInfo"/></param>
        </member>
        <member name="M:MugenInjection.Infrastructure.DefaultConstructorResolver.Resolve(System.Type,MugenInjection.Interface.IBindingContext)">
            <summary>
            Selects constructor for the specified service type.
            </summary>
            <param name="service">The specified service <see cref="T:System.Type"/>.</param>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>s.</param>
            <returns>An instance of the <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.DefaultConstructorResolver.SetConstructor(System.Reflection.ConstructorInfo)">
            <summary>
            Sets the <see cref="T:System.Reflection.ConstructorInfo"/> for the current <see cref="T:MugenInjection.Interface.IConstructorResolver"/>.
            </summary>
            <param name="constructorInfo">The specified <see cref="T:System.Reflection.ConstructorInfo"/></param>
        </member>
        <member name="T:MugenInjection.Infrastructure.DictionarySettingsImpl">
            <summary>
               The class to represent <see cref="T:MugenInjection.Interface.ISettings"/> as Dictionary.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.ISettings">
            <summary>
            Providing specific setting.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.ISettings.Add(System.String,System.Object)">
            <summary>
            Adds the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to set.</param>
            <param name="obj">The specified setting value.</param>
        </member>
        <member name="M:MugenInjection.Interface.ISettings.Remove(System.String)">
            <summary>
            Removes the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to remove.</param>
        </member>
        <member name="M:MugenInjection.Interface.ISettings.Get(System.String)">
            <summary>
            Gets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get.</param>
            <returns>The specified setting value.</returns>
        </member>
        <member name="M:MugenInjection.Interface.ISettings.Get``1(System.String)">
            <summary>
            Gets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get.</param>
            <returns>The specified setting value.</returns>
        </member>
        <member name="M:MugenInjection.Interface.ISettings.TryGet(System.String,System.Object@)">
            <summary>
            Try gets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get.</param>
            <param name="result">The specified setting value.</param>
            <returns><c>True</c> if the specified setting has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.ISettings.TryGet``1(System.String,``0@)">
            <summary>
            Try gets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get.</param>
            <param name="result">The specified setting value.</param>
            <returns><c>True</c> if the specified setting has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.ISettings.IsContain(System.String)">
            <summary>
            Determines whether the specified setting name can be resolved.
            </summary>
            <param name="name">The setting name of the value to check.</param>
            <returns><c>True</c> if the specified setting has been contains; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.ISettings.Clear">
            <summary>
            Removes all settings.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.ISettings.ToDictionary">
            <summary>
            Converts settings to dictionary.
            </summary>
            <returns>An instance of <see cref="T:System.Collections.Generic.IDictionary`2"/></returns>
        </member>
        <member name="P:MugenInjection.Interface.ISettings.Item(System.String)">
            <summary>
            Gets or sets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get or set.</param>
            <returns>The specified setting value.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.DictionarySettingsImpl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.DictionarySettingsImpl"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.DictionarySettingsImpl.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.DictionarySettingsImpl"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.DictionarySettingsImpl.Add(System.String,System.Object)">
            <summary>
                Adds the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to set.</param>
            <param name="obj">The specified setting value.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.DictionarySettingsImpl.Remove(System.String)">
            <summary>
                Removes the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to remove.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.DictionarySettingsImpl.Get(System.String)">
            <summary>
                Gets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get.</param>
            <returns>The specified setting value.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.DictionarySettingsImpl.Get``1(System.String)">
            <summary>
                Gets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get.</param>
            <returns>The specified setting value.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.DictionarySettingsImpl.TryGet(System.String,System.Object@)">
            <summary>
                Try gets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get.</param>
            <param name="result">The specified setting value.</param>
            <returns>
                <c>True</c> if the specified setting has been resolved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.DictionarySettingsImpl.TryGet``1(System.String,``0@)">
            <summary>
                Try gets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get.</param>
            <param name="result">The specified setting value.</param>
            <returns>
                <c>True</c> if the specified setting has been resolved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.DictionarySettingsImpl.IsContain(System.String)">
            <summary>
                Determines whether the specified setting name can be resolved.
            </summary>
            <param name="name">The setting name of the value to check.</param>
            <returns>
                <c>True</c> if the specified setting has been contains; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.DictionarySettingsImpl.Clear">
            <summary>
                Removes all settings.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.DictionarySettingsImpl.ToDictionary">
            <summary>
            Converts settings to dictionary.
            </summary>
            <returns>An instance of <see cref="T:System.Collections.Generic.IDictionary`2"/></returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.DictionarySettingsImpl.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.DictionarySettingsImpl.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:MugenInjection.Infrastructure.DictionarySettingsImpl.Item(System.String)">
            <summary>
                Gets or sets the value associated with specified name.
            </summary>
            <param name="name">The setting name of the value to get or set.</param>
            <returns>The specified setting value.</returns>
        </member>
        <member name="T:MugenInjection.Infrastructure.EmitReflectionAccessProvider">
            <summary>
                Represents the reflection access provider which use System.Reflection.Emit to members access.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.GetActivatorDelegate(System.Reflection.ConstructorInfo)">
            <summary>
                Gets a delegate to create an object.
            </summary>
            <param name="constructorInfo">
                The specified <see cref="T:System.Reflection.ConstructorInfo"/>.
            </param>
            <returns>
                An instance of <see cref="T:System.Func`2"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.GetAssignMemberDelegate``1(System.Reflection.MemberInfo)">
            <summary>
                Gets a delegate to set a value in the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>.
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Delegates.SetterDelegate`1"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.GetAssignValueMemberDelegate``1(System.Reflection.MemberInfo)">
            <summary>
                Gets a delegate to set specified value in the specified <see cref="T:System.Reflection.MemberInfo"/> in a value type target, can be used with reference type.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>.
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Delegates.SetterDelegate`1"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.GetGetterMemberDelegate``2(System.Reflection.MemberInfo)">
            <summary>
                Gets a delegate to get a value in the specified <see cref="T:System.Reflection.MemberInfo"/>
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <typeparam name="T">Type of the target.</typeparam>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>.
            </param>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.GetInvokeMethodDelegate``1(System.Reflection.MethodInfo)">
            <summary>
                Gets a delegate to call specified <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="methodInfo">
                The specified <see cref="T:System.Reflection.MethodInfo"/>
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Delegates.InvokeMethodDelegate`1"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.GetInvokeMethodValueTypeDelegate``1(System.Reflection.MethodInfo)">
            <summary>
                Gets a delegate to call specified <see cref="T:System.Reflection.MethodInfo"/> in a value type target, can be used with reference type.
            </summary>
            <param name="methodInfo">
                The specified <see cref="T:System.Reflection.MethodInfo"/>
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Delegates.InvokeMethodDelegate`1"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.ConvertToProxyDelegate(System.Func{System.Object[],System.Object},System.Type)">
            <summary>
                Converts the Func{object[], object} to the specified delegate type.
            </summary>
            <param name="proxyDelegate">The specified proxy method.</param>
            <param name="delegateType">The specified delegate type.</param>
            <returns>An instance of delegate type.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.ConvertToWeakDelegate(System.Delegate,System.Action{System.Delegate})">
            <summary>
                Returns a weak-reference version of a delegate.
            </summary>
            <param name="originalAction">The delegate to convert to weak referencing.</param>
            <param name="unsubcribeDelegate">The unregister action to invoke if the target is garbage collected.</param>
            <returns>A weak referencing delegate.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.FindWeakDelegateByOriginalDelegate(System.Delegate,System.Collections.Generic.IList{System.Delegate})">
            <summary>
            Finds the weak-delegate use a original delegate in the specified array of delegate.
            </summary>
            <param name="originalAction">The original delegate to find weak delegate.</param>
            <param name="delegates">The specified array of delegate</param>
            <returns>An instance of delegate.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.GetActivatorDelegate(System.Reflection.ConstructorInfo,System.Boolean)">
            <summary>
                Gets a delegate to create an object.
            </summary>
            <param name="constructorInfo">
                The specified <see cref="T:System.Reflection.ConstructorInfo"/>.
            </param>
            <param name="useCache">
                If <c>true</c> using cache;otherwise <c>false</c>.
            </param>
            <returns>
                An instance of <see cref="T:System.Func`2"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.GetAssignMemberDelegate``2(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>
                Gets a delegate to set a value in the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <typeparam name="TDelegate">Type of the delegate to create.</typeparam>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>.
            </param>
            <param name="isValueType">
                If <c>true</c> is value type; otherwise <c>false</c>.
            </param>
            <param name="useCache">
                If <c>true</c> using cache;otherwise <c>false</c>.
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Delegates.SetterDelegate`1"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.GetInvokeMethodDelegate``2(System.Reflection.MethodInfo,System.Boolean,System.Boolean)">
            <summary>
                Gets a delegate to call specified <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <typeparam name="TDelegate">Type of the delegate to create.</typeparam>
            <param name="methodInfo">
                The specified <see cref="T:System.Reflection.MethodInfo"/>
            </param>
            <param name="isValueType">
                If <c>true</c> is value type; otherwise <c>false</c>.
            </param>
            <param name="useCache">
                If <c>true</c> using cache;otherwise <c>false</c>.
            </param>
            <returns>
                An instance of <see cref="T:MugenInjection.Delegates.InvokeMethodDelegate`1"/>
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.ConvertToProxyDelegate(System.Type)">
            <summary>
                Converts the Func{object[], object} to the specified delegate type.
            </summary>
            <param name="delegateType">The specified delegate type.</param>
            <returns>An instance of delegate type.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.ConvertToWeakDelegate(System.Delegate)">
            <summary>
                Returns a weak-reference version of a delegate.
            </summary>
            <param name="originalAction">The delegate to convert to weak referencing.</param>
            <returns>A weak referencing delegate.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.UnboxOrCast(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
                Unbox or cast specified type.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.LoadMethodArguments(System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>
                Loads method argument in IL.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.CreateDynamicMethod(System.Type,System.Type[],System.Type)">
            <summary>
                Creates dynamic method with skip visibility.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.WeakEventCacheItem.Equals(MugenInjection.Infrastructure.EmitReflectionAccessProvider.WeakEventCacheItem)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.WeakEventCacheItem.Equals(System.Object)">
            <summary>
                Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
                true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.WeakEventCacheItem.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>
                A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Infrastructure.EmitReflectionAccessProvider.WeakEventCacheItem.#ctor(System.Type,System.Reflection.MethodInfo,System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.EmitReflectionAccessProvider.WeakEventCacheItem"/> class.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.BindingPriority">
            <summary>
            Binding priority enum.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.BindingPriority.Standard">
            <summary>
            Standard priority = 1.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.BindingPriority.Low">
            <summary>
            Low priority = 2.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.BindingPriority.Normal">
            <summary>
            Normal priority = 3.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.BindingPriority.High">
            <summary>
            High prioriy = 4.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.ServiceType">
            <summary>
            Contains information about the type of service.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.ServiceType.Simple">
            <summary>
            Indicates that the type of object is simple.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.ServiceType.Complex">
            <summary>
            Indicates that the type of object is complex.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.ServiceType.Activatable">
            <summary>
            Indicates that the type of object is activatable this means that the object will activated in container.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.ServiceType.Resolvable">
            <summary>
            Indicates that the type of object is resolvable this means that the object can be taken out of the container without using a converter.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.TypeChangedAction">
            <summary>
            Contains information about the type changed action.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.TypeChangedAction.Add">
            <summary>
            Add action.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.TypeChangedAction.Remove">
            <summary>
            Remove action.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.ConverterResult">
            <summary>
            Represents the converter result.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.ConverterResult.NotSupported">
            <summary>
            Not supported type.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.ConverterResult.SupportedWithCache">
            <summary>
            Supported type and can be cached.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.ConverterResult.SupportedWithoutCache">
            <summary>
            Supported type and cannot be cached.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.ActivateType">
            <summary>
            Type of activate enum.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.InjectorUtils">
            <summary>
                The helper class.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.InjectorUtils.MugenInjectionAssemblyName">
            <summary>
                Contain MugenInjection assembly name with public key.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.InjectorUtils.EmptyTypes">
            <summary>
                Gets the empty types.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtils.GetNextId">
            <summary>
            Gets the id.
            </summary>
            <returns>An instance of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="P:MugenInjection.Infrastructure.InjectorUtils.ReflectionAccessProvider">
            <summary>
                Gets or sets the <see cref="T:MugenInjection.Interface.IReflectionAccessProvider"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtilsInternal.GetParameters(System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Casts or creates the <see cref="T:MugenInjection.Interface.IInjectionParameter"/>s.
            </summary>
            <param name="parameters">The specified <see cref="T:MugenInjection.Interface.IInjectionParameter"/>s</param>
            <returns>An instances of <see cref="T:MugenInjection.Interface.IInjectionParameter"/>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtilsInternal.IsSelfBindable(System.Type)">
            <summary>
            Indicates that type is self bindable.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtilsInternal.IsBindable(System.Type,System.Type)">
            <summary>
            Indicates that types is bindable.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtilsInternal.GetProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the property represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="property"/> is null.</exception><exception cref="T:System.ArgumentException">The <paramref name="property"/> is not a lambda expression or it does not represent a property access.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.InjectorUtilsInternal.ParseMemberExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns a MemberInfo for an expression containing a call to a property.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.Managed`1">
            <summary>
                Represents a dependency that can be released by the dependent component.
            </summary>
            <typeparam name="T">The service provided by the dependency.</typeparam>
        </member>
        <member name="M:MugenInjection.Infrastructure.Managed`1.#ctor(MugenInjection.Interface.IInjector,MugenInjection.Interface.IBindingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.Managed`1"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.Managed`1.Dispose(System.Boolean)">
            <summary>
                Releases resources held by the object.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.Managed`1.IsValueCreated">
            <summary>
                Gets a value that indicates whether a value has been created for this <see cref="T:MugenInjection.Infrastructure.Managed`1"/> instance.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.Managed`1.Value">
            <summary>
                Gets the lazily initialized value of the current <see cref="T:MugenInjection.Infrastructure.Managed`1"/> instance.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.ManagedScope">
            <summary>
                Represents the managed scope.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IManagedScope">
            <summary>
                Represents the managed scope.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IManagedScope.Source">
            <summary>
            Gets the source <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ManagedScope.Equals(MugenInjection.Infrastructure.ManagedScope)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">
                An object to compare with this object.
            </param>
        </member>
        <member name="M:MugenInjection.Infrastructure.ManagedScope.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
                true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">
                The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.
            </param>
            <exception cref="T:System.NullReferenceException">
                The <paramref name="obj" /> parameter is null.
            </exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ManagedScope.GetHashCode">
            <summary>
                Serves as a hash function for a particular type.
            </summary>
            <returns>
                A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ManagedScope.#ctor(MugenInjection.Interface.IInjector)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.ManagedScope"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ManagedScope.System#IServiceProvider#GetService(System.Type)">
            <summary>
                Gets the service object of the specified type.
            </summary>
            <returns>
                A service object of type <paramref name="serviceType" />.
                -or-
                null if there is no service object of type <paramref name="serviceType" />.
            </returns>
            <param name="serviceType">
                An object that specifies the type of service object to get.
            </param>
        </member>
        <member name="M:MugenInjection.Infrastructure.ManagedScope.CreateContext(System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Creates the <see cref="T:MugenInjection.Interface.IBindingContext"/> for the current <see cref="T:MugenInjection.Interface.IInjectorResolver"/>.
            </summary>
            <param name="service">
                The specifed service <see cref="T:System.Type"/>.
            </param>
            <param name="member">
                The specified <see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.
            </param>
            <param name="parameterInfo">
                The specified <see cref="T:System.Reflection.ParameterInfo"/> when injected specified service.
            </param>
            <param name="parameters">The specified parameters for service.</param>
            <param name="specialParameters">The special parameters for resolve specified service.</param>
            <returns>
                An instance of <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ManagedScope.Inject``1(``0@,MugenInjection.Interface.IBindingContext)">
            <summary>
                Injects values into properties, fields, methods in the specified object.
            </summary>
            <param name="target">The specified target for inject.</param>
            <param name="bindingContext">
                The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </param>
        </member>
        <member name="M:MugenInjection.Infrastructure.ManagedScope.CanResolve(MugenInjection.Interface.IBindingContext,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="bindingContext"> The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="searchInParent">If set to <c>true</c> search in parent bindings.</param>
            <param name="includeImplicitBindings">If set to <c>false</c> implicit bindings are ignored.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ManagedScope.Resolve(MugenInjection.Interface.IBindingContext)">
            <summary>
                Resolves an instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">
                The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ManagedScope.ResolveAll(MugenInjection.Interface.IBindingContext,System.Boolean)">
            <summary>
            Resolves all instances for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="useParentToResolve">If <c>true</c> also use parent bindings to resolve.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:MugenInjection.Infrastructure.ManagedScope.ResolveAll(System.Type,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Resolves all instances for the specified service <see cref="T:System.Type"/>.
            </summary>
            <param name="service">Service for resolve.</param>
            <param name="parameters">Parameters for service.</param>
            <param name="specialParameters">Special parameters for resolve specified service.</param>
            <param name="useParentToResolve">If <c>true</c> also use parent bindings to resolve.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="P:MugenInjection.Infrastructure.ManagedScope.Source">
            <summary>
            Gets the source <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.NotifyCollectionImpl`1">
            <summary>
            Represents a collection which support notify events.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.NotifyCollectionImpl`1.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.NotifyCollectionImpl`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.
                            </param><param name="item">The object to insert. The value can be null for reference types.
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.
                                -or-
                            <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
                            </exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.NotifyCollectionImpl`1.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.
                                -or-
                            <paramref name="index"/> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
                            </exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.NotifyCollectionImpl`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.
                            </param><param name="item">The new value for the element at the specified index. The value can be null for reference types.
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.
                                -or-
                            <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
                            </exception>
        </member>
        <member name="T:MugenInjection.Interface.IParameterContext">
            <summary>
            Represent a parameter context.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IParameterContext.InjectedType">
            <summary>
            Gets the specified service type.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IParameterContext.Injector">
            <summary>
            Gets the specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ParameterContext.#ctor(MugenInjection.Interface.IInjector,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.ParameterContext"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ParameterContext.#ctor(MugenInjection.Interface.IInjector)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.ParameterContext"/> class.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.ParameterContext.InjectedType">
            <summary>
            Gets the specified service type.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.ParameterContext.Injector">
            <summary>
            Gets the specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.SpecialParameterKeys">
            <summary>
                Contain constant key for special parameter.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.SpecialParameterKeys.TryDisposeObjectSetting">
            <summary>
               Represents the key that responds to try dispose object in bindings.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.SpecialParameterKeys.KeyedBindingParameter">
            <summary>
                 Represents the key key for named binding.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.SpecialParameterKeys.NoCacheBindingKey">
            <summary>
                 Represents the key key for no cache binding.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.SpecialParameterKeys.SetKeyedBindingParameter(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
            <summary>
            Sets the setting to dictionary that indicates that it a named binding. 
            </summary>
            <param name="specialParameters">The specified <see cref="T:System.Collections.Generic.IDictionary`2"/></param>
            <param name="key">The specified binding key.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.SpecialParameterKeys.NotCache``1(``0)">
            <summary>
            Sets the setting to not cache specified binding.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:MugenInjection.Infrastructure.UoW`1">
            <summary>
                Represents a dependency that can be released by the dependent component.
            </summary>
            <typeparam name="T">The service provided by the dependency.</typeparam>
        </member>
        <member name="M:MugenInjection.Infrastructure.UoW`1.#ctor(MugenInjection.Interface.IInjector,MugenInjection.Interface.IBindingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.UoW`1"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.UoW`1.Dispose(System.Boolean)">
            <summary>
                Releases resources held by the object.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.UoW`1.IsValueCreated">
            <summary>
                Gets a value that indicates whether a value has been created for this <see cref="T:MugenInjection.Infrastructure.Managed`1"/> instance.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.UoW`1.Value">
            <summary>
                Gets the lazily initialized value of the current <see cref="T:MugenInjection.Infrastructure.Managed`1"/> instance.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.Validate">
            <summary>
            A static helper class that includes various parameter checking routines.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.Validate.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if the given argument is null.
            </summary>
            <exception cref="T:System.ArgumentNullException"> if tested value if null.</exception>
            <param name="argumentValue">Argument value to test.</param>
            <param name="paramName">Name of the parameter being tested. </param>
        </member>
        <member name="M:MugenInjection.Infrastructure.Validate.ArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an exception if the tested string argument is null or the empty string.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if string value is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the string is empty</exception>
            <param name="argumentValue">Argument value to check.</param>
            <param name="argumentName">Name of argument being checked.</param>
        </member>
        <member name="T:MugenInjection.Infrastructure.WeakEventInfo">
            <summary>
                Represents the class which contains information about weak event.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.WeakEventInfo.TargetFieldInfo">
            <summary>
                Gets the information about a Target field.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.WeakEventInfo.UnsubcribeDelegateFieldInfo">
            <summary>
                Gets the information about a UnsubcribeDelegate field.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.WeakEventInfo.DelegateFieldInfo">
            <summary>
                Gets the information about a Delegate field.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.WeakEventInfo.ClearMethodInfo">
            <summary>
                Gets the information about a Clear method.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.WeakEventInfo.Delegate">
            <summary>
                Gets or sets the delegate to invoke weak event.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.WeakEventInfo.Target">
            <summary>
                Gets the target.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.WeakEventInfo.UnsubcribeDelegate">
            <summary>
                Gets the unsubcribe delegate if any.
            </summary>
        </member>
        <member name="F:MugenInjection.Infrastructure.WeakEventInfo.OriginalMethod">
            <summary>
            Gets the information about original method.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.WeakEventInfo.Clear">
            <summary>
                Clears all fields.
            </summary>
        </member>
        <member name="T:MugenInjection.Infrastructure.WithSettings`1">
            <summary>
                Provides a value along with a dictionary of metadata describing the value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:MugenInjection.Infrastructure.WithSettings`1.#ctor(`0,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Infrastructure.WithSettings`1"/> class.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.WithSettings`1.Value">
            <summary>
                Gets the value.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.WithSettings`1.Settings">
            <summary>
                Gets the binding settings.
            </summary>
        </member>
        <member name="P:MugenInjection.Infrastructure.WithSettings`1.SpecialParameters">
            <summary>
                Gets the special parameters.
            </summary>
        </member>
        <member name="T:MugenInjection.InjectorExtensionUtils">
            <summary>
            Extension for <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Get(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <param name="injector"></param>
            <param name="service"></param>
            <param name="member"> </param>
            <param name="parameterInfo"> </param>
            <param name="specialParameters"></param>
            <param name="parameters"></param> 
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Get``1(MugenInjection.Interface.IInjectorResolver,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Gets an instance of the specified service <see cref="!:T"/> use expression for add parameters (for into type).
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member"> Type when injected specified service.</param>
            <param name="parameterInfo">The specified <see cref="T:System.Reflection.ParameterInfo"/>. </param>
            <param name="expression">The specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="specialParameters"> </param>
            <param name="parameters">The specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.TryGet(MugenInjection.Interface.IInjectorResolver,System.Object@,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Try gets an instance of the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result object. </param>
            <param name="service">The specified service type.</param>
            <param name="member"> </param>
            <param name="parameterInfo"> </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result object. </param>
            <param name="member"> </param>
            <param name="parameterInfo"> </param>
            <param name="specialParameters"> Special parameters for resolve current service.</param>
            <param name="parameters">The specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.TryGet``1(MugenInjection.Interface.IInjectorResolver,``0@,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Linq.Expressions.Expression{System.Func{MugenInjection.Infrastructure.ResolveContext,``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Try gets an instance of the specified service <see cref="!:T"/> use expression for add parameters (for into type).
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result object. </param>
            <param name="member"> Type when injected specified service.</param>
            <param name="parameterInfo"> </param>
            <param name="expression">The specified <see cref="T:System.Linq.Expressions.Expression"/>. </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="parameters">The specified parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.TryGetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service">The specified service type.</param>
            <param name="member"> Type where injected specified service.</param>
            <param name="parameterInfo"> </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="all"> </param>
            <param name="parameters">The specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.TryGetAllInCurrent``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="member"> Type where injected specified service.</param>
            <param name="parameterInfo"> </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="all"> </param>
            <param name="parameters">The specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.TryGetAll(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{System.Object}@,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="service"> </param>
            <param name="member">Type where injected specified service. </param>
            <param name="parameter"> </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="all"> </param>
            <param name="parameters">The specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.TryGetAll``1(MugenInjection.Interface.IInjectorResolver,System.Collections.Generic.IEnumerable{``0}@,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Try gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="result">Result objects. </param>
            <param name="member">Type where injected specified service. </param>
            <param name="parameter"> </param>
            <param name="specialParameters">Special parameters for resolve current service. </param>
            <param name="all"> </param>
            <param name="parameters">The specified parameters. </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.GetAllInCurrent(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> (for into type).
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="parameterInfo"> </param>
            <param name="specialParameters"> </param>
            <param name="all"> </param>
            <param name="parameters"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.GetAll(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Gets all available instances of the specified service in the specified <see cref="T:MugenInjection.Interface.IInjector"/> include all of its child and parent <see cref="T:MugenInjection.Interface.IInjector"/> (for into type).
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="service">The specified service type.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="parameter"> </param>
            <param name="specialParameters"> </param>
            <param name="all"> </param>
            <param name="parameters"> </param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Bind(MugenInjection.Interface.IInjector,System.Boolean,System.Type[])">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="withManualBuild">Add with manual build.</param>
            <param name="service">The specified service type.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Bind``1(MugenInjection.Interface.IInjector,System.Boolean)">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="withManualBuild">Add with manual build.</param>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Bind``2(MugenInjection.Interface.IInjector,System.Boolean)">
            <summary>
            Declares a binding for the specified services
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <param name="withManualBuild">Add with manual build.</param>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Bind``3(MugenInjection.Interface.IInjector,System.Boolean)">
            <summary>
            Declares a binding for the specified services
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <typeparam name="T3">The specified service type.</typeparam>
            <param name="withManualBuild">Add with manual build.</param>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Bind``4(MugenInjection.Interface.IInjector,System.Boolean)">
            <summary>
            Declares a binding for the specified services
            </summary>
            <typeparam name="T1">The specified service type.</typeparam>
            <typeparam name="T2">The specified service type.</typeparam>
            <typeparam name="T3">The specified service type.</typeparam>
            <typeparam name="T4">The specified service type.</typeparam>
            <param name="withManualBuild">Add with manual build.</param>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.BindTo``2(MugenInjection.Interface.IInjector,System.Boolean)">
            <summary>
            Declares a binding for the specified service <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <typeparam name="TTypeTo">Type to bind specified service. </typeparam>
            <param name="withManualBuild">Add with manual build.</param>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Rebind(MugenInjection.Interface.IInjector,System.Type)">
            <summary>
            Removes any existing bindings for the specified services, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service types.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Rebind``1(MugenInjection.Interface.IInjector)">
            <summary>
            Removes any existing bindings for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <typeparam name="T">The specified service type.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Rebind(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="parameter"> </param>
            <param name="specialParameters"> </param>
            <param name="parameters">The specified binding parameters. </param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Rebind``1(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},MugenInjection.Interface.IInjectionParameter[])">
            <summary>
            Removes any existing bindings with specified condition for the specified services <see cref="!:T"/>, and declares a new one.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="parameter"> </param>
            <param name="specialParameters"> </param>
            <param name="parameters">The specified binding parameters. </param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type)">
            <summary>
            Unregisters all bindings for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Unbind(MugenInjection.Interface.IInjectorBinder,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Unregisters all bindings for the specified service, with specific condition.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="type">The specified service type.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="parameter"> </param>
            <param name="specialParameters"> </param>
            <param name="parameters">The specified binding parameters. </param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.CanResolve(MugenInjection.Interface.IInjectorResolver,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Check can resolve specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>. </param>
            <param name="service">Service for resolve.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> when injected specified service. Can be null.</param>
            <param name="parameterInfo"><see cref="T:System.Reflection.ParameterInfo"/> when injected specified service. Can be null. </param>
            <param name="parameters">Parameters for service. </param>
            <param name="specialParameters">Special parameters for resolve specified service. </param>
            <param name="searchInParent">If set to <c>true</c> search in parent bindings.</param>
            <param name="includeImplicitBindings">If set to <c>false</c> implicit bindings are ignored.</param>
            <returns>Indicate can resolve.</returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.Release(MugenInjection.Interface.IInjector,System.Type,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Collections.Generic.IEnumerable{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Release specified service in scope.
            </summary>
            <param name="injector"> </param>
            <param name="service">Service for release.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="parameters">The specified binding parameters. </param>
            <param name="parameterInfo"> </param>
            <param name="specialParameters">Special parameters for release specified service.</param>
            <param name="needDispose">Try dispose object.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.LoadModules(MugenInjection.Interface.IInjector,System.Reflection.Assembly[])">
            <summary>
            Loads modules defined in the specified assemblies.
            </summary>
            <param name="injector"></param>
            <param name="assemblies">The assemblies to search.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.BindAsDecoratorForAll``1(MugenInjection.Interface.IInjector,System.Func{MugenInjection.Interface.IBindingContext,``0,``0})">
            <summary>
            Decorate all components implementing service <typeparamref name="TService"/> using the provided <paramref name="decorator"/> function.
            </summary>
            <typeparam name="TService">Service type being decorated.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="decorator">Function decorating a component instance.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.BindAsDecoratorFor``1(MugenInjection.Interface.IInjector,System.Action{MugenInjection.Syntax.IConditionBuilder{``0}},System.Func{MugenInjection.Interface.IBindingContext,``0,``0})">
            <summary>
            Decorate components with specified condition implementing service <typeparamref name="TService"/> using the provided <paramref name="decorator"/> function.
            </summary>
            <typeparam name="TService">Service type being decorated.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="buildCondition">The specified delegate to build condition.</param>
            <param name="decorator">Function decorating a component instance.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.UnbindAllDecoratorsFor``1(MugenInjection.Interface.IInjector)">
            <summary>
            Unregisters all decorators for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.UnbindDecoratorsFor``1(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Unregisters decorators for the specified service, with specific condition.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="parameter"> </param>
            <param name="specialParameters"> </param>
            <param name="parameters">The specified binding parameters. </param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.BindAsAdapterForAll``2(MugenInjection.Interface.IInjector,System.Func{MugenInjection.Interface.IBindingContext,``0,``1})">
            <summary>
            Adapts all components implementing service <typeparamref name="TFrom"/> to provide <typeparamref name="TTo"/> using the provided <paramref name="adapter"/> function.
            </summary>
            <typeparam name="TFrom">Service type to adapt from.</typeparam>
            <typeparam name="TTo">Service type to adapt to. Must not be the same as <typeparamref name="TFrom"/>.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="adapter">Function adapting <typeparamref name="TFrom"/> to service <typeparamref name="TTo"/>.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.BindAsAdapterFor``2(MugenInjection.Interface.IInjector,System.Action{MugenInjection.Syntax.IConditionBuilder{``1}},System.Func{MugenInjection.Interface.IBindingContext,``0,``1})">
            <summary>
            Adapts components with specified condition implementing service <typeparamref name="TFrom"/> to provide <typeparamref name="TTo"/> using the provided <paramref name="adapter"/> function.
            </summary>
            <typeparam name="TFrom">Service type to adapt from.</typeparam>
            <typeparam name="TTo">Service type to adapt to. Must not be the same as <typeparamref name="TFrom"/>.</typeparam>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="buildCondition">The specified delegate to build condition.</param>
            <param name="adapter">Function adapting <typeparamref name="TFrom"/> to service <typeparamref name="TTo"/>.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.UnbindAllAdaptersFor``2(MugenInjection.Interface.IInjector)">
            <summary>
            Unregisters all adapters for the specified service.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
        </member>
        <member name="M:MugenInjection.InjectorExtensionUtils.UnbindAdaptersFor``2(MugenInjection.Interface.IInjector,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{MugenInjection.Interface.IInjectionParameter})">
            <summary>
            Unregisters adapters for the specified service, with specific condition.
            </summary>
            <param name="injector">The specified <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="member">Type when injected specified service.</param>
            <param name="parameter"> </param>
            <param name="specialParameters">The special parameters.</param>
            <param name="parameters">The specified binding parameters. </param>
        </member>
        <member name="T:MugenInjection.Interface.Behaviors.ICycleDependencyBehavior">
            <summary>
            The behavior that resolves a circular dependencies.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Behaviors.ICycleDependencyBehavior.Resolve(MugenInjection.Interface.IBindingContext,System.Object@)">
            <summary>
            Resolves a circular dependencies.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="result">An instance of the service.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:MugenInjection.Interface.Behaviors.IResolveUnregisteredTypeBehavior">
            <summary>
            The behavior that resolves an unregistered type.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.Behaviors.IResolveUnregisteredTypeBehavior.Resolve(MugenInjection.Interface.IBindingContext,System.Object@)">
            <summary>
            Resolves an unregistered serivce.
            </summary>
            <param name="bindingContext">The specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.</param>
            <param name="result">An instance of the service.</param>
            <returns><c>True</c> if the specified service has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:MugenInjection.Interface.TypeChangedDelegate">
            <summary>
                Represents the delegate that will handle events raised when a <c>Type</c> changed.
            </summary>
            <param name="sender">
                The specified <see cref="T:MugenInjection.Interface.IConverter"/> when type was changed.
            </param>
            <param name="action">The type of action.</param>
            <param name="type">The changed type.</param>
        </member>
        <member name="T:MugenInjection.Interface.IInitializable">
            <summary>
                A service that requires initialization after it is activated.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IInitializable.Initialize">
            <summary>
                Initializes the instance. Called during activation.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IInjectionParameter">
            <summary>
            Represents the parameter for the <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IInjectionParameter.CanResolve(System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="memberInfo">The specified <see cref="T:System.Reflection.MemberInfo"/></param>
            <param name="parameter">The specified <see cref="T:System.Reflection.ParameterInfo"/> </param>
            <returns><c>True</c> if the specified request has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Interface.IInjectionParameter.GetValue(MugenInjection.Interface.IParameterContext)">
            <summary>
            Gets parameter value for specified <see cref="T:MugenInjection.Interface.IParameterContext"/>.
            </summary>
            <param name="parameterContext">The specified <see cref="T:MugenInjection.Interface.IParameterContext"/>.</param>
            <returns>An instance of the parameter value.</returns>
        </member>
        <member name="P:MugenInjection.Interface.IInjectionParameter.Name">
            <summary>
            Gets the specified parameter name.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectionParameter.ParameterType">
            <summary>
            Gets the specified parameter <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IInjectionParameter.MemberType">
            <summary>
            Gets the specified parameter <see cref="T:System.Reflection.MemberTypes"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IScopeLifecycleContext">
            <summary>
             Represents the context for scope lifecycle.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IScopeLifecycleContext.ResolveCurrentService">
            <summary>
            Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="P:MugenInjection.Interface.IScopeLifecycleContext.Binding">
            <summary>
            Gets the <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Interface.IScopeLifecycleContext.BindingContext">
            <summary>
            Gets the current <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Interface.IStartable">
            <summary>
                A service that is started when activated, and stopped when deactivated.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IStartable.Start">
            <summary>
                Starts this instance. Called during activation.
            </summary>
        </member>
        <member name="M:MugenInjection.Interface.IStartable.Stop">
            <summary>
                Stops this instance. Called during deactivation.
            </summary>
        </member>
        <member name="T:MugenInjection.MugenInjector">
            <summary>
            The standard implementation of a <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjectorModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.MugenInjector"/> class.
            </summary>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(System.Collections.Generic.IEnumerable{MugenInjection.Interface.Components.IComponent},MugenInjection.Interface.IInjectorModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.MugenInjector"/> class.
            </summary>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>(s).</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IInjectorModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.MugenInjector"/> class.
            </summary>
            <param name="settings">The settings for creating <see cref="T:MugenInjection.MugenInjector"/>.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,MugenInjection.Interface.IInjectorModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.MugenInjector"/> class.
            </summary>
            <param name="componentContainer">The specified <see cref="T:MugenInjection.Interface.IComponentContainer"/> </param>
            <param name="settings">Settings for creating <see cref="T:MugenInjection.MugenInjector"/>.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,System.Collections.Generic.IEnumerable{MugenInjection.Interface.Components.IComponent},MugenInjection.Interface.IInjectorModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.MugenInjector"/> class.
            </summary>
            <param name="componentContainer">The specified <see cref="T:MugenInjection.Interface.IComponentContainer"/> </param>
            <param name="settings">Settings for creating <see cref="T:MugenInjection.MugenInjector"/>.</param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>(s).</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectorModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.MugenInjector"/> class.
            </summary>
            <param name="injector">The parent <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjector,System.Collections.Generic.IEnumerable{MugenInjection.Interface.Components.IComponent},MugenInjection.Interface.IInjectorModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.MugenInjector"/> class.
            </summary>
            <param name="injector">The parent <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>(s).</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IInjectorModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.MugenInjector"/> class.
            </summary>
            <param name="injector">The parent <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="settings">Settings for creating <see cref="T:MugenInjection.MugenInjector"/>.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,MugenInjection.Interface.IInjectorModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.MugenInjector"/> class.
            </summary>
            <param name="injector">The parent <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="componentContainerContainer"> </param>
            <param name="settings">Settings for creating <see cref="T:MugenInjection.MugenInjector"/>.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.#ctor(MugenInjection.Interface.IInjector,MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,System.Collections.Generic.IEnumerable{MugenInjection.Interface.Components.IComponent},MugenInjection.Interface.IInjectorModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.MugenInjector"/> class.
            </summary>
            <param name="injector">The parent <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="componentContainerContainer"> </param>
            <param name="settings">Settings for creating <see cref="T:MugenInjection.MugenInjector"/>.</param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/>(s). Can be null.</param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/>s.</param>
        </member>
        <member name="M:MugenInjection.MugenInjector.CreateChildInjector(MugenInjection.Interface.IInjectorSettings,MugenInjection.Interface.IComponentContainer,System.Collections.Generic.IList{MugenInjection.Interface.Components.IComponent},MugenInjection.Interface.IInjectorModule[])">
            <summary>
            Creates a child <see cref="T:MugenInjection.Interface.IInjector"/> for the current <see cref="T:MugenInjection.Interface.IInjector"/>.
            </summary>
            <param name="settings">The specified settings for the child <see cref="T:MugenInjection.Interface.IInjector"/>.</param>
            <param name="componentContainer">The specified <see cref="T:MugenInjection.Interface.IComponentContainer"/>. </param>
            <param name="components">The specified <see cref="T:MugenInjection.Interface.Components.IComponent"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <param name="modules">The specified <see cref="T:MugenInjection.Core.InjectorModule"/> for new <see cref="T:MugenInjection.Interface.IInjector"/></param>
            <returns>An instance of <see cref="T:MugenInjection.Interface.IInjector"/>.</returns>
        </member>
        <member name="T:MugenInjection.Parameters.ConstructorParameter">
            <summary>
                Represents the value of a constructor argument.
            </summary>
        </member>
        <member name="T:MugenInjection.Parameters.InjectionParameter">
            <summary>
            Represents the base class for parameters.
            </summary>
        </member>
        <member name="F:MugenInjection.Parameters.InjectionParameter.EmptyParameterName">
            <summary>
            Gets the empty parameter name.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameter.#ctor(System.Reflection.MemberTypes,System.String,MugenInjection.Delegates.ParameterDelegate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Parameters.InjectionParameter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameter.#ctor(System.Reflection.MemberTypes,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Parameters.InjectionParameter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameter.#ctor(System.Object,System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean},System.Reflection.MemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Parameters.InjectionParameter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameter.#ctor(MugenInjection.Delegates.ParameterDelegate{System.Object},System.Func{MugenInjection.Interface.IInjectionParameter,System.Reflection.MemberInfo,System.Reflection.ParameterInfo,System.Boolean},System.Reflection.MemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:MugenInjection.Parameters.InjectionParameter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameter.CanResolveInternal(System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
            Determines whether the specified request can be resolved, this method will be invoked if <c>CanResolveDelegate</c> is null.
            </summary>
            <param name="memberInfo">The specified <see cref="T:System.Reflection.MemberInfo"/></param>
            <param name="parameter">The specified <see cref="T:System.Reflection.ParameterInfo"/> </param>
            <returns><c>True</c> if the specified request has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameter.CanResolve(System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="memberInfo">The specified <see cref="T:System.Reflection.MemberInfo"/></param>
            <param name="parameter">The specified <see cref="T:System.Reflection.ParameterInfo"/> </param>
            <returns><c>True</c> if the specified request has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameter.GetValue(MugenInjection.Interface.IParameterContext)">
            <summary>
            Gets parameter value for specified <see cref="T:MugenInjection.Interface.IParameterContext"/>.
            </summary>
            <param name="parameterContext">The specified <see cref="T:MugenInjection.Interface.IParameterContext"/>.</param>
            <returns>An instance of the parameter value.</returns>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameter.Equals(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.
                            </param>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameter.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. 
                            </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.
                            </exception>
        </member>
        <member name="M:MugenInjection.Parameters.InjectionParameter.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:MugenInjection.Parameters.InjectionParameter.GetValueDelegate">
            <summary>
            Gets or sets the specified delegate to create parameter value.
            </summary>
        </member>
        <member name="P:MugenInjection.Parameters.InjectionParameter.CanResolveDelegate">
            <summary>
            Gets or sets the specified delegate to determines whether the specified request can be resolved.
            </summary>
        </member>
        <member name="P:MugenInjection.Parameters.InjectionParameter.Name">
            <summary>
            Gets the specified parameter name.
            </summary>
        </member>
        <member name="P:MugenInjection.Parameters.InjectionParameter.ParameterType">
            <summary>
            Gets the specified parameter <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Parameters.InjectionParameter.MemberType">
            <summary>
            Gets the specified parameter <see cref="T:System.Reflection.MemberTypes"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter.#ctor(System.String,MugenInjection.Delegates.ParameterDelegate{System.Object},System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Parameters.ConstructorParameter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter.#ctor(System.String,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Parameters.ConstructorParameter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter.#ctor(System.String,System.Type,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Parameters.ConstructorParameter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter.#ctor(System.Int32,MugenInjection.Delegates.ParameterDelegate{System.Object},System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Parameters.ConstructorParameter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter.#ctor(System.Int32,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Parameters.ConstructorParameter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter.#ctor(System.Int32,System.Type,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Parameters.ConstructorParameter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.ConstructorParameter.CanResolveInternal(System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
                Determines whether the specified request can be resolved.
            </summary>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>
            </param>
            <param name="parameter">
                The specified <see cref="T:System.Reflection.ParameterInfo"/>
            </param>
            <returns>
                <c>True</c> if the specified request has been resolved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MugenInjection.Parameters.ConstructorParameter.Position">
            <summary>
                Gets the position of parameter, if any.
            </summary>
        </member>
        <member name="T:MugenInjection.Parameters.MethodParameter">
            <summary>
            Represents the value of a method parameter.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.#ctor(System.String,System.String,MugenInjection.Delegates.ParameterDelegate{System.Object},System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Parameters.MethodParameter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.#ctor(System.String,System.String,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Parameters.MethodParameter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.#ctor(System.String,System.String,System.Type,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Parameters.MethodParameter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.#ctor(System.String,System.Int32,MugenInjection.Delegates.ParameterDelegate{System.Object},System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Parameters.MethodParameter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.#ctor(System.String,System.Int32,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Parameters.MethodParameter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.#ctor(System.String,System.Int32,System.Type,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Parameters.MethodParameter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.Equals(MugenInjection.Interface.IInjectionParameter)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:MugenInjection.Parameters.MethodParameter.CanResolveInternal(System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="memberInfo">The specified <see cref="T:System.Reflection.MemberInfo"/></param>
            <param name="parameter">The specified <see cref="T:System.Reflection.ParameterInfo"/> </param>
            <returns><c>True</c> if the specified request has been resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:MugenInjection.Parameters.MethodParameter.MethodName">
            <summary>
            Gets the method name.
            </summary>
        </member>
        <member name="P:MugenInjection.Parameters.MethodParameter.Position">
            <summary>
            Gets the position of parameter, if any.
            </summary>
        </member>
        <member name="T:MugenInjection.Parameters.PropertyParameter">
            <summary>
                Represents the value of a property parameter.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter.#ctor(System.String,MugenInjection.Delegates.ParameterDelegate{System.Object},System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Parameters.PropertyParameter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter.#ctor(System.String,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Parameters.PropertyParameter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter.#ctor(System.String,System.Type,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Parameters.PropertyParameter"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Parameters.PropertyParameter.CanResolveInternal(System.Reflection.MemberInfo,System.Reflection.ParameterInfo)">
            <summary>
                Determines whether the specified request can be resolved.
            </summary>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>
            </param>
            <param name="parameter">
                The specified <see cref="T:System.Reflection.ParameterInfo"/>
            </param>
            <returns>
                <c>True</c> if the specified request has been resolved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MugenInjection.ReflectionExtension">
            <summary>
                Represents a extensions method for the <see cref="T:MugenInjection.Interface.IReflectionAccessProvider"/>
            </summary>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.CreateInstance(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
                Invokes the constructor reflected by the instance that has the specified parameters.
            </summary>
            <param name="constructorInfo">
                The specified <see cref="T:System.Reflection.ConstructorInfo"/>.
            </param>
            <param name="parameters">An argument list for the invoked constructor. This is an array of objects with the same number, order, and type as the parameters of the method to be invoked.</param>
            <returns>An instance of object.</returns>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.InvokeFast``1(System.Reflection.MethodInfo,``0,System.Object[])">
            <summary>
                Invokes the method represented by the specified <see cref="T:System.Reflection.MethodInfo"/>, using the specified parameters.
            </summary>
            <param name="methodInfo">
                The specified <see cref="T:System.Reflection.MethodInfo"/>
            </param>
            <param name="target">The object on which to invoke the method. If a method is static, this argument is ignored.</param>
            <param name="parameters">An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method to be invoked.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.InvokeFast(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
                Invokes the method represented by the specified <see cref="T:System.Reflection.MethodInfo"/>, using the specified parameters.
            </summary>
            <param name="methodInfo">
                The specified <see cref="T:System.Reflection.MethodInfo"/>
            </param>
            <param name="target">The object on which to invoke the method. If a method is static, this argument is ignored.</param>
            <param name="parameters">An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method to be invoked.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.InvokeFast``1(System.Reflection.MethodInfo,``0@,System.Object[])">
            <summary>
                Invokes the method represented by the specified <see cref="T:System.Reflection.MethodInfo"/>, using the specified parameters.
            </summary>
            <param name="methodInfo">
                The specified <see cref="T:System.Reflection.MethodInfo"/>
            </param>
            <param name="target">The object on which to invoke the method. If a method is static, this argument is ignored.</param>
            <param name="parameters">An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method to be invoked.</param>
            <returns></returns>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.SetValueFast``1(System.Reflection.MemberInfo,``0,System.Object)">
            <summary>
                Sets the value of the field or property supported by the given object.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>.
            </param>
            <param name="target">The object whose field or property value will be set.</param>
            <param name="value">The value to assign to the member.</param>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.SetValueFast``1(System.Reflection.MemberInfo,``0@,System.Object)">
            <summary>
                Sets the value of the field or property supported by the given object.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>.
            </param>
            <param name="target">The object whose field or property value will be set.</param>
            <param name="value">The value to assign to the member.</param>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.GetValueFast``2(System.Reflection.MemberInfo,``0)">
            <summary>
                Returns the value of a field or property supported by a given object.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <typeparam name="T">
                The type of <see cref="T:System.Reflection.MemberInfo"/> value to get.
            </typeparam>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>.
            </param>
            <param name="target">The object whose field value will be returned.</param>
            <returns>An object containing the value of the field reflected by this instance.</returns>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.GetValueFast``1(System.Reflection.MemberInfo,``0)">
            <summary>
                Returns the value of a field or property supported by a given object.
            </summary>
            <typeparam name="TTarget">Type of the target.</typeparam>
            <param name="memberInfo">
                The specified <see cref="T:System.Reflection.MemberInfo"/>.
            </param>
            <param name="target">The object whose field value will be returned.</param>
            <returns>An object containing the value of the field reflected by this instance.</returns>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.ConvertToWeakDelegate``1(``0)">
            <summary>
                Returns a weak-reference version of a delegate.
            </summary>
            <param name="originalAction">The delegate to convert to weak referencing.</param>
            <returns>A weak referencing delegate.</returns>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.ConvertToWeakDelegate``1(``0,System.Action{``0})">
            <summary>
                Returns a weak-reference version of a delegate.
            </summary>
            <param name="originalAction">The delegate to convert to weak referencing.</param>
            <param name="unsubcribeDelegate">The unregister action to invoke if the target is garbage collected.</param>
            <returns>A weak referencing delegate.</returns>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.FindWeakDelegateByOriginalDelegate``1(``0,System.Collections.Generic.IList{System.Delegate})">
            <summary>
            Finds the weak-delegate use a original delegate in the specified array of delegate.
            </summary>
            <param name="originalAction">The original delegate to find weak delegate.</param>
            <param name="delegates">The specified array of delegate</param>
            <returns>An instance of delegate.</returns>
        </member>
        <member name="M:MugenInjection.ReflectionExtension.ConvertToProxyDelegate(System.Func{System.Object[],System.Object},System.Type)">
            <summary>
                Converts the Func{object[], object} to the specified delegate type.
            </summary>
            <param name="proxyDelegate">The specified proxy method.</param>
            <param name="delegateType">The specified delegate type.</param>
            <returns>An instance of delegate type.</returns>
        </member>
        <member name="T:MugenInjection.Scope.CustomScopeLifecycle">
            <summary>
                Represents the custom lifecycle.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.CustomScopeLifecycle.#ctor(MugenInjection.Delegates.CustomScopeDelegate)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Scope.CustomScopeLifecycle"/> class.
            </summary>
            <param name="customScopeDelegate"></param>
        </member>
        <member name="M:MugenInjection.Scope.CustomScopeLifecycle.GetObjectFromScope">
            <summary>
                Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> from scope.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Scope.CustomScopeLifecycle.ReleaseObjects(System.Boolean)">
            <summary>
                Releases all objects in current scope.
            </summary>
            <param name="isNeedDisposeObject">Indicating that need trying dispose objects.</param>
        </member>
        <member name="M:MugenInjection.Scope.CustomScopeLifecycle.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="P:MugenInjection.Scope.CustomScopeLifecycle.Context">
            <summary>
                Gets or sets the <see cref="T:MugenInjection.Interface.IScopeLifecycleContext"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Scope.CustomScopeLifecycle.MugenInjection#Interface#IScopeLifecycle#ReleaseObjectActions">
            <summary>
                Gets the actions that should be called before instances are deactivated via the binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Scope.DefaultScopeLifecycleContext">
            <summary>
                Represents the default <see cref="T:MugenInjection.Interface.IScopeLifecycleContext"/>.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.DefaultScopeLifecycleContext.#ctor(MugenInjection.Bindings.BindingBase)">
            <summary>
                Initializes a new instance of the <see cref="T:MugenInjection.Scope.DefaultScopeLifecycleContext"/> class.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.DefaultScopeLifecycleContext.ResolveCurrentService">
            <summary>
                Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="P:MugenInjection.Scope.DefaultScopeLifecycleContext.Binding">
            <summary>
            Gets the <see cref="T:MugenInjection.Interface.IBinding"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Scope.DefaultScopeLifecycleContext.BindingContext">
            <summary>
                Gets the current <see cref="T:MugenInjection.Interface.IBindingContext"/>.
            </summary>
        </member>
        <member name="T:MugenInjection.Scope.ManagedScopeLifecycle">
            <summary>
                Represents the managed scope lifecycle.
            </summary>
        </member>
        <member name="F:MugenInjection.Scope.ManagedScopeLifecycle.ScopeLocker">
            <summary>
                Gets the object to lock scope-operations.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.ManagedScopeLifecycle.SetManagedScope(MugenInjection.Interface.IManagedScope)">
            <summary>
                Sets the current managet scope, if you use this method use <see cref="F:MugenInjection.Scope.ManagedScopeLifecycle.ScopeLocker"/> for thread-safety.
            </summary>
            <param name="scope">
                The specified <see cref="T:MugenInjection.Interface.IManagedScope"/>, if any.
            </param>
        </member>
        <member name="M:MugenInjection.Scope.ManagedScopeLifecycle.GetManagedScope(System.Boolean)">
            <summary>
                Gets the current managet scope, if you use this method use <see cref="F:MugenInjection.Scope.ManagedScopeLifecycle.ScopeLocker"/> for thread-safety.
            </summary>
            <returns>
                An instance of <see cref="T:MugenInjection.Interface.IManagedScope"/>.
            </returns>
        </member>
        <member name="M:MugenInjection.Scope.ManagedScopeLifecycle.GetObjectFromScope">
            <summary>
                Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> from scope.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Scope.ManagedScopeLifecycle.GetObjectsFromScope">
            <summary>
                Gets all created objects in the current scope.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.ManagedScopeLifecycle.ClearScope">
            <summary>
                Clears the current scope.
            </summary>
        </member>
        <member name="T:MugenInjection.Scope.SingletonScopeLifecycle">
            <summary>
                Represents the singleton scope lifecycle.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.SingletonScopeLifecycle.GetObjectFromScope">
            <summary>
                Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> from scope.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Scope.SingletonScopeLifecycle.GetObjectsFromScope">
            <summary>
                Gets all created objects in the current scope.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.SingletonScopeLifecycle.ClearScope">
            <summary>
                Clears the current scope.
            </summary>
        </member>
        <member name="T:MugenInjection.Scope.ThreadScopeLifecycle">
            <summary>
                Represents the thread scope lifecycle.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.ThreadScopeLifecycle.GetObjectFromScope">
            <summary>
                Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> from scope.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Scope.ThreadScopeLifecycle.GetObjectsFromScope">
            <summary>
                Gets all created objects in the current scope.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.ThreadScopeLifecycle.ClearScope">
            <summary>
                Clears the current scope.
            </summary>
        </member>
        <member name="T:MugenInjection.Scope.TransientScopeLifecycle">
            <summary>
                Represents the transient scope lifecycle.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.TransientScopeLifecycle.GetObjectFromScope">
            <summary>
                Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> from scope.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Scope.TransientScopeLifecycle.ReleaseObjects(System.Boolean)">
            <summary>
                Releases all objects in current scope.
            </summary>
            <param name="isNeedDisposeObject">Indicating that need trying dispose objects.</param>
        </member>
        <member name="P:MugenInjection.Scope.TransientScopeLifecycle.Context">
            <summary>
                Gets or sets the <see cref="T:MugenInjection.Interface.IScopeLifecycleContext"/>.
            </summary>
        </member>
        <member name="P:MugenInjection.Scope.TransientScopeLifecycle.MugenInjection#Interface#IScopeLifecycle#ReleaseObjectActions">
            <summary>
                Gets the actions that should be called before instances are deactivated via the binding.
            </summary>
        </member>
        <member name="T:MugenInjection.Scope.UnitOfWorkScopeLifecycle">
            <summary>
                The instance will be singleton for the duration of the unit of work. In practice this means that each injector will contain one unit of service.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.UnitOfWorkScopeLifecycle.GetObjectFromScope">
            <summary>
                Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> from scope.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Scope.UnitOfWorkScopeLifecycle.GetObjectsFromScope">
            <summary>
                Gets all created objects in the current scope.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.UnitOfWorkScopeLifecycle.ClearScope">
            <summary>
                Clears the current scope.
            </summary>
        </member>
        <member name="T:MugenInjection.Scope.WeakReferenceScopeLifecycle">
            <summary>
                Represents the weak reference scope lifecycle.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.WeakReferenceScopeLifecycle.GetObjectFromScope">
            <summary>
                Resolves instance for the specified <see cref="T:MugenInjection.Interface.IBindingContext"/> from scope.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:MugenInjection.Scope.WeakReferenceScopeLifecycle.GetObjectsFromScope">
            <summary>
                Gets all created objects in the current scope.
            </summary>
        </member>
        <member name="M:MugenInjection.Scope.WeakReferenceScopeLifecycle.ClearScope">
            <summary>
                Clears the current scope.
            </summary>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param><param name="value">The object to use as the value of the element to add.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key whose value to get.</param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="P:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="P:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:MugenInjection.Infrastructure.ReadOnlyEmtpyDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
    </members>
</doc>
